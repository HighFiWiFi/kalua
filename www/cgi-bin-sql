#!/bin/sh
. /tmp/loader

if [ -z "$1" ]; then

	eval $( _http query_string_sanitize )		# LOGIN={md5sum_of_user+pass} | MAC=00:11:22:33:44:55 | SIGNAL=-64 | KEYWORD=username+pass | USER_LANG=de

	_http header_mimetype_output "text/plain"
else
	LOGIN="$1"
	MAC="$2"
	SIGNAL="$3"
	KEYWORD="$4"
	USER_LANG="$5"	
fi

[ -z "$LOGIN" ] && {
	_log do no_args daemon info "no login-data given - abort"
	exit 1
}

_system include				# fixme! move all from this line down to weblogin()

DATE="$( _system date full )"
DNS="$( nslookup ${REMOTE_ADDR:=127.0.0.1} | sed -n 's/^Name:[^a-zA-Z0-9]*\(.*\)\.olsr/\1/p' )"		# https?
OUT="'$DATE' - IP:'$REMOTE_ADDR' - DNS:'${DNS:-unresolveable}' = HASH:'$LOGIN' - MAC:'$MAC' - SIGNAL:'$SIGNAL' - KEYWORD:'$KEYWORD' - LANG:'$USER_LANG'"

build_vars ()
{
		LASTSEEN="$( _system date unixtime )"
		LANG="$USER_LANG"
		DEVTYPE=1				# wire
		[ "$SIGNAL" != "lan" ] && DEVTYPE=0	# wifi
}

USER_ID="$( _db user login query hash2id "$LOGIN" )"		# fixme! use always HASH for keyword
  if [ -e /tmp/FREE ]; then

	_log do detect_free_user daemon info "local instruction = free: user $MAC"  
  	echo "1"

elif [ -n "$USER_ID" ]; then

	USER_ID_STACK="$USER_ID"

	DEVICE_ID="$( _db user device query string2id "${MAC:-unsetmacaddress}" )"
	if [ -n "$DEVICE_ID" ]; then

		eval "$( _db user device show $DEVICE_ID )"	# fixme! check for time or traffic-range overrun

		build_vars

		_log do login_ok daemon info "OLD user, updating DB '$LOGIN' - $OUT"
		_db user device update "$DEVICE_ID" "$USER_ID_STACK" "$MAC" "$DEVTYPE" "$LANG" "$FIRSTSEEN" "$LASTSEEN" "$USED_TRAFFIC" "$USED_TIME" "$USED_TRAFFIC_TODAY" "$USED_TIME_TODAY" "$ISOLATION"
	else
		build_vars
		FIRSTSEEN="$LASTSEEN"
		USED_TRAFFIC=0
		USED_TIME=0

		_log do login_ok daemon info "NEW user, adding to DB '$LOGIN' - $OUT"
		_db user device add                 "$USER_ID_STACK" "$MAC" "$DEVTYPE" "$LANG" "$FIRSTSEEN" "$LASTSEEN" "$USED_TRAFFIC" "$USED_TIME" "$USED_TRAFFIC_TODAY" "$USED_TIME_TODAY" "$ISOLATION"

		echo "$LOGIN" >/tmp/vds_user_$MAC			# LOGIN = HASH

		eval $( _db user device show last "USER_ID" )
		eval $( _db user login show $USER_ID "PROFILE_ID" )

		_scheduler add "_db ticketcheck $PROFILE_ID"
	fi

	_scheduler add "_db backup"
	echo "1"
else
	_log do login_mismatch daemon info "login_failed: $OUT"
	echo "0"
fi
