#!/bin/sh
exit
. /etc/variables_fff+
. /etc/functions_base_fff+
. /etc/functions_http_fff+
. /etc/functions_logging_fff+
. /etc/functions_olsr
. /tmp/NETPARAM
. /tmp/vars

func_print_help ()
{
	local FILL="?"
	[ -z "$REQUEST_METHOD" ] && FILL=" "
	
	cat<<EOF
$0${FILL}n           - show all OLSR-neighbours, plain
$0${FILL}n=10.1.2.3  - testdownload for $TESTTIME secs from 10.1.2.3 and some calculations
$0${FILL}s=10.1.2.3  - print average speed for ip 10.1.2.3
$0${FILL}r           - testdownload from random wifi neighbour with ETX < $MAXETX
$0${FILL}a           - list archiv of older testdownloads
EOF
}

func_ip2metric ()	# fixme! move to functions_ip? also in 'neigh'
{
	ip route list $1 | sed -n 's/^.*metric \([0-9]*\).*/\1/p'
}

func_make_vars ()
{
	UNIXTIME="$(date +%s)"
	HUMNDATE="$(date +%d%b%Y-%Huhr%M)"
	TESTTIME="10"
	MAXETX="7"	# fixme! only test neighs with lq<7 ?
}

func_iptables_rule ()
{
	iptables -$1 INPUT -p tcp -s $n -d $WIFI_IP --sport 80 -j ACCEPT
}

func_download_testdata ()
{
	wget -qO /dev/null "http://$n/cgi-bin-dev-zero.bin" &
	sleep $TESTTIME
	killall wget
}

fkt_eval_data ()
{
	WIFI_IP_ESCAPED="$(echo $WIFI_IP | sed 's/\./\\./g')"
	
	iptables -nxvL INPUT |
	grep $WIFI_IP_ESCAPED |
	head -n 1 |
	while read A B C; do
		let KB=B/10/1024
		let PS=B/A
		test -z "$PS" && PS="0"
		echo -en "KBYTE_PER_SEC=$KB; AVG_PACKETSIZE=$PS; "
	done
	
	echo -en "RATE=$(wl rate | cut -d' ' -f3)\n"
}

fkt_print_lastline ()
{
	tail -n 1 $TEST_NEIGHBOUR_SPEED
}

fkt_select_random_wifi_neighbour () {
	local ROUND=$1			# ARG1: string, "round" - if omitted, ETX is float

	. /tmp/NETPARAM
	WIFIADR_ESCAPED="$(echo $WIFIADR | sed 's/\./\\./g')"
	wget -O - http://127.0.0.1:2006/neighbours | sed -e '/./{H;$!d;}' -e 'x;/Table: Links/!d;' | grep $WIFIADR_ESCAPED | awk -v R=$ROUND '/0.00/ {
		c++; NEIGHBOUR[c]=$2; ETX[c]=$8 }END{
			srand()
			SELECT=1+int(c*rand())
			if(R=="round")
				print "n="NEIGHBOUR[SELECT]"; ETX="int(ETX[SELECT])
			else
				print "n="NEIGHBOUR[SELECT]"; ETX="ETX[SELECT]
			
	}'
}

fkt_watch_archiv () {
	tail -n 250 "${TEST_NEIGHBOUR_SPEED}"     >"${TEST_NEIGHBOUR_SPEED}_temp"
	mv          "${TEST_NEIGHBOUR_SPEED}_temp" "${TEST_NEIGHBOUR_SPEED}"
}

fkt_print_average () {
	local IP="$s"
	local C="0"
	local KBYTE_SUM=0
	local MIN="9999"
	local MAX="0"
	
	LIST=$(grep "REMOTE=$IP" $TEST_NEIGHBOUR_SPEED)
	
	for OBJ in $LIST; do
	
		if [ ! -z $(echo $OBJ | grep KBYTE_PER_SEC) ];then
			local KBYTE_PER_SEC=0
			eval $OBJ
			
			if [ $KBYTE_PER_SEC -gt 0 ]; then
				let KBYTE_SUM+=$KBYTE_PER_SEC
				let C+=1
				
				test $KBYTE_PER_SEC -gt $MAX && MAX=$KBYTE_PER_SEC
				test $MIN -gt 0 && test $KBYTE_PER_SEC -lt $MIN && MIN=$KBYTE_PER_SEC
			fi
		fi
	done

	if [ "$KBYTE_SUM" -eq 0 ] || [ "$C" -eq 0 ]; then	
		AVG=0
	else		
		AVG=$(( $KBYTE_SUM / $C ))
	fi
	
	echo "AVG=$AVG; SAMPLES=$C; MAX=$MAX; MIN=$MIN"
}

func_make_vars

if [ "$REQUEST_METHOD" = "GET" ]; then				# call from webserver
	eval $(func_http_sanitize_query_string)
	echo -e "Content-type: text/plain\n"
else								# call from shell
	IN="$1"
	echo "$IN" | grep -q "=" && eval 2>/dev/null "$IN"
fi

case "$IN" in
	n)
		OUT_OLSR="$(func_olsr_get_neighbours)" && {
			cat $OUT_OLSR
			rm $OUT_OLSR
		}
	;;
	t)
		ETX=99
		while [ "$ETX" -gt "$MAXETX" ]; do
			eval $(fkt_select_random_wifi_neighbour round)
			test "$ETX" -lt "$MAXETX" && break
		done

		logger "$0 - choosing neighbour \"$n\" with rounded ETX of \"$ETX\""
				
		    TIME_ALL="$(wget -O - http://$n/cgi-bin-tool_fff+?OPT=time)"
		UNIXTIME_NEW="$(echo "$TIME_ALL" | cut -d";" -f1)"
		UNIXTIME_OLD="$(date +%s)"
		
		if [ "$UNIXTIME_NEW" -gt "$UNIXTIME_OLD" ]; then
			logger "$0 - setting time from neighbour \"$n\""
			TIME_NEW="$(echo "$TIME_ALL" | cut -d";" -f2)"
			date -s $TIME_NEW
			logger "$0 - set time to \"$(date)\""
		else
			logger "$0 - invalid or old timestring found - no operation"
		fi
	;;
	a)
		[ -e $TEST_NEIGHBOUR_SPEED ] && cat $TEST_NEIGHBOUR_SPEED
	;;
	r)
		ETX=99
		while [ "$ETX" -gt "$MAXETX" ]; do
			eval $(fkt_select_random_wifi_neighbour round)
			test "$ETX" -lt "$MAXETX" && $0 n=$n
		done
	;;
	s=*)
		fkt_print_average "$1"
	;;
	"")
		func_print_help
	;;
	*)						# this means "cgi-bin-speed n=10.1.2.3"
		
		eval $(fkt_select_random_wifi_neighbour)	# this is for ETX
		
		echo -en "T=$UNIXTIME; DATE=$HUMNDATE; REMOTE=$n; ETX=$ETX; DURATION=$TESTTIME; " 	>>$TEST_NEIGHBOUR_SPEED
		
		fkt_iptables_rule I	# insert
		fkt_get_metric "BEFORE"									>>$TEST_NEIGHBOUR_SPEED
		fkt_leech_testdata
		fkt_get_metric "AFTER"									>>$TEST_NEIGHBOUR_SPEED
		fkt_eval_data										>>$TEST_NEIGHBOUR_SPEED
		fkt_iptables_rule D	# delete
		
		fkt_print_html_header
		fkt_print_lastline
		fkt_watch_archiv		
	;;
esac
