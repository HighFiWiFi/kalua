#!/bin/sh
. /tmp/loader

# here we guess the gateway an write some info for fast including in "/tmp/GATEWAY_CHECK_RECENT"
# DATE=2011jan24_11:15; HOSTNAME=ejbw-mesh-dhcp-99.olsr; COST_INT=1000; GATEWAY=10.10.99.33; NEXTHOP=192.168.100.22; METRIC=1

test   -e "/tmp/LOWMEM"				&& exit
test   -n "$FAILSAFE"				&& exit
test ! -e "/www/SOFTWARE_FULLY_INSTALLED"	&& exit

_olsr uptime is_short && {
	_scheduler add "$0" force
	exit
}

# first, get a list of all HNA4 0.0.0.0/0 = gateway offers
# LIST_HNA4="10.63.8.1 10.63.9.1 ..."
# output routes and compare which of these are gateways, 
# output them and sort by cost, lowest on top
# fixme! detect empty default route

LIST_GATEWAYS="$( neigh gateways )"
MINCOST=99999
OUT=

FILE_OLSR_ROUTES="/tmp/olsr_output_recent_routesonly_$$"
sed -e '/./{H;$!d;}' -e 'x;/Table: Routes/!d;' /tmp/OLSR/ALL >$FILE_OLSR_ROUTES

while read LINE; do {

	set ${LINE:-dummy}
	GATEWAY=$1		# is "$IP/32"
	NEXTHOP=$2
	METRIC=$3
	COST=$4

	for IP in $LIST_GATEWAYS; do {
		[ "$IP/32" = "$GATEWAY" ] && {

			if [ "${COST%.*}" = "0" ]; then			# 0.100 -> 100
				COST_INT="${COST#*.}"
			else						# 2.345 -> 2345
				COST_INT="${COST%.*}${COST#*.}"
			fi

			[ $COST_INT -lt $MINCOST ] && {
				MINCOST=$COST_INT
				OUT="COST_INT=$COST_INT; GATEWAY=$IP; NEXTHOP=$NEXTHOP; METRIC=$METRIC"
			}
		}
	} done	

} done <$FILE_OLSR_ROUTES && rm $FILE_OLSR_ROUTES

[ -z "$OUT" ] && {
	# gatewayip from routing table  // fixme! 'default dev tun0  scope link' -> no ip!
	GW="$( _sanitizer do "$( ip route list exact 0.0.0.0/0 )" ip4 )"

	if   fgrep -sq "$GW;" /tmp/CLIENTS_LAN /tmp/CLIENTS_WAN ; then
	
		# metric = 0 ! (is in own subnet, without a router intermediate - so we take wifiadress
		OUT="COST_INT=1; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
	elif [ -z "$GW" ]; then

		# really no gateway
		OUT="COST_INT=0; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
	else
		# provider-lan with subnet >/24 is not implemented yet (see /etc/init.d/S43...)
		OUT="COST_INT=10; GATEWAY=$WIFIADR; NEXTHOP=$WIFIADR; METRIC=0"
	fi
}

eval $OUT	# GATEWAY 

echo "$COST_INT"	>/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY
echo "$GATEWAY"		>/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY

echo "DATE=$( _system date humanreadable ); HOSTNAME=$( _net ip2dns $GATEWAY ); $OUT"		>/tmp/GATEWAY_CHECK_RECENT
cat /tmp/GATEWAY_CHECK_RECENT >>"/tmp/ARCHIV_TRACEINET"
_watch archivsize "/tmp/ARCHIV_TRACEINET" 250 lines_max

_log do guess_gateway daemon debug "$OUT"
