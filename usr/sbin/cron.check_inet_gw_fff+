#!/bin/sh
. /tmp/loader

# example output:
# GWCHECK=1; T=1246179625; DATE=28Jun2009-11uhr00; GW=10.63.3.1; HOSTNAME=KG-bittorfwireless-AP; NEXTHOP=10.63.3.1; METRIC=0; ETX=1.00; COST=1.00; COST_INT=0

test   -e "/tmp/LOWMEM"			&& exit
test   -n "$FAILSAFE"			&& exit
test ! -e "/www/SOFTWARE_FULLY_INSTALLED"	&& exit

LIST="$( neigh gateways | sed 's/ /\/32_/g' | sed 's/$/\/32/g' )"	# append a "/32_" on every IP and at the end

OUT="$( sed -e '/./{H;$!d;}' -e 'x;/Table: Routes/!d;' /tmp/olsr_output_recent | 
	 awk -v LIST=$LIST '/\./ {if($4/1<1)exit;if(index(LIST,$1)>0)print $4,$1,$2,$3}' |
	  sort -n |
	   head -n 1 |
	    sed 's/\/32//g')"						# should be this form: cost, gw-ip, nexthop-ip, metric

[ -z "$OUT" ] && {							# olsr does not respond, caused by hanging or deactivated plaintest-plugin
	GW="$( _sanitizer do "$( ip route list exact 0/0 )" ip4 )"	# gatewayip from routing table 	// fixme! 'default dev tun0  scope link' -> no ip!
	GWESCAPED="$(echo $GW  | sed 's/\./\\./g')"

	if [ -n "$(grep "$GWESCAPED" /tmp/CLIENTS_LAN)" ] || [ -n "$(grep $GWESCAPED /tmp/CLIENTS_WAN)" ]; then
		OUT="1.00 $WIFIADR $WIFIADR 0"	# metric = 0 ! (is in own subnet, without a router intermediate - ergo GW = WIFIADR!)
	else
		OUT="1.00 $WIFIADR $WIFIADR 0"	# provider-lan with subnet >/24 is implemented yet
	fi
}

ETX="$( echo $OUT | cut -d" " -f1 )"

COST="$ETX"
[ "$ETX" = "1.00" ] && COST="0"			# oldstyle 'local' inetoffer to newstyle

 COST_INT="$( echo $COST | sed 's/\.//g' )"	# cut off commata, for easy bash-calculating
       GW="$( echo $OUT | cut -d" " -f2 )"
     NEXT="$( echo $OUT | cut -d" " -f3 )"
   METRIC="$( echo $OUT | cut -d" " -f4	)"
GWESCAPED="$( echo $GW  | sed 's/\./\\./g' )"
   DOMAIN="$( nvram get wan_domain )"             # bug! this is not true in our mesh - domain is always .olsr
   DOMAIN="olsr"
 HOSTNAME="$( nslookup $GW | sed -n 's/Name: *\([0-9a-zA-Z_-]*\)\.\([0-9a-zA-Z_-]*\)/\1/p' )"
 UNIXTIME="$( _system date unixtime )"
 HUMNDATE="$( _system date humanreadable )"

test -z "$HOSTNAME" && HOSTNAME="?"

[ -z "$( ip route list exact 0/0 table main )" ] && {

	_log do get_gateway daemon alert "no default route"

	METRIC=0		# traceerror
	COST_INT=0
	GW=0
	NEXT=0
	ETX=0
	COST=0
	HOSTNAME=?

	LOCAL_GW_IP="$( _sanitizer do "$( ip route list exact 0/0 table all )" ip4 )"
	[ -n "$LOCAL_GW_IP" ] && {
		if ping -c 1 $LOCAL_GW_IP 2>/dev/null >/dev/null ; then
		
			_log do get_gateway daemon info "gateway is reachable"
		else
			_log do get_gateway daemon info "gateway not reachable"
			METRIC="-1"
		fi
	}
}

OUT="T=$UNIXTIME; DATE=$HUMNDATE; GW=$GW; HOSTNAME=$HOSTNAME; NEXTHOP=$NEXT; METRIC=$METRIC; ETX=$ETX; COST=$ETX; COST_INT=$COST_INT"

echo "$OUT" >>"/tmp/ARCHIV_TRACEINET"
echo "GWCHECK=1; $OUT"  >/tmp/GATEWAY_CHECK_RECENT		# for fast including

echo "$OUT"

_watch archivsize "/tmp/ARCHIV_TRACEINET" 250
