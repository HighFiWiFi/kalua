#!/bin/sh
. /tmp/loader

# idee: per scp + compression auf den server schieben
# idee: mehrere snapshots in einem query senden (base64 encoding?)
# idee: url kurz halten: ip statt hostname? -> "http://$IP/ffweimar/?bla=1"
# idee: variable=wert paare zeilenweise in datei schreiben und dann in einem rutsch (extra task) durch sanitizer jagen
#       /tmp/ARCHIV_MONITORING
#       /tmp/ARCHIV_MONITORING_urlencoded	// hat den vorteil, das der loader besser arbeitet
#
# idee: immer alles erzeugen, aber nur DIFF zum letzten abspeichern
# idee: a1...A3...b9....c7=  (benennen der variablen nach kategorien -> ist kuerzer, es muss nur eine zuordnungstabelle existieren)
# idee: versionsstring v1= mitsenden (weniger aerger auf dem server)

### sending "i'am alive"-messages to vpn-server in random
### intervals (approx. once a day) or/and simply log it

FUNC="monitoring"
ARG1="$1"
ARG2="$2"

test   -e "/tmp/LOWMEM"			&& ARG1=fast
test   -n "$FAILSAFE" 			&& ARG1=fast
test ! -e "/www/SOFTWARE_FULLY_INSTALLED"	&& ARG1=fast

[ "$ARG1" = "fast" ] && _log do $FUNC daemon debug "fastmode - no data_collection"

if [ "$ARG1" != "fast" ] && [ -n "$( uci get system.@profile[0].nodenumber )" ]; then	# node must be configured

	_log do $FUNC daemon debug "start"

	_sanitizer include
	_math include
	_system include
	_wifi include

	# fixme! use more abstraction

	# this parts takes
	# about 30 seconds!
	# needs more optimizing!
					# keyword 'fast' means not to collect any data, which is faster
					# tip: it is useful that neighbour-infos must be "in sync" with other nodes
					#      which means: take this neighbour-snapshot at exactly the same time
					#                   in hole network
	
	# echo -n "t1="			 >$F	// _do "t1"
	# _system date unixtime		>>$F
	# echo -n "t2="			>>$F
	# _system load 15min		>>$F

	TIME="$( _system date unixtime )"
	
# takes long!
	_log do $FUNC daemon debug "build_neighs start"
	NEIGH="$( _sanitizer do "$( neigh meshrdf )" urlvalue )"		# -335:10.63.167.97:10.63.80.97:LC:1.000:1.000:1.000:1...

# takes long!
	_log do $FUNC daemon debug "build_users start"
	USERS="$( _sanitizer do "$( _pfilter stats_user_traffic_list_today )" urlvalue )"	# -001122334455:500~112233445566:9888
	
	FORWARDED="$( _math bytes2unit "$( _pfilter stats_traffic_forwarded_internet )" mb )"
	
	UPTIME="$( _system uptime hours)"									# 1078
	CPU_LOAD="$( _system load 15min )"									# 088
	VERSION=$FFF_PLUS_VERSION										# 345678
	REBOOT="$( cat /www/REBOOT_COUNTER )"									# 15
	NODE="$( uci get system.@profile[0].nodenumber )"							# 423

	OLSRVER="$( _sanitizer do "$( _olsr version )" urlvalue )"			# pre-0.5.6-r4 2009-01-02 12:00:45 on pcnet
	# WIFIDEV="$WIFI_DEVS"		# fixme!								# eth1
														# 001122334455
	WIFIMAC="$( _sanitizer do "$( _net dev2mac $WIFIDEV )" hex )"
	
	UPDATE="$( _firmware updatemode )"									# testing
	LATLON="$( uci get system.@admin[0].latlon | sed -e 's/[^0-9\;,\.]//g' -e 's/\;/,/g' )"			# 50.1234,11.3345
		if [ "," = "$LATLON" ] || [ -z "$LATLON" ]; then
			LATLON="0,0"
		fi
		LATLON="$( _sanitizer do "$LATLON" urlvalue )"
	
	ADMINEMAIL="$( _sanitizer do "$( uci get system.@admin[0].mail )" email urlvalue )"		# bla@blubb.de

	ADMINPHONE="$( _sanitizer do "$( uci get system.@admin[0].phone )" alphanum )"			# 036435101112zuhause

	TXPWR="$(	_wifi phy_txpower	$WIFIDEV mw )"	# 40
	FRAG="$(	_wifi frag	  	$WIFIDEV )"		# 500
	RTS="$(		_wifi rts	  	$WIFIDEV )"		# 2347
	GMODEPROT="$(	_wifi protection_gmode  $WIFIDEV )"		# 0 or 1
	WIFIMODE="$(	_wifi mode	  	$WIFIDEV )"		# adhoc
	DISTANCE="$(	_wifi timing_distance	$WIFIDEV )"		# 1500
	NOISE="$(	_wifi noise	  	$WIFIDEV )"		# -94
	SIGNAL="$(	_wifi signal	  	$WIFIDEV )"		# 001122334455-70:223344556677-40
	SIGNAL="$( _sanitizer do "$SIGNAL" urlvalue )"
	
	CHANNEL="$(	_wifi channel	  	$WIFIDEV )"		# 104


	# fixme! create _watch_mcastrate()
	MRATE="$(	_wifi mcastrate		$WIFIDEV )"		# 5.5
	MRATE_CONFIG="$( uci get wireless.@wifi-iface[0].mcast_rate )"	# 5500000 or <empty> or "auto"
	_uci is_oldstyle || {
		if _sanitizer do "$MRATE_CONFIG" numeric check ; then
			MRATE_CONFIG="$(( $MRATE_CONFIG * 1000 ))"	# fixme! move into uci-wrapper?
		else
			MRATE_CONFIG="auto"
		fi
	}

	case "$MRATE" in
		auto)
			MRATE_TEMP="$MRATE"
		;;
		5.5)
			MRATE_TEMP="5500000"
		;;
		*)
			MRATE_TEMP="$(( $MRATE * 1000000 ))"
		;;
	esac
	[ "$MRATE_CONFIG" != "auto" -a "$MRATE_TEMP" != "${MRATE_CONFIG:=5500000}" ] && {
		_wifi phy_restart $WIFIDEV "$FUNC: mrate config/real differs: $MRATE_CONFIG/$MRATE"
	}


	SENS="$(	_wifi sensitivity $WIFIDEV )"		# 1,wifi,auto | 3/3
	SENS="$( _sanitizer do "$SENS" urlvalue )"
	
	DRIVER="$(	_wifi driver_version $WIFIDEV )"	# wl-adv_3.90-RC37.0_v1.1
	DRIVER="$( _sanitizer do "$DRIVER" urlvalue )" 		# wl-simple_v1.0 
								# mod-madwifi_2.4.30brcm+r3314-8

	GMODE="$( uci get wireless.radio0.hwmode )"

	ESSID="$( _sanitizer do "$( uci get wireless.@wifi-iface[0].ssid )" urlvalue )"
	BSSID="$( _sanitizer do "$( _wifi bssid $WIFIDEV )" hex )"

	eval $( /etc/init.d/S02check_interface_correctness_fff+ show_hardware )
	HW="$( echo $HW | sed -e 's/ /_/g' -e 's/[^_a-zA-Z0-9-]//g' )"			# Buffalo_WHR-HP-G54_BCM4318-wifi

	SSH_PUBKEY_FP="$( _sanitizer do "$( _ssh key_public_fingerprint_get )" hex )"	# 1660559e90efefafd04298c516365bbd12b0ffda
											# (40 bytes HEX [SHA-1])
	FREE_SPACE_FLASH="$( _system flash_free )"
	SERVICES="flash.free.kb:${FREE_SPACE_FLASH}"					# [kByte]
	
	FREE_SPACE_USB="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme! more abstraction!
	[ -n "$FREE_SPACE_USB" ] && {
		SERVICES="${SERVICES}|usbstorage.free.kb:$(( $FREE_SPACE_USB / 1024 ))"	# [kByte]	# howto determine IDE <-> USB.storage?
	}
	
#	FREE_SPACE_IDE="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme!
#	[ -n "$FREE_SPACE_IDE" ] && {
#		SERVICES="${SERVICES}|idestorage.free.kb:$(( $FREE_SPACE_IDE / 1024 ))" # [kByte]
#	}
	
	SERVICES="$( _sanitizer do "$SERVICES" urlvalue )"
	
											# fixme! add: soundcard, webcam, sambashare, sensorstuff, inetoffer, ...
	eval "$( _ipsystem do | grep ^FFF_CITY )"
	
	_net inet_seems_stable && {
		PUBIP="$( _wget do http://$( uci get system.@vpn[0].hostname )/show_remote_address.php 10 | sed 's/[^0-9\.]//g' )"		# 217.212.17.148
	}
	
	[ -n "$PUBIP" ] && {
		read 2>/dev/null PUBIP_OLD </tmp/MY_PUBLIC_IP
		echo >/tmp/MY_PUBLIC_IP "$PUBIP"

		[ "$PUBIP" != "$PUBIP_OLD" ] && {
			_log do $FUNC daemon info "public IP changed: '$PUBIP_OLD' -> '$PUBIP'"
			ARG1="send_alive_message"
		}
	}
	
	# _needs gwcheck
	#
	# GWCHECK=1; T=1243685931; DATE=30May2009-14uhr18; GW=10.63.3.1; HOSTNAME=KG-bittorfwireless-AP;
	# NEXTHOP=10.63.3.1; METRIC=0; ETX=1.00; COST=1.00; COST_INT=0
	# user better vars: 
	#
	# GWCHECK_OVERALL_COST_INT="9876"
	# GWCHECK_OVERALL_METRIC="5"
	# GWCHECK_OVERALL_GATEWAY_IP4="10.63.5.1"
	# GWCHECK_OVERALL_GATEWAY_HOST="trierer65"	// really?
	# GWCHECK_NEXTHOP_COST_INT="2876"
	# GWCHECK_NEXTHOP_IP4="10.63.3.1"
	# GWCHECK_NEXTHOP_HOST="bruckner4"		// really?
	# GWCHECK_NEXTHOP_MEDIA="remote/localwifi|lan|wan|pppoe|lan|..."
	#
	# -> GWCHECK="value:value:value:value:value:value:value"

	[ ! -e "/tmp/ARCHIV_TRACEINET" ] && cron.check_inet_gw_fff+ >/dev/null
	
	HOP2GW="$( tail -n1 /tmp/ARCHIV_TRACEINET | sed -n 's/.* METRIC=\([0-9\.]*\).*/\1/p' )"		# 5
	ETX2GW="$( tail -n1 /tmp/ARCHIV_TRACEINET | sed -n 's/.* ETX=\([0-9\.]*\).*/\1/p' )"		# 5.234
	GWNODE="$( tail -n1 /tmp/ARCHIV_TRACEINET | sed -n 's/.* NEXTHOP=\([0-9\.]*\).*/\1/p' )"	# 10.63.144.65
		GWNODE="$( _ipsystem do $GWNODE )"
	GW="$( tail -n1 /tmp/ARCHIV_TRACEINET | sed -n 's/.* GW=\([0-9\.]*\).*/\1/p' )"			# 10.63.144.65
		GW="$( _ipsystem do ${GW:-NULL} )"							# 400

	HOP2GW=${HOP2GW:=NULL}			# todo: ensure, that empty values are rewritten to 'NULL'
	ETX2GW=${ETX2GW:=NULL}
	GW=${GW:=NULL}

	HOSTNAME="$( uci get system.@system[0].hostname )"

	case "$( date +%H )" in			# only at night
		00)
			_wifi scan_summary remove
		;;
		01|02|03|04|06)
			_wifi scan $WIFIDEV
		;;
		05)
			_wifi scan $WIFIDEV intense
		;;
		07)
			WIFISCAN="$( _wifi scan_summary )"
		;;
	esac

	[ -n "$WIFISCAN" ] && WIFISCAN="$( _sanitizer do "$WIFISCAN" urlvalue )"

	# ----- fixme! start_of_ugly_packetfilter_monitoring

	PFILTER_NAT="$(			iptables -t nat    -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_FILTER="$(		iptables -t filter -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE="$(		iptables -t mangle -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE_REAL="${PFILTER_MANGLE:=0}"

	PFILTER_MANGLE_USER_REAL="$(    iptables -t mangle -nxvL traff_users | grep    traff_99:99:99:99:99:9 | sed -n '$=' )"
	PFILTER_MANGLE_USER_RESERVE="$( iptables -t mangle -nxvL traff_users | grep -v traff_99:99:99:99:99:9 | sed -n '$=' )"

	_meshrdf_count_user_real ()
	{
		local LIST="$( iptables -t mangle -nxvL | sed -n 's/^Chain traff_\(..:..:..:..:..:..\) .*/\1/p' | grep -v 99:99:99:99:99:9 )"
		local LOOP=
		local COUNT
		local MAC
		
		for MAC in $LIST; do {
			COUNT="$( iptables -t mangle -nxvL traff_$MAC | sed -n '$=' )"
			echo -n "${LOOP:+,}${COUNT:-0}"
			LOOP=1
		} done
		
		[ -z "$LOOP" ] && echo -n "0"
	}
	
	_meshrdf_count_user_reserve ()
	{
		local LIST="$( iptables -t mangle -nxvL | sed -n 's/^Chain traff_\(..:..:..:..:..:..\) .*/\1/p' | grep    99:99:99:99:99:9 )"
		local LOOP=
		local COUNT
		local MAC
		
		for MAC in $LIST; do {
			COUNT="$( iptables -t mangle -nxvL traff_$MAC | sed -n '$=' )"
			echo -n "${LOOP:+,}${COUNT:-0}"
			LOOP=1
		} done
		
		[ -z "$LOOP" ] && echo -n "0"
	}

	PFILTER="$( _meshrdf_count_user_real ):$( _meshrdf_count_user_reserve )"

	IFS=",:"
	for COUNT in $PFILTER; do {
		PFILTER_MANGLE_REAL="$(( $PFILTER_MANGLE_REAL - ${COUNT:-0} ))"
	} done
	unset IFS

	PFILTER="${PFILTER_NAT:-0}:${PFILTER_FILTER:-0}:${PFILTER_MANGLE}:${PFILTER_MANGLE_REAL}:${PFILTER_MANGLE_USER_REAL:-0}:${PFILTER_MANGLE_USER_RESERVE:-0}:${PFILTER}"
	PFILTER="$( _sanitizer do "$PFILTER" urlvalue )"

	# ----- end_of_ugly_packetfilter_monitoring, output like: 7:39:600:97:10:12:49,49,49,49,49:13,49,49,49,49,49

	# trying to print at first the values that are not likely to change its length/appearance often 
	# just to be better readable in logfile

	DATE_LOCAL_HUMAN="$( date +%d%b%Y-%Huhr%M )"

	QUERY=""
	QUERY="${QUERY}local=$DATE_LOCAL_HUMAN&mail=$ADMINEMAIL&phone=$ADMINPHONE&time=$TIME&services=$SERVICES&pubkey=$SSH_PUBKEY_FP"
	QUERY="${QUERY}&node=$NODE&city=$FFF_CITY&mac=$WIFIMAC&latlon=$LATLON&hostname=$HOSTNAME&update=$UPDATE&wifidrv=$DRIVER&olsrver=$OLSRVER"
	QUERY="${QUERY}&olsrrestartcount=$( _olsr uptime restarts_get )&olsrrestarttime=$( _olsr uptime restart_time )"
	QUERY="${QUERY}&portfw=$( _sanitizer do "$( uci get firewall.@portfw[0].portfw )" urlvalue )&optimizenlq=$( uci get wireless.@auto_optimize[0].nlq )&optimizeneigh=$( uci get wireless.@auto_optimize[0].neigh )"
	QUERY="${QUERY}&txpwr=$TXPWR&wifimode=$WIFIMODE&channel=$CHANNEL&mrate=$MRATE&hw=$HW&frag=$FRAG&rts=$RTS&pfilter=$PFILTER"
	QUERY="${QUERY}&gmodeprot=${GMODEPROT:=0}&gmode=${GMODE:=0}&profile=$( uci get system.@profile[0].name )&noise=${NOISE}&rssi=${SIGNAL}&distance=${DISTANCE}"
	QUERY="${QUERY}&version=$VERSION&reboot=$REBOOT&up=$UPTIME&load=$CPU_LOAD&forwarded=$FORWARDED&essid=${ESSID}&bssid=${BSSID}"
	QUERY="${QUERY}&gw=$GW&gwnode=$GWNODE&etx2gw=$ETX2GW&hop2gw=$HOP2GW&neigh=$NEIGH&users=$USERS&pubip=$PUBIP&sens=$SENS&wifiscan=$WIFISCAN"
	
	echo >>/tmp/ARCHIV_MONITORING "$QUERY"

	_watch archivsize "/tmp/ARCHIV_MONITORING" 150
	
	[ "$( _math random_integer 1 96 )" -eq 50 ] && ARG1="send_alive_message"	# roundabout each day (15min = 4/h * 24 = 96)
	[ -e /www/backup_archiv_node_data ] && ARG1="send_alive_message"
	[ -e /tmp/SEND_ALIVE_FAILED ] && {
		rm /tmp/SEND_ALIVE_FAILED
		ARG1="send_alive_message"
		ARG2="no_antenna_test"
	}

	_log do $FUNC daemon debug "ready"
	
	KEEP_ALIVE_URL="$( uci get system.@monitoring[0].url )/meshrdf/"

	[ "$UPTIME" -lt 2 ] && {
		ARG1="send_alive_message"
		ARG2="no_antenna_test"
	}
	
	if [ -n "$KEEP_ALIVE_URL" ] && [ "$ARG1" = "send_alive_message" ]; then
	
		[ -z "$ARG2" ] && sleep "$( _math random_integer 0 60 )"

		_log do $FUNC daemon info "sending message: '${KEEP_ALIVE_URL} [...]'"

		_ntp set

		[ -e /www/backup_archiv_node_data ] && {			# see _system reboot_safe()
		
			_log do $FUNC daemon info "found node-data backup, including"
			
			mv "/tmp/ARCHIV_MONITORING" "/tmp/ARCHIV_MONITORING.temp"	# copy backup-file
			mv /www/backup_archiv_node_data "/tmp/ARCHIV_MONITORING"	# on top of
			cat "/tmp/ARCHIV_MONITORING.temp" >>"/tmp/ARCHIV_MONITORING"	# normal node_data_file
			rm  "/tmp/ARCHIV_MONITORING.temp"				# and remove backup
		}

		# look for last comment "# alive was send..." in our archive
		# and try to send all lines from this point to end of file
		# to the logging server. After this we set the comment at file-end

		LINENUMBER_LAST_SUCCESS="$( grep -n "^#" "/tmp/ARCHIV_MONITORING" | tail -n1 | cut -d':' -f1 )"	# last comment

		while true; do {							# start one line after last comment
			LINENUMBER_LAST_SUCCESS=$(( $LINENUMBER_LAST_SUCCESS + 1 ))	# worst case is line one

		 	QUERY="$( sed "${LINENUMBER_LAST_SUCCESS}q;d" "/tmp/ARCHIV_MONITORING" )"		# must be url-encoded
 
 			if [ -n "$QUERY" ]; then
 		
 				echo "$QUERY" | grep -q ^"lo" && {		# dont send trash/comments; "lo" means local='...' or log='...'
 
 					echo "$QUERY" | grep -q ^"log=" && {
 						_log do $FUNC daemon debug "send log-message"
 						QUERY="${QUERY}&hostname=$HOSTNAME&mac=$WIFIMAC"
 					}
 
 					QUERY="$( echo "$QUERY" | sed 's/:/%3a/g' )"	# fixme! only temporary
 		
 					_log do $FUNC daemon debug "query has $(( ${#QUERY} + ${#KEEP_ALIVE_URL} + 1 )) bytes"
 			
 					OUT="$( _wget do "${KEEP_ALIVE_URL}?${QUERY}" 10 )"
 					_log do $FUNC daemon debug "send alive-line: $LINENUMBER_LAST_SUCCESS - $OUT"
 					
 					[ "$OUT" != "OK" ] && {
 						_log do $FUNC daemon info "send alive-line: something went wrong at line '$LINENUMBER_LAST_SUCCESS' - ending ('${KEEP_ALIVE_URL}?${QUERY}' -> '$OUT')"
 						touch /tmp/SEND_ALIVE_FAILED
 						break				# fixme! set comment ("marker") after last sent line
 					}
 				}
 			else
 				_log do $FUNC daemon debug "send alive normally ended"
 				echo >>"/tmp/ARCHIV_MONITORING" "# alive-message was send @ $DATE_LOCAL_HUMAN (normal exit...)"
 				break
 			fi
		} done

		# fixme! [ inet_offer ] && upload_1mb -> upstream + download_5mb -> downstream
		#
		# echo "POST /index.php HTTP/1.1"
		# echo "Host: intercity-vpn.de"
		# echo "Content-Type: application/x-www-form-urlencoded"
		# echo "Content-Length: 1048576"
		# echo
		#
		# dd if=/dev/zero bs=64k count=16 2>/dev/null
		#
		# | nc intercity-vpn.de 80 >/dev/null
		# wget -qO /dev/null "http://intercity-vpn.de/testdata.bin"	// 5mb

		[ "$ARG2" != "no_antenna_test" ] && {
			_log do $FUNC daemon info "enforce_antenna_test start"		# fixme! maybe there is a better place for	
			/usr/sbin/cron.select_best_antenna_fff+ force			# regular but random execution of this script
		}
	fi
fi
