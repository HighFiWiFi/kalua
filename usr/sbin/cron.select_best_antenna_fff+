#!/bin/sh

# Sens:
# Testing each wifi-device for correct antenna-configuration by
# switching trough possible settings and measuring received OLSR-data. (iptables)
# If no OLSR-daemon is running for specific interface, we count
# the received bytes in /proc/net/dev (e.g. in master or client-mode)
# All settings are done on-the-fly, without commiting - no wifi- or olsr-restart.

[ -e /tmp/vars ] && . /tmp/vars
. /etc/functions_wifi_fff+
. /etc/functions_nvram_fff+
. /etc/functions_logging_fff+
. /etc/functions_profile_fff+

[ -z "$WIFI_DEVS" ] && WIFI_DEVS="$( func_wifi_get_all_devs )"  # during reboot /tmp/vars isn't filled

eval $( func_wifi_get_hardware_pci )
[ "$WIFI_VENDOR" != "broadcom" ] && {
	func_log check_wifi_vendor daemon info "no broadcom but '$WIFI_VENDOR'-hardware, abort"		# fixme!
	exit
}

eval $( func_profile_remap_devs get_model )		# fixme! new field ROUTER_BEST_ANT='A|B|AUTO' ?
case "${ROUTER_NO}-${WIFI_MODEL}" in
	0-4318|8-4306)					# buffalo whr-hp-54g, dell2300
		BEST_ANT=0
	;;
	4-4318)						# asus wl500g premium
		BEST_ANT=1
	;;
esac
[ -n "$BEST_ANT" ] && {
	WIFI_DEV="$WIFI_DEVS"	# fixme!
	[ "$(func_wifi_get_antenna_rx $WIFI_DEV)$(func_wifi_get_antenna_tx $WIFI_DEV)" != "${BEST_ANT}${BEST_ANT}" ] && {
		func_log check_for_special_devices daemon info "unmodified '$ROUTER_VENDOR/$ROUTER_MODEL', using antenna A on dev '$WIFI_DEV'"
		func_wifi_set_antenna_rx $WIFI_DEV $BEST_ANT
		func_wifi_set_antenna_tx $WIFI_DEV $BEST_ANT
		func_nvset commit
		func_wifi_restart_wifi_phy $WIFI_DEV
	}
	exit
}

[ "$(func_wifi_get_mode)" != "adhoc" ] && {	# fixme! can only work, when there is traffic, e.g. in mesh-mode

	func_log check_wifi_mode daemon info "not in adhoc-mode, unreliable measuring!"
}

func_received_wifi_olsr_packets ()	# fixme! if chain is missing?
{
	iptables --line-numbers -nxvL olsr_in_wifi | sed -n 's/^1[^0-9]*\([0-9]*\)[^0-9]*[0-9]*.*/\1/p'
}

func_received_wifi_olsr_bytes ()	# fixme! if chain is missing?
{
	iptables --line-numbers -nxvL olsr_in_wifi | sed -n 's/^1[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p'
}

func_reset_received_wifi_olsr_counter ()	# fixme! - outsource to packetfilter?
{
	func_log reset_received_wifi_olsr_counter daemon info "working"
	iptables -R olsr_in_wifi 1 --set-counters 0 0 -j olsr_in_sanitizer	# wifi/wired mixed doesn't matter, error is twice the same
}

func_test_wifi_dev ()
{
	local FUNC="test_wifi_dev"
	local INTERVAL="120" ; [ "$2" = "fastcheck" ] && INTERVAL="30"	# fast check - for devices with 1 really bad antenna this should be enough
	local WIFI_DEV="$1"
	local DEV_PACKETS_INITIAL="$( func_wifi_get_tx_and_rx $WIFI_DEV | sed -n 's/^WIFI_RX_PACKETS=\([0-9]*\)/\1/p' )"
	local INFO
	local DIFF		# fixme! maybe use the "frame"-counter ("the number of packet framing errors") for indication of bad selection?

	local ANTENNA_INITIAL="$( func_wifi_get_antenna_rx "$WIFI_DEV" )"
	case $ANTENNA_INITIAL in		# this is only for logging
		0) ANTENNA_INITIAL=A ;;
		1) ANTENNA_INITIAL=B ;;
		*) ANTENNA_INITIAL="AUTO" ;;
	esac
	
	func_wifi_set_antenna_rx   $WIFI_DEV 0					# antenna A
	func_wifi_set_antenna_tx   $WIFI_DEV 0
	func_wifi_restart_wifi_phy $WIFI_DEV
	func_reset_received_wifi_olsr_counter		# fixme! maybe chain doesn't exist?
	
	func_log $FUNC daemon info "counting incoming data for $INTERVAL seconds on antenna A"
	sleep $INTERVAL
	local PACKETS_A="$( func_received_wifi_olsr_packets )"; PACKETS_A=${PACKETS_A:=0}
	local BYTES_A="$(   func_received_wifi_olsr_bytes )"; BYTES_A=${BYTES_A:=0}
	local DEV_PACKETS_A="$(  func_wifi_get_tx_and_rx $WIFI_DEV | sed -n 's/^WIFI_RX_PACKETS=\([0-9]*\)/\1/p' )"

		# fixme! count wifi_neighs?
	
	func_wifi_set_antenna_rx   $WIFI_DEV 1					# antenna B
	func_wifi_set_antenna_tx   $WIFI_DEV 1
	func_wifi_restart_wifi_phy $WIFI_DEV
	func_reset_received_wifi_olsr_counter
	
	func_log $FUNC daemon info "counting incoming data for $INTERVAL seconds on antenna B"
	sleep $INTERVAL
	
	local PACKETS_B="$( func_received_wifi_olsr_packets )"; PACKETS_B=${PACKETS_B:=0}
	local BYTES_B="$(   func_received_wifi_olsr_bytes )"; BYTES_B=${BYTES_B:=0}
	local DEV_PACKETS_B="$(  func_wifi_get_tx_and_rx $WIFI_DEV | sed -n 's/^WIFI_RX_PACKETS=\([0-9]*\)/\1/p' )"
	
	func_log $FUNC daemon info "dev_packets init/a/b: '$DEV_PACKETS_INITIAL'/'$DEV_PACKETS_A'/'$DEV_PACKETS_B'"
	
	DEV_PACKETS_B="$(( $DEV_PACKETS_B - $DEV_PACKETS_A ))"
	DEV_PACKETS_A="$(( $DEV_PACKETS_A - $DEV_PACKETS_INITIAL ))"

	DIFF1="$(( ($PACKETS_A + $PACKETS_B) / 2 ))"		# packet-diff: A+B/2 = average, B-A = diff -> (diff*100)/average
	DIFF2="$(( $PACKETS_B - $PACKETS_A ))"
	[ "$DIFF2" -lt 0 ] && DIFF2="$(( $DIFF2 * -1 ))"
	[ "$DIFF1" -eq 0 ] && DIFF1=1				# avoid possible division by zero
	DIFF1="$(( ($DIFF2 * 100) / $DIFF1 ))"

	INFO="interval: ${INTERVAL}s packet_diff: ${DIFF1}% antenna_a/b_packets/bytes/dev_packets: $PACKETS_A/$PACKETS_B|$BYTES_A/$BYTES_B|$DEV_PACKETS_A/$DEV_PACKETS_B"
	
	func_log $FUNC daemon info "$INFO"

	  if [ $PACKETS_A -gt $PACKETS_B ]; then			# compare packets, fixme! maye zero vars?
		func_log compare_packets daemon info "a > b"
	elif [ $PACKETS_B -gt $PACKETS_A ]; then
		func_log compare_packets daemon info "a < b"
	else
		func_log compare_packets daemon info "a = b"
	fi

	  if [ $BYTES_A -gt $BYTES_B ] && [ $PACKETS_A -ne $PACKETS_B ]; then			# compare bytes
	  
		func_log compare_bytes daemon alert "$INFO - bytes_a > bytes_b (initial was: $ANTENNA_INITIAL - switching to antenna A)"

		func_wifi_set_antenna_rx   $WIFI_DEV 0
		func_wifi_set_antenna_tx   $WIFI_DEV 0
		func_wifi_restart_wifi_phy $WIFI_DEV
	
	elif [ $BYTES_B -gt $BYTES_A ] && [ $PACKETS_A -ne $PACKETS_B ]; then
	
		func_log compare_bytes daemon alert "$INFO - bytes_a < bytes_b (initial was: $ANTENNA_INITIAL - leaving antenna selection on B)"
	else
		func_log compare_bytes daemon info "bytes_a = bytes_b or packets_a = packets_b, taking received dev_packets into account"
		
		  if [ $DEV_PACKETS_A -gt $DEV_PACKETS_B ]; then			# compare dev_packets
		
			func_log compare_devpackets daemon alert "$INFO - dev_packets_a > dev_packets_b (initial was: $ANTENNA_INITIAL - switching to antenna A)"
			
			func_wifi_set_antenna_rx   $WIFI_DEV 0
			func_wifi_set_antenna_tx   $WIFI_DEV 0
			func_wifi_restart_wifi_phy $WIFI_DEV
			
		elif [ $DEV_PACKETS_B -gt $DEV_PACKETS_A ]; then
		
			func_log compare_devpackets daemon alert "$INFO - a < b (initial was: $ANTENNA_INITIAL - leaving antenna selection B)"
		else
			func_log compare_devpackets daemon alert "$INFO - a = b (initial was: $ANTENNA_INITIAL - leaving antenna selection B)"
		fi
	fi
}

for WIFI_DEV in $WIFI_DEVS; do {

	func_log loop_wifi_devs daemon info "measuring '$WIFI_DEV'"

	if [ "$1" = "force" ] || [ "$1" = "fastcheck" ] || [ "$(func_wifi_get_antenna_rx $WIFI_DEV)" = "auto" ] || [ "$(func_wifi_get_antenna_rx $WIFI_DEV)" != "$(func_wifi_get_antenna_tx $WIFI_DEV)" ]; then
		
		func_test_wifi_dev $WIFI_DEV "$1"		# fixme! maybe only change settings, if
								# there is an significant procentual change?!
	else
		func_log check_wifi_devs user info "${WIFI_DEV}: antenna-selection is not auto or strange, do nothing"
	fi
	
	func_log loop_wifi_devs daemon info "measure ready"
} done

[ -z "$WIFI_DEVS" ] && func_log check_wifi_devs daemon crit "no wifi installed?"

