#!/bin/sh

# fixme! - get rid of this file - is only needed(?) by S69

# wget -O - http://127.0.0.1:2006/neighbours |
#  sed -n '/0\.00/s/^\([0-9\.]*\)[^0-9]*\([0-9\.]*\)[^0-9]*0\.00[^0-9]*\([0-9\.]*\)[^0-9]*\([0-9\.]*\)[^0-9]*\([0-9\.]*\)/LOCAL=\1;REMOTE=\2;LQ=\3;NLQ=\4;COST=\5/p' |
#   while read LINE; do {
#	eval $LINE
#	echo $REMOTE
#   } done

. /etc/variables_fff+
. /etc/functions_fff+

fkt_get_host_from_ip () {
	local OUT="$( nslookup $1 | sed -n 's/Name: *\([0-9a-zA-Z_-]*\)\.\([0-9a-zA-Z_-]*\)/\1/p' )"	
	
	test -z "$OUT" && OUT="???"
	echo -n "$OUT"
}

fkt_get_metric_from_ip () {
	OUT="$( ip route list $1 | sed -n 's/.*metric \([0-9]*\)/\1/p' )"
	
	if [ -z "$OUT" ]; then
		echo "?"
	else
		echo "$OUT"
	fi
}

func_get_wifi_mode ()
{
	local    AP="$( wl ap    | cut -d' ' -f3 )"
	local INFRA="$( wl infra | cut -d' ' -f3 )"

	  if [ "$AP" = "1" ] && [ "$INFRA" = "1" ]; then
		echo "master"
	elif [ "$AP" = "0" ] && [ "$INFRA" = "1" ]; then
		echo "client"
	else
		echo "adhoc"
	fi
}

fkt_get_latlon_from_ip () {
	IP_ESCAPED="$( echo $1 | sed 's/\./\\./g' )"
	
	sed -n "/^Node('$IP_ESCAPED'/{p;q;}" /var/run/latlon.js | cut -d, -f2-3
}

fkt_get_medium ()
{
	local IP_ESCAPED_OLSR="$( echo $1       | sed 's/\./\\./g' )"
	local IP_ESCAPED_WIFI="$( echo $WIFIADR | sed 's/\./\\./g' )"		# must be globally known!

	if [ "$IP_ESCAPED_OLSR" = "$IP_ESCAPED_WIFI" ]; then
		echo -n "wifi"
	else
		echo -n "wire"
	fi
}

fkt_get_wlstatus () {
	echo
	echo "wifi-stats:"
	wl status | grep Mode
}

fkt_definitions () {
	WIFIADR="$( sed -n 's/WIFIADR=\(.*\)/\1/p' /tmp/NETPARAM )"
}

fkt_get_inet_gw () {
	echo
	echo "internet-gateway:"
	test -r "$TRACE_INET_GATEWAY" && tail -n 1 "$TRACE_INET_GATEWAY"
}

fkt_get_netfilter_statistics () {
	echo
	echo "statistics from netfilter:"
	iptables -xvL olsr_in_whitelist | sed '/ *0 *0 olsr_in_wifi_valid/d'
}

fkt_print_table_head () {
	echo
	echo "no.  etx  node  phy  hops       remote_ip        hostname        latitude,longitude  (distance,speed...)"
}

fkt_print_olsr_stats () {
wget -O - http://127.0.0.1:2006/neighbours |
 grep "0\.00" |
 while read LOCAL REMOTE HYST LQ LOST TOTAL NLQ ETX; do
 	printf "%5.2f %5d %5s %3s %16s %15s %25s \n" $ETX $(fkt_calc_node_from_ip $REMOTE) $(fkt_get_medium $LOCAL) $(fkt_get_metric_from_ip $REMOTE) $REMOTE $(fkt_get_host_from_ip $REMOTE) $(fkt_get_latlon_from_ip $REMOTE)
 done |
  sort |
   sed = |
    sed 'N;s/\n/: /'
}

func_get_download_speed_from_ip () {
	echo "0"				# fixme! see: /www/cgi-bin-speed ->AVG
}

func_get_all_neighbours_with_etx_and_speed ()		# OUTPUT: -333:ETX:0.600:0.976:1.708:720~666:ETX:1.000:1.000:1.000:1500 (...)
{							#  means: neighbour is wired ("-") with ETX-measuring
	local LQ_NLQ=""					#         and is node 333 with LQ:NLQ:ETX:Download_speed_of_720kb/s
							#         next neighbour is wireless/wifi ("~") and is node 666 ...

	local MEASURING="ETX"				# or LC or BAT or ...

	wget -O - http://127.0.0.1:2006/neighbours |
	 grep "0\.00" |
	  while read LOCAL REMOTE HYST LQ LOST TOTAL NLQ ETX; do {		# which is fine for olsrd with ETX-metric
			  
	  	HYST="~"							# wifi
		[ "$( fkt_get_medium $LOCAL )" = "wire" ] && HYST="-"		# wire
		
		local LQ_NLQ="$LQ:$NLQ"
		
		[ -z "$NLQ" ] && {					# olsrd with linkcost-metric
									# so we have no LQ/NLQ
									# -> LQ="0.749/1.536" -> splitup
			MEASURING="LC"										
			LQ_NLQ="$( echo "$LQ" | sed -n 's/\([0-9\.]*\)\/\([0-9\.]*\)/\1:\2/p' )"
			ETX=$LOST
			[ "$ETX" = "INFINITE" ] && ETX="0"		# fixme!
	  	}
	  
	  	ETX_WITHOUT_COMMA="$( echo $ETX | sed 's/[^0-9]//g' )"
	  	
	  	[ $ETX_WITHOUT_COMMA -lt 999000 ] && [ $ETX_WITHOUT_COMMA -gt 0 ] && {		# no chars
	  		
	  		echo -en "${HYST}$( fkt_calc_node_from_ip $REMOTE ):$MEASURING:$LQ_NLQ:$ETX:$( func_get_download_speed_from_ip $REMOTE )"
	  	}
	  
	  } done
}

if [ -z "$1" ]; then
	fkt_definitions
	fkt_get_wlstatus
	fkt_get_inet_gw
	fkt_get_netfilter_statistics
	fkt_print_table_head
	fkt_print_olsr_stats
fi

if [ "$1" = "list_direct_neighbours" ]; then
	fkt_definitions
	func_get_all_neighbours_with_etx_and_speed
fi

