#!/bin/sh
. /tmp/loader

ERR=1
while getopts "S:a:A:wrlpofuOPH" FLAG; do {

	ERR=0

	case $FLAG in
		S)
			MINUTE="$( date +%M )"	# 00...59
			HOUR="$(   date +%H )"	# 00...23

			cron_minutely()
			{
				[ -e /usr/sbin/cron.minutely ] && {
					pidof cron.minutely >/dev/null || {
						/usr/sbin/cron.minutely
					}
				}
			}

			watch_hanging_command()
			{
				local option

				for option in mv scp wget nc; do {
					_watch hanging_command $option
				} done
			}

			case "$OPTARG" in
				minimal)
					cron_minutely

					case "$MINUTE" in
						00|15|30|45)
							_scheduler add software_install
							_scheduler add 15min_checks

							case "$MINUTE" in
								00)
									_scheduler add 1h_checks

									case "$HOUR" in
										04)
											_scheduler add fwupdate_check
										;;
									esac
								;;
							esac

							watch_hanging_command
						;;
					esac
				;;
				lazy)
					[ -e /tmp/.autorun ] && /tmp/.autorun

					case "$MINUTE" in
						00|15|30|45)
							:
							# _scheduler add monitoring
						;;
					esac
				;;
				newstyle)
					[ -e /tmp/.autorun ] && /tmp/.autorun		# can be helpful to make changes an many nodes
											# script must first delete himself with 'rm $0'
					_scheduler check_if_every_Nth_minute 360 && {
						_scheduler add upgrade_packages
					}

					dmesg | fgrep -q "nf_conntrack: table full, dropping packet." && {

						_log do conntrack_full daemon info "dropping packet"

						[ "$( dmesg | fgrep "nf_conntrack: table full, dropping packet." | wc -l )" -gt 10 ] && {
							_system reboot_safe "nf_conntrack: table full"
						}
					}

					pidof dnsmasq >/dev/null || _watch dns_resolution
					_watch local_proxy

					case "$MINUTE" in
						00|15|30|45)
							_scheduler add gateway_check
							_scheduler add 15min_checks
							_scheduler add monitoring
							_scheduler add user_traff_broadcast
							_scheduler add kick_user_over_limit
							[ "$( uci get system.@vds[0].enabled )" = "1" ] && _scheduler add vds
							# [ -z "$( uci get system.@weblogin[0].enabled )" ] && _scheduler add build_accounting

							case "$MINUTE" in
								00)
									_scheduler add 1h_checks
									_scheduler add refresh_dnshosts

									case "$HOUR" in
										00)
											_scheduler add 24h_checks
										;;
										03)
											_scheduler add restart_olsr
										;;
										04)
											_scheduler add fwupdate_check
											_scheduler add splash4nonautounsplashed
										;;
										06)
											_scheduler add restart_olsr
											_scheduler add user_traff_reset
											_scheduler add kick_user_all
										;;
									esac
								;;
							esac

							watch_hanging_command
						;;
					esac
				;;
				oldstyle)
					cron_minutely

					pidof rrdcollect >/dev/null && {
						_scheduler add rrdhelper
					}

					_scheduler check_if_every_Nth_minute 891 && {
						_scheduler add whitelist_update_every_15h
					}

					_scheduler check_if_every_Nth_minute 173 && {
						_scheduler add whitelist_rebuild_every_3h
					}

					_scheduler check_if_every_Nth_minute 40 && {
						_scheduler add speedtest_every_40min
					}

					_scheduler check_if_every_Nth_minute 360 && {
						_scheduler add upgrade_packages
					}

					pidof dnsmasq >/dev/null || _watch dns_resolution

					case "$MINUTE" in
						00|15|30|45)
							_scheduler add gateway_check
							_scheduler add 15min_checks
							_scheduler add monitoring
							_scheduler add optimize_txpower
							_scheduler add user_traff_broadcast
							_scheduler add kick_user_over_limit
							[ "$( uci get system.@vds[0].enabled )" = "1" ] && _scheduler add vds
							[ -z "$( uci get system.@weblogin[0].enabled )" ] && _scheduler add build_accounting

							case "$MINUTE" in
								00)
									_scheduler add 1h_checks
									_scheduler add restart_vpn

									case "$HOUR" in
										00)
											_scheduler add 24h_checks
										;;
										03)
											_scheduler add rebuild_service_announce
											_scheduler add recheck_wired_olsr
											_scheduler add restart_olsr
										;;
										04)
											_scheduler add fwupdate_check
											_scheduler add splash4nonautounsplashed
										;;
										06)
											_scheduler add build_service_announce
											_scheduler add recheck_wired_olsr
											_scheduler add restart_olsr
											_scheduler add user_traff_reset
											_scheduler add kick_user_all
										;;
									esac
								;;
							esac

							watch_hanging_command
						;;
					esac
				;;
			esac
		;;
		w)
			# some quirks for ath9k/mac80211 till

			wifidev_name_has_changed()
			{
				case "$( _wifi mode $WIFIDEV config )" in
					ap|adhoc)
						_filetype elf /usr/sbin/iwconfig && {
							[ "$( iwconfig wlan1 2>/dev/null | wc -l )" -gt 0 ] && return 1
							[ "$( iwconfig wlan2 2>/dev/null | wc -l )" -gt 0 ] && return 1
						}
					;;
				esac

				return 0
			}

			wifidev_name_has_changed || {
				_system reboot_safe "wifidev_name_has_changed"
			}

			incoming_wifi_activity()
			{
				local funcname="incoming_wifi_activity"
				local framecount_old framecount_new check_dev uptime_old uptime_new uptime_diff
				local file_framecount="/tmp/WIFI_INCOMING_FRAME_COUNTER_$WIFIDEV"
				local file_uptime="$file_framecount.uptime"
				local monitoring_vif="mon.$WIFIDEV"

				if fgrep -q "$monitoring_vif:" /proc/net/dev; then
					check_dev="$monitoring_vif"
				else
					check_dev="$WIFIDEV"
				fi

				eval "$( sed -n "s/.*${check_dev}: *[0-9]* *\([0-9]*\).*/framecount_new=\1/p" /proc/net/dev )"

				uptime_new="$( _system uptime )"
				read uptime_old 2>/dev/null <"$file_uptime"
				echo "$uptime_new" >"$file_uptime"
				uptime_diff="$(( $uptime_new - ${uptime_old:-0} ))"

				[ $uptime_diff -gt 5 ] && \
					_log do $funcname daemon info "timediff > 60 sec = $uptime_diff"

				if [ -e "$file_framecount" ]; then
					read framecount_old <"$file_framecount"
				else
					framecount_old="-1"			# ensures, that first start is without errors
				fi

				echo "$framecount_new" >"$file_framecount"

				if [ "$framecount_old" = "$framecount_new" ]; then
					_log do $funcname daemon alert "[ERR] framecounter for $check_dev old/new: $framecount_old = $framecount_new timediff: $uptime_diff sec"
					echo "0" >"$file_framecount"
					return 1
				else
					_log do $funcname daemon info "[OK] framecounter for dev $check_dev: diff / old / new: $(( $framecount_new - $framecount_old )) / $framecount_old < $framecount_new timediff: $uptime_diff sec"
					return 0
				fi
			}

			kernel_oops_wifi()		# we have seen routers, which have incoming AND outgoing wifi_activity() but wifi is dead
			{
				local funcname="kernel_oops_wifi"
				local hash lasthash line
				local hashfile="/tmp/last_kernel_oops_wifi"

				local match1="WARNING: at "
				local match2="drivers/net/wireless"

				line="$( dmesg | fgrep "$match1" | tail -n1 | fgrep "$match2" )" && {

					hash="$( echo "$line" | md5sum | cut -d' ' -f1 )"

					[ -e "$hashfile" ] && {
						read lasthash <"$hashfile"
					}

					if [ "$hash" = "$lasthash" ]; then
						_log do $funcname daemon debug "detected old oops: $hash"
					else
						echo "$hash" >"$hashfile"
						_log do $funcname daemon alert "detected new oops: $line"
						return 0
					fi
				}

#				local match3="ath: Timeout while waiting for nf to load: AR_PHY_AGC_CONTROL=0x"
#
#				line="$( dmesg | fgrep "$match3" | tail -n1 )" && {
#
#					hash="$( echo "$line" | md5sum | cut -d' ' -f1 )"
#
#					[ -e "$hashfile" ] && {
#						read lasthash <"$hashfile"
#					}
#				}

				return 1
			}

			# we check:
			# wlan0 in adhoc-mode or
			# mon.wlan0 in ap-mode
			# on newstyle-devices

			incoming_wifi_activity || {
				case "$( _wifi mode $WIFIDEV )" in
					*adhoc*)
						_wifi phy_restart $WIFIDEV "no incoming_wifi_activity, scheduling reboot"
						sleep 15
						_system reboot_safe "no incoming_wifi_activity, counter: $( cat /tmp/WIFI_INCOMING_FRAME_COUNTER_$WIFIDEV )"
					;;
					*)
						_wifi phy_restart $WIFIDEV "no incoming_wifi_activity"
					;;
				esac
			}

			kernel_oops_wifi && {
				_wifi phy_restart $WIFIDEV "kernel_oops_wifi"
			}
		;;
		a)
			_scheduler add "$OPTARG"
		;;
		r)
			[ -e /tmp/SEND_ALIVE_FAILED ] && {				# fixme! this is a hack
				_scheduler queue_list | grep -q 15min_checks || {
					_scheduler add 15min_checks move2top
				}
			}

			_scheduler run
		;;
		l)
			_scheduler queue_list
		;;
		A)									# fixme! doubled entrys with -A ?
			_log do user_defined_now daemon debug "start '$OPTARG'"
			COMMAND="$( _scheduler task2command "$OPTARG" )"
			_log do user_defined_now daemon debug "start '$OPTARG' ('$COMMAND')"
			/bin/sh -c "${COMMAND:-true}"
			_log do user_defined_now daemon debug "ready '$OPTARG' ('$COMMAND')"
		;;
		P)
			case "$( uci get network.@gatewaycheck[0].mode )" in
				ping|1)
					SERVER_IP="8.8.8.8"
					LOSS="$( ping -q -c 1 $SERVER_IP | sed -n 's/^.* received, \([0-9]*\)%.*/\1/p' )"
					[ "${LOSS:-222}" -gt 0 ] && _log pingtest daemon info "[ERR] packetloss is ${LOSS}% to IP $SERVER_IP"
				;;
			esac
		;;
		p)
			_scheduler queue_purge
		;;
		O)
			_olsr build_tables

			_olsr restarts_are_suspicious_often && {
				_system reboot_safe "[ERR] olsr restarts > normality"
			}
		;;
		H)
			[ -e /usr/sbin/uhttpd ] && \
				echo -n "$WIFIADR #" >/tmp/WELCOME_HELPER
		;;
		o)
			grep -q ^"printdev()" /usr/bin/netparam || {	# fixme! better concept needed, wrong place (but efficient)!
				INCOMING_OLSR_PACKETS_WIRED="$( iptables --line-numbers -nxvL olsr_in_wire 2>/dev/null | sed -n 's/^4[^0-9]*\([0-9]*\)[^0-9]*[0-9]*.*/\1/p' )"
				[ ${INCOMING_OLSR_PACKETS_WIRED:=0} -gt 0 ] && {
					_log do detect_wired_olsr_traffic daemon info "restart olsr-daemon with wired interfaces"
					/etc/init.d/S41build_static_netparam restore_original_netparam
					_olsr daemon restart "detected wired neigh"
				}
			}
		;;
		f)
			IFS='. '; read NOP NOP FIVEMINLOAD DECIMALS NOP </proc/loadavg; unset IFS 
			if   [ $FIVEMINLOAD -gt 1 ]; then
				_log do overload_detection daemon info "detected high 5min-load: $FIVEMINLOAD.$DECIMALS"
				_watch topusage_task
			elif [ $FIVEMINLOAD -eq 1 ]; then
				_watch counter /tmp/counter_highload set 0
				_log do overload_detection daemon info "detected high 5min-load: $FIVEMINLOAD.$DECIMALS"
				_watch topusage_task
			else
				_watch counter /tmp/counter_highload set 0
			fi
		;;
		u)
			grep -q "kernel: Oops" /var/log/messages && {	# fixme! dirty, but the only chance?
				grep -q "kernel: Process wifi (" /var/log/messages || {
					logger -s "$0: detected kernel-oops, rebooting after safing reason"		# without using _log()
					grep "kern.warn kernel: " /var/log/messages >>/www/everlasting_syslog.txt
					reboot
				}
				_log do detect_kernel_oops daemon alert "only a wifi-oops, ignoring"
			}
		;;
		*)
			ERR=1
		;;
	esac
} done

[ "$ERR" = "1" ] && _scheduler print_usage && exit 1
