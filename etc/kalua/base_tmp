func_escape ()		# SENS: work with string and always use single quotes: 'string'
{
	echo "$1" | sed -e "s/'/'\\\''/g"
}

func_count_pids ()			# fixme! returns "1", even when no process was found
{
	local PROCESS_NAME="$1"					# e.g. 'wifi' or 'xrelayd'
								#      pidof wifi: '5736 5779 6314 6317 6499'
	pidof "$PROCESS_NAME" | sed 's/[^ ]//g' | wc -c		# strip all, except spaces and count those spaces
}

func_get_random_value ()	# OUT1: integer, higher or equal => $START and lower or equal <= $END
{
	local START="$1"
	local END="$2"

	[ -z "$START" ] && echo -n 0 && return

	local DIFF=$(( $END + 1 - $START ))
	local SEED="$( dd if=/dev/urandom bs=2 count=1 2>&- | hexdump | if read line;then echo 0x${line#* };fi )" # 0x6f2d
	local RANDOM="$(( $SEED % $DIFF ))"	# min=0 ... max=$DIFF
	
	echo -n $(( $START + $RANDOM ))
}

func_humanreadable_date ()
{
	case $1 in
		short)
			func_lowercase $(date +%Y%b%d)		# 2008oct12
		;;
		*)
			func_lowercase $(date +%Y%b%d_%H:%M)	# 2008oct12_20:25
		;;
	esac
}

func_humanreadable_integer ()		# 1500000000 -> 1.500.000.000
{
	echo "$1" | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta'
}

func_file_lines ()
{
	sed -n '$=' "$1"
}

func_ip2dns ()
{
	nslookup $1 | sed -n 's/^Name:[^a-zA-Z0-9]*\(.*\)/\1/p'
}
