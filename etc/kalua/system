_system_globbing ()
{
	local STATE="$1"	# list conditions: 'set +o'
	
	case "$STATE" in
		off)
			set -f
		;;
		*)
			set +f
		;;
	esac
}

_system_reboot_safe ()			# fixme! maybe shutting down services like vpn, olsrd?
{					# fixme! safe vds-data? rrd-data?
	local FUNC="system_reboot_safe"
	local REASON="$1"
	local LOCKFILE="/tmp/SAFE_REBOOT_SCHEDULED"

	[ -e /dev/misc/crondog ] && {
		pidof crond >/dev/null && killall crond		# if something goes wrong, this enforces an reboot in 10 minutes by crondog
	}

	[ -e  "$LOCKFILE" ] && return
	touch "$LOCKFILE"

	cron.monitoring send_alive_message no_antenna_test	# maybe the last feedback can be helpful

	_log do $FUNC daemon alert "scheduling reboot - reason: '$REASON'"

	tail -n1 /tmp/ARCHIV_MONITORING | grep -q ^# || {			# found comment at fileend

		_log do $FUNC daemon info "send_alive_message was unsuccessful, backing up '/tmp/ARCHIV_MONITORING'"		

		local LINENUMBER_LAST_SUCCESS="$( grep -n "^#" /tmp/ARCHIV_MONITORING | tail -n1 | cut -d':' -f1 )"
		sed -n "$(( $LINENUMBER_LAST_SUCCESS + 1 )),\$p" /tmp/ARCHIV_MONITORING >/www/backup_archiv_node_data
	}

	if [ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then			# fixme! check free flash space?
	
		_log do $FUNC daemon info "safing syslog to '/www/SYSLOG_SAFED'"
		grep -v "kern.err olsrd" /var/log/messages >/www/SYSLOG_SAFED		# we don't need the "add route/del route" errors
	else
		_log do $FUNC daemon info "safing last 100 lines of syslog to '/www/SYSLOG_SAFED'"
		grep -v "kern.err olsrd" /var/log/messages | tail -n 100 >/www/SYSLOG_SAFED
	fi	

	_log do $FUNC daemon info "flash free: '$( _system flash_free )', rebooting in 10 sec"

	sync			# not needed? flush_cache() is also called during reboot()
	sleep 10		# fixme! maybe we should wait till crondog works or enforce crondog-timeout

	if [ -e /rom/sbin/reboot ]; then
		/rom/sbin/reboot
	else
		reboot
	fi

	sleep 20		# just to be sure, that no further commands are executed
}

_system_load ()			# load without comma, e.g.
{				# 1.00 = 100 or 12.89 = 1289
	case $1 in
		1min)
			sed -ne 's/^\([0-9]*\)\.\([0-9]*\) .*$/\1\2/' -e 's/^[0]*//p' /proc/loadavg
		;;
		15min)
			sed 's/^[0-9]*\.[0-9]* [0-9]*\.[0-9]* \([0-9]*\)\.\([0-9]*\).*/\1\2/' /proc/loadavg
		;;
		*)
			echo 0
		;;
	esac
}

_system_flash_free ()	# [kByte]		# fixme! abtraction to PARTITION="$1", fallback to internal flash
{
	local PARTITION="/dev/mtdblock/4"
	
	df | sed -n "s#^${PARTITION}[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*#\1#p"
}

_system_flash_size ()	# [kByte]
{
	local FILE="/tmp/FLASHSIZE"
	
	[ ! -e $FILE ] && {
		echo >$FILE $(( $(cat /dev/mtdblock/0 /dev/mtdblock/1 /dev/mtdblock/3 | wc -c) / 1024 ))      # CFE+LINUX+NVRAM
		[ "$( cat $FILE )" -lt 4096 ] && touch /tmp/LOWFLASH
	}
	
	cat $FILE
}

_system_memory_free ()		# in bytes
{
	sed -n '/^Mem:/s/^Mem:[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p' /proc/meminfo
}

_system_get_storage_path ()
{
	# usb-stick attached:
	# /dev/scsi/host0/bus0/target0/lun0/part1 15607264   3435664  11378796  23% /mnt/disc0_1
	
	local OUT="$( df | grep ^/dev/scsi/ | head -n1 | cut -d'%' -f2 )"

	echo ${OUT:-/www/cgi-bin}	# fallback is password-protected space
}

_system_domain_get ()
{
	nvram get wan_domain
}

_system_hostname ()
{
	# sysctl kernel.hostname
	local HOSTNAME="$( nvram get wan_hostname )"	# fixme! use 'uname -n'?

	_sanitizer do "${HOSTNAME:=unsethostname}" hostname
}

_system_uptime ()		# OUT1 = string
{				# ARG1 = string: plain|min|hour|sec
	local FORMAT="$1"
	local UPTIME FLOAT NOP
	
	IFS='. '
	read UPTIME FLOAT NOP </proc/uptime		# reads integer = seconds
	unset IFS
	
	case $FORMAT in
		sec)
			:
		;;
		min)
			UPTIME=$(( $UPTIME / 60 ))
		;;
		h|hour|hours)
			UPTIME=$(( $UPTIME / 3600 ))
		;;
		plain)
			UPTIME="$UPTIME.$FLOAT"
		;;
	esac
	
	echo -n "$UPTIME"
}

_system_date ()
{
	case $1 in
		humanreadable)
			case $2 in
				short)
					_sanitizer do "$( date +%Y%b%d )" lowercase		# 2008oct12
				;;
				nice)
					date "+%d.%b'%y-%H:%M"					# 06.May'08-18:10
				;;
				*)
					_sanitizer do "$( date +%Y%b%d_%H:%M )" lowercase	# 2008oct12_20:25
				;;
			esac
		;;
		full)
			date						# Mon Sep 28 09:08:04 CEST 2009
		;;
		unixtime)
			date +%s					# 1254121912
		;;
		mail)							# Wed, 7 May 2008 16:04:59 +0200
			
			echo "$( date +%a ), $( date +%e | sed 's/ //' ) $( date "+%b %Y %X %z" | sed 's/-0/+0/' )"
		;;
		*)
			date "+%b %d %H:%M:%S"				# Sep 28 09:01:54
		;;
	esac
}

_system_pids_count ()			# fixme! returns "1", even when no process was found
{
	local PROCESS_NAME="$1"					# e.g. 'wifi' or 'xrelayd'
								#      pidof wifi: '5736 5779 6314 6317 6499'
	pidof "$PROCESS_NAME" | sed 's/[^ ]//g' | wc -c		# strip all, except spaces and count those spaces
}

_system_ram_free ()	# [bytes]
{
	sed -n 's/Mem:[\ ]*[0-9]*[\ ]*[0-9]*[\ ]*\([0-9]*\).*/\1/p' /proc/meminfo
}

_system_ram_size ()	# [kBytes]
{
	local FUNC="ram_size"
	local FILE="/tmp/RAMSIZE"
	local BORDER="14416"		# this reports /proc/meminfo with 16 mb
	local KEY MEM NOP

	[ ! -e $FILE ] && {
		while read KEY MEM NOP NOP NOP NOP; do {
			[ "$KEY" = "MemTotal:" ] && {
				echo -n "$MEM" >$FILE
			}
		} done </proc/meminfo
		
		MEM="$( cat $FILE )"

		[ "$MEM" -lt "$BORDER" ] && {
			_log do $FUNC daemon info "$MEM kb - detected lowmem device, with lower than $BORDER kb"
			touch /tmp/LOWMEM
		}
	}
			
	cat $FILE
}

_system_flash_mounted_readonly ()	# SENS: check if data-partition is mounted read-only (failsafe or firmware-update-mode)
{
	local FUNC="flash_mounted_readonly"
	local LINE

	mount | while read LINE; do {
	
		set $LINE
	
		[ "${5}${6}" = "mini_fo(ro)" ] && {
			_log do $FUNC daemon info "data-partition mounted read-only"
			return 0
		}
	} done
	
	return 1
}

_system_insmod ()
{
	local KMOD="$1"
	local OPTIONS="$2"

	lsmod | grep -q ^$KMOD && return	# already loaded
	
	_log do $FUNC daemon info "loading kernel-module '$KMOD' with options '$OPTIONS'"
	
	local MEM_BEFORE="$( _system ram_free )"
	local MEM_AFTER=0
	local MEM_DIFF=0
	local FUNC="system_insmod"
		
	if insmod "$KMOD" "$OPTIONS" ; then

		case "$KMOD" in
			crondog)
				[ -e /dev/misc/crondog ] && {
					echo > /dev/misc/crondog	# activate it
				}
			;;
		esac

		MEM_AFTER="$( _system ram_free )"
		MEM_DIFF=$(( $MEM_BEFORE - $MEM_AFTER ))
		[ $MEM_DIFF -gt 0 ] && MEM_DIFF="+$MEM_DIFF"

		_log do $FUNC daemon debug "[OK] memoryusage: ${MEM_DIFF} bytes (lsmod: '$( lsmod | grep ^$KMOD )')"
	else
		_log do $FUNC daemon alert "[ERR] failing to insert kernel-module '${KMOD}.o'"
		
		local FILE="$( find /lib/modules/ | grep ${KMOD}.o )"
		
		if [ -n "$FILE" ]; then
			_log do $FUNC daemon info "but found '$FILE'"
		else
			_log do $FUNC daemon info "seems that ${KMOD}.o is not in filesystem"
		fi
		
		return 1
	fi
}
