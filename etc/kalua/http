FUNC_HTTP=1

# func_http_sanitize_query_string
# func_http_header_mime_output
# func_http_redirect


func_http_sanitize_query_string ()		# fixme! detect IFS-change
{
	[ "$REQUEST_METHOD" = "POST" ] && {		# fixme! allow also ':' (and '&') for dividing vars
		read POST
		[ -n "$POST" ] && QUERY_STRING="${QUERY_STRING:=TZ=}&${POST}"		# if method GET is unset, then writeout TZ=
	}
	
	# 1) now we have joined POST+GET in one string 
	# 2) special characters like %20 (space) must be decoded (httpd -d)
	# 3) hide all single-quotes (') by escaping them from shell
	# 4) delete all '&'/'$'-signs and append a single-quote + pipe to /dev/null + newline
	# 5) now we have a de-serialized query-string and each line looks like
	#    VARNAME=VALUE' >/dev/null 2>/dev/null;
	# 6) replace the first equal-sign with =' , now we have in each line
	#    VARNAME='VALUE' >/dev/null 2>/dev/null;
	# 7) varname must only consist of [a-zA-Z0-9_-], all other things are deleted

	/usr/sbin/httpd -d "$QUERY_STRING" |
	 sed  -e "s/'/'\\\''/g" \
	      -e "s/&/' >\/dev\/null 2>\/dev\/null;\n/g" \
	      -e "s/$/' >\/dev\/null 2>\/dev\/null;\n/" |
	  sed -n "s/^\([a-zA-Z0-9_-]*\)=\(.*\)/\1='\2/p"	# fixme! values cant have ? or & inside,
	  							# because we first decode and then split

	# here we do the same for our ENV-variables, so user can't overwrite/inject special vars
	# hole output of this function can be used like:
	#
	# eval $(func_http_sanitize_query_string)

	/usr/bin/env |
	 sed -e "s/'/'\\\''/g" \
	     -e "s/=/='/" \
	     -e "s/$/' >\/dev\/null 2>\/dev\/null; /"

	[ "$REMOTE_ADDR" = "127.0.0.1" ] && {		# xrelayd.c:445 Connected ssl client 10.63.3.24 to plain server localhost:80
		REMOTE_ADDR="$( tail -n15 /var/log/messages |
				 grep "to plain server" |
				  tail -n1 |
				   sed -n 's/^.* ssl client \(.*\) to .*/\1/p' )"	# local xrelays-connection
		
		[ -z "$REMOTE_ADDR" ] && REMOTE_ADDR="$( nvram get wifi_ipaddr )"	# fixme! detect real localloop-connections?

		echo "REMOTE_ADDR='$REMOTE_ADDR';"
		echo "SERVER_PORT='443';"
	}
}

func_http_header_mime_output ()
{
	echo -en "Content-type: $1\n\n"		# ARG1 = e.g. text/html
}

func_http_redirect ()
{
	local FUNC="http_redirect"
	local ERRORCODE="$1"
	local DESTINATION="$2"
	local REASON
	local PROTO="http"

	case $DESTINATION in
		ip_*)
			case $DESTINATION in
				ip_incoming_interface)
					DESTINATION="$( ip route get $REMOTE_ADDR | sed -n 's/^.*src \([0-9\.]*\).*/\1/p;q' )"
				;;
				ip_wifi)
					DESTINATION="$( nvram get wifi_ipaddr )"
				;;
				ip_lan)
					DESTINATION="$( nvram get lan_ipaddr )"
				;;
				ip_wan)
					DESTINATION="$( nvram get wan_ipaddr )"
				;;
			esac
			
			[ "$SERVER_PORT" = "443" ] && PROTO="https"
			
			DESTINATION="${PROTO}://$DESTINATION/cgi-bin-welcome?REDIRECTED=1"
		;;
		landing_page)
			DESTINATION="$( cat /www/images/landing_page.txt 2>/dev/null || echo 'http://google.de' )"
		;;
	esac

	case $ERRORCODE in
		302)
			REASON="Temporary Redirect"
		;;
	esac

	_log do $FUNC daemon info "code/reason/destination: '$ERRORCODE'/'$REASON'/'$DESTINATION'"

	cat <<EOF
HTTP/1.1 $ERRORCODE $REASON
Connection: close
Cache-Control: no-cache
Content-Type: text/html
Location: $DESTINATION

<HTML><HEAD>
<TITLE>$ERRORCODE $REASON</TITLE>
<META HTTP-EQUIV="cache-control" CONTENT="no-cache">
<META HTTP-EQUIV="refresh" CONTENT="0; URL=$DESTINATION">
</HEAD><BODY>
<H1>$ERRORCODE - $REASON</H1>
<P>click <A HREF="$DESTINATION">here</A> if you are not redirected automatically.</P>
</BODY></HTML>
EOF
}
