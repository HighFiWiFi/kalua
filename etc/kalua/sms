_sms_send ()			# SENS: wrapper for SMS-sending independent from service
{				#	- collect all relevant data
				#	- write and process queue-file line by line
				#	- call service-specific function
				#	- when something fails, use another service
				#	this should be executed by cron every minute (to process queue-file)
				
	local   FUNC="sms_send"
	local   DEST="$1"					# ARG1: string (name or number)
	local   TEXT="$2"					# ARG2: string (text to send, codepage ISO_8859-1)
	local NOPOST="$3"					# ARG3: string (optional, keyword: nopost)
	
	local   USER="${4:-$( uci get sms.@sms[0].username )}"	#	string 		// fixme! same username/pass for every provider?
	local   PASS="${5:-$( uci get sms.@sms[0].password )}"	#	string

	local   POST="${6:-$( uci get sms.@sms[0].post )}"	#       string (something like: "from klaus [03643/110]" )
	local NUMBER
	
	[ -z "$USER" ] && {
		_log do $FUNC user crit "username not given - aborting"
		return 1
	}
	
	[ -z "$PASS" ] && {
		_log do $FUNC user crit "password not given - aborting"
		return 1
	}
	
	[ -z "$TEXT" ] && {
		_log do $FUNC user crit "text not given - aborting"
		return 1
	}
	
	[ -n "$NOPOST" ] && POST=""
	
	NUMBER="$( _phone book_name2number "$DEST" )" || {
		_log do $FUNC user notice "wrong name/number - aborting"
		return 1
	}
	
	[ -n "$POST" ] && TEXT="$TEXT $POST @$( date +%H:%M)uhr"		# append own brand + time

	_log do $FUNC user debug "to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"
		
	_sms send_sms77 $USER $PASS $NUMBER $( _sanitizer do "$TEXT" urlvalue ) || {
		
		_log do $FUNC user info "send failed - respawning sms to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"
		_scheduler add ". /tmp/loader; _sms; _sms send '$NUMBER' '$TEXT' no_post" move2top		# fixme! this does not work, if args are given directly (e.g. pass)
		return 1
	}
	
	_log do $FUNC user info "[OK] to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"
}

_sms_send_sms77 ()
{
	local   FUNC="sms_send_sms77"
	local   USER="$1"
	local   PASS="$2"
	local NUMBER="$3"
	local   TEXT="$4"		# already URL encoded
	local  TRASH
	local   TYPE="quality"		# basicplus|standard|quality|festnetz|flash - hardcoded, needs abstraction

	case $TYPE in
		quality)
			[ "${#TEXT}" -gt 160 ] && {
				TRASH="$( echo $TEXT | cut -b161-999 )"
				TEXT="$(  echo $TEXT | cut -b1-160 )"		# fixme! respect encoding borders, e.g. %20 -> %2 does not work
				_log do $FUNC daemon debug "shortened text, trash was: '$TRASH'"
			}
		;;
	esac

	local    URL="http://www.sms77.de/gateway/?type=$TYPE"
	local OUT RC o

	_log do $FUNC daemon debug "[${#TEXT} chars] ${URL}&u=${USER}&p=${PASS}&to=${NUMBER}&text=${TEXT}"
	
	OUT="$( _wget do "${URL}&u=${USER}&p=${PASS}&to=${NUMBER}&text=${TEXT}" 10 "$USER" "$PASS" )"
	RC="$?"

	if [ $RC -ne 0 ] || [ "$OUT" != "100" ]; then
									# not implemented:
		case "$OUT" in						# 100 = "SMS was send"
		        201) o="wrong country code" ;;			# 101 = "Sending failed at least to one recipient"
		        202) o="wrong recipient number" ;;		# 306 = "Sending ID/Nummer is wrong"
		    300|900) o="username/pass wrong or unset" ;;
			301) o="recipient unset" ;;
			304) o="type unset" ;;
			305) o="text unset" ;;
			307) o="url unset" ;;
			400) o="type invalid" ;;
			401) o="text too long" ;;
			402) o="reload mistake, try again" ;;
			902) o="API deactivated!" ;;
			903) o="serverip wrong" ;;
			500) o="no credits available" ;;
			
			  *)
				_log do $FUNC user crit "wget-returncode: '$RC' - sms77-answer: '$OUT' - something went wrong"
				return 1	# which means - try to send again
			 ;;
		esac

		_log do $FUNC user info "wget-returncode: '$RC' - sms77-answer: '$OUT' ($o)"
	fi
}
