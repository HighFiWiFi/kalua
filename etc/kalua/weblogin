_weblogin_htmlout_loginpage ()				# needs: images/logo.gif|logo2.gif              + images/flag_de|en|fr.gif
{							#        images/button_login_de.gif		+ images/bgcolor.txt
	_http header_mimetype_output "text/html"	#        /favicon.ico
	_translate include

	local LANG="$( _translate lang $1 )"
	local LANG_DIRECTION="ltr"			# fixme! left2right or right2left?
	local CODEPAGE="ISO-8859-15"			# fixme! lang <-> charset/codepage?
	local SHOW_RULES="$2"				# fixme! can be 'inet_broken'
	local SHOW_PASSWORD_WRONG="$3"
	local SHOW_ACCEPT_RULES="$4"
	local BGCOLOR LINK SLOGAN MYLANG MYLANGLIST NEXT_LANG_SUBSET_START
	local AMP="&amp;"
	local TABINDEX="6"	# is hardcoded on most points
	local SEP=":"		# was "&middot;" but lynx cannot display this 8-) and the ' looks wierd, maybe use "|"?
	local LOCATION_NAME="$( _weblogin metadata_locationname )"
	local LOGO_DESCRIPTION="$( _translate do "$LANG" site_logo ) ('$LOCATION_NAME')"	# fixme! we need an better meta-description, e.g. Schriftzug | Bett auf Wolken ...
	
	case "$LANG" in
		 da|ru|ja) NEXT_LANG_SUBSET_START="de" ; MYLANGLIST="da ru ja" ;;	# fixme! abstraction needed?
			*) NEXT_LANG_SUBSET_START="da" ; MYLANGLIST="de en fr" ;;	# fixme! distinguish forward/backward
	esac

	local LANG_CACHE_FILE="/tmp/weblogin_langcache_${LANG_DIRECTION}_${MYLANGLIST}"

	[ -n "$FORM_RULES" ] && SHOW_ACCEPT_RULES="false"
	[ "$FORM_SHOW_ACCEPT_RULES"   = "true" ] && SHOW_ACCEPT_RULES="true"
	[ "$FORM_SHOW_PASSWORD_WRONG" = "true" ] && SHOW_PASSWORD_WRONG="true"

	LINK="${SCRIPT_NAME}?REDIRECTED=1"
	[ "$SHOW_PASSWORD_WRONG" = "true" ] && LINK="${LINK}${AMP}FORM_SHOW_PASSWORD_WRONG=true"
	[ "$SHOW_ACCEPT_RULES"   = "true" ] && LINK="${LINK}${AMP}FORM_SHOW_ACCEPT_RULES=true"
	LINK="${LINK}${AMP}FORM_LANG"

	read BGCOLOR 2>/dev/null </www/images/bgcolor.txt		# fixme! defaulting to #F2F2F2 ?
									# fixme! _weblogin metadata slogan()
	SLOGAN="$( test -e /www/images/logo2.gif && echo -n '<IMG SRC="images/logo2.gif" TITLE="Hotel-Slogan" ALT="Hotel-Slogan"><BR><BR>' )"

	cat <<EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="$LANG" dir="$LANG_DIRECTION"><HEAD>
<TITLE>Weblogin $SEP Captive portal $SEP Splash screen $SEP $LOCATION_NAME</TITLE>
<META HTTP-EQUIV="cache-control" CONTENT="no-cache">
<META HTTP-EQUIV="pragma" CONTENT="no-cache"> 
<META HTTP-EQUIV="expires" CONTENT="0">
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=${CODEPAGE}">
<LINK REL="shortcut icon" TYPE="image/x-icon" HREF="/favicon.ico">
</HEAD>
<BODY BGCOLOR="${BGCOLOR:=#ffffff}" TEXT="#000000"><CENTER>
EOF

	cat "$LANG_CACHE_FILE" 2>/dev/null || {

		for MYLANG in $MYLANGLIST; do {
		
			echo -n "<A TABINDEX='$TABINDEX' HREF='$LINK=$MYLANG' HREFLANG='$MYLANG' CHARSET='$CODEPAGE' TITLE='"
			_translate do "$MYLANG" in_my_lang							# idea: build it with tables 8-)
			echo -n "'><IMG SRC='images/flag_${MYLANG}.gif' BORDER='0' ALT='${MYLANG}' TITLE='"	# each flag is a 16x12/GIF
			_translate do "$MYLANG" in_my_lang
			echo -n "'>&nbsp;"
			_translate do "$MYLANG" langname
			echo -n "</A>&nbsp;&nbsp;"
			TABINDEX="$(( $TABINDEX + 1 ))"
			
		} done >"$LANG_CACHE_FILE"
		cat "$LANG_CACHE_FILE"
	}				# fixme! each image has to have an 'filename.gif_dimensions' with 'X Y' pixels, to better follow standards
					# image: fits best with 220px, transparency, GIF
					# fixme! lynx cannot display next symbol, use image+alt instead!
					# fixme! maybe group username/pass with <fieldset> + <legend>?
					# fixme! font zusaetzlich mit CSS festlegen <span style="font-family:'Times New Roman',Times,serif">
	cat <<EOF
<A TABINDEX='10' HREF='$LINK=$NEXT_LANG_SUBSET_START' HREFLANG='$NEXT_LANG_SUBSET_START' CHARSET='$CODEPAGE' TITLE='$( _translate do "$LANG" other_languages )'><big><b>&raquo;</b></big></a>
<BR><BR>${SLOGAN}<IMG SRC="images/logo.gif" TITLE="$LOGO_DESCRIPTION" ALT="$LOGO_DESCRIPTION"><FORM METHOD="post" ACTION="">
<TABLE CELLSPACING="0" CELLPADDING="0" BORDER="0" width='85%'>
<TR><TD ALIGN="CENTER"><BR><B><BIG>$( _translate do "$LANG" internetaccess )</BIG></B></TD></TR>
EOF
	[ "$FORM_SHOW_RULES"	 = "true"	 ] && _weblogin htmlout_rules			$LANG
	[ "$SHOW_PASSWORD_WRONG" = "true"	 ] && _weblogin htmlout_message_wrong_logindata	$LANG
	[ "$SHOW_ACCEPT_RULES"	 = "true"	 ] && _weblogin htmlout_rules_hint		$LANG
	[ "$SHOW_RULES"		 = "inet_broken" ] && _weblogin htmlout_inet_broken		$LANG

	cat <<EOF
<TR><TD ALIGN="CENTER"><BR><TABLE CELLSPACING="0" CELLPADDING="2" BORDER="0">
<TR><TD ALIGN="RIGHT"><label for='username'>$( _translate do "$LANG" username ):&nbsp;</label><INPUT TABINDEX="1" ID="username" TYPE="text" SIZE="10" MAXLENGTH="30" NAME="FORM_USER" VALUE="$FORM_USER"></TD></TR>
<TR><TD ALIGN="RIGHT"><label for='password'>$( _translate do "$LANG" password ):&nbsp;</label><INPUT TABINDEX="2" ID="password" TYPE="password" SIZE="10" MAXLENGTH="10" NAME="FORM_PASS"></TD></TR></TABLE></TD></TR>
<TR><TD ALIGN="CENTER"><BR><INPUT TYPE="checkbox" ID="accept_terms" TABINDEX="4" NAME="FORM_RULES" checked><label for='accept_terms'>&nbsp;$( _translate do "$LANG" accept_terms1 ) <A TABINDEX="5" HREF="$LINK=${LANG}${AMP}FORM_SHOW_RULES=$( if [ "$FORM_SHOW_RULES" = "true" ]; then echo -n 'false'; else echo -n 'true'; fi )" TITLE="$( _translate do "$LANG" tip_contract )">$( _translate do "$LANG" accept_terms2 )</A></label></TD></TR>
<TR><TD ALIGN="CENTER"><BR><INPUT TYPE="image" TABINDEX="3" SRC="images/button_login_de.gif" ALT="&rarr;Login"></TD></TR>
</TABLE></FORM></CENTER>
</BODY></HTML>
EOF
}

_weblogin_metadata_locationname ()
{
	local LANG="$( _translate lang $1 )"
	local META="/www/images/weblogin_rules_${LANG}_meta"

	[ ! -e "$FILE" ] && {
		LANG="$( _translate lang default )"
		META="/www/images/weblogin_rules_${LANG}_meta"
	}

	[ -e "$META" ] && eval "$( sed 's/^/local /' $META )"

	echo "${HOTELNAME:-Internet}"
}

_weblogin_htmlout_rules ()
{
	local LANG="$( _translate lang $1 )"
	local FILE="/www/images/weblogin_rules_${LANG}.txt"		# fixme! must be coded in ISO_8859-1
	local META="/www/images/weblogin_rules_${LANG}_meta"

	[ ! -e "$FILE" ] && {
		LANG="$( _translate lang default )"
		FILE="/www/images/weblogin_rules_${LANG}.txt"
		META="/www/images/weblogin_rules_${LANG}_meta"
	}

	eval "$( sed 's/^/local /' $META )"
	
	echo -n "<TR BGCOLOR='#b0c4de'><TD ALIGN="LEFT"><BR>"

	sed	-e '/^#/d' \
		-e "s#\${HOTELNAME}#$HOTELNAME#g" \
		-e "s#\${BEZAHLMODELL}#$BEZAHLMODELL#g" \
		-e "s#\${SPEED}#$SPEED#g" \
		-e "s#\${TECHNIK}#$TECHNIK#g" \
		-e "s#\${WARTUNGSFENSTER}#$WARTUNGSFENSTER#g" \
		-e "s#\${SPEICHERDAUER}#$SPEICHERDAUER#g" \
		-e "s#\${ERSTELLUNGSZEIT}#$ERSTELLUNGSZEIT#g" \
		-e "s#\${SIGNATUR}#$SIGNATUR#g" \
		-e 's#^[0-9]\.[0-9]#<br><br><b>&</b>#' \
		-e 's#^[0-9]\. .*#<h3>&</h3>#' \
		-e 's#^  $#<br><br>#' \
		-e 's#Ã¨#\&egrave;#g' \
		-e 's#Ã©#\&eacute;#g' \
		-e 's#Ã‰#\&Eacute;#g' \
		-e 's#Ãª#\&ecirc;#g' \
		-e 's#Ã #\&agrave;#g' \
		-e 's#Ã¢#\&acirc;#g' \
		-e 's#Ã´#\&ocirc;#g' \
		-e 's#Ã¹#\&ugrave;#g' \
		-e 's/Â/\&sect;/g' \
		-e 's/§/\&sect;/g' \
		-e 's/ö/\&ouml;/g' \
		-e 's/ü/\&uuml;/g' \
		-e 's/ä/\&auml;/g' \
		-e 's/ß/\&szlig;/g' $FILE

	echo -n "<BR><BR></TD></TR>"	
}

_weblogin_htmlout_rules_hint ()
{
	local LANG="$1"
	
	echo -n "<TR BGCOLOR='#E0ACAC'><TD ALIGN="CENTER"><BR><B>&nbsp;$( _translate do "$LANG" accept_rules )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_message_wrong_logindata ()
{
	local LANG="$1"
	
	echo -n "<TR BGCOLOR='#E0ACAC'><TD ALIGN="CENTER"><BR><B>&nbsp;$( _translate do "$LANG" wrong_logindata )&nbsp;</B><BR><BR></TD></TR>"
}

_weblogin_htmlout_gatepage ()
{
	_http header_mimetype_output "text/html"

	cat <<EOF
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>weimarnetz: Netzknoten $( nvram get fff_node_number ) ("$( nvram get wan_hostname )")</title>
<style type="text/css">
h1 { margin:0; padding:3pt; background:#333; color:white; font-size:15px; border-bottom:#333 1px solid;}
li { font-size:14px; font-weight:700; padding:12pt 0pt 0pt 10pt;list-style:none; height:30px; border-bottom:#333 1px solid; background:#fff}
a{text-decoration:none; color:222;}
li:hover{background:#3399FF; }
li:hover a{color:#fff}
ul {margin:0;padding:0; width: 100%;}
body {font-family:sans-serif; width:100%; height:100%; background-color:#333; padding:0; margin:0; color:black;}
</style>
</head>
<body>
<h1>Bitte ausw&auml;hlen</h1>
<ul>
<li><a href="http://$WIFIADR/cgi-bin-welcome?REDIRECTED=1">weiter ins Internet</a></li>
<li><a href="http://vikingosegundo.de/mw/">Experiment "hoopy-froods.net"</a></li>
<li><a href="http://$WIFIADR/cgi-bin-index.html">Startseite dieses Netzknotens</a></li>
</ul>
</body>
</html>
EOF
}

_weblogin_htmlout_inet_broken ()
{
	local LANG="$1"

	_log do "weblogin_htmlout_inet_broken" daemon alert "during user action"
	echo -n "<TR BGCOLOR='#E0ACAC'><TD ALIGN="CENTER"><BR><B>&nbsp;$( _translate do "$LANG" inet_broken )&nbsp;</B><BR><BR></TD></TR>"	
}

_weblogin_login_check ()		# fixme! send HOSTNAME?
{					# fixme! answer must be a challenge/response:	// prevent replay attacks!
	local USER="$1"			#        1. send hash of user/pass
	local PASS="$2"			#        2. server answers with hash_of(1+my_secret_sshid) + auth=true/false
	local MAC="$3"			#        3. we calc same hash and compare
	local SIGNAL="$4"
	local KEYWORD="$5"		# 'plaintext'
	local FREE
	local AUTHFILE="/www/cgi-bin/userdata.txt"

	[ -n "$KEYWORD" ] && KEYWORD="${USER}+${PASS}"

	local CRC="$( echo -n "${USER}${PASS}" | md5sum | cut -d' ' -f1 )"
	local GATEWAY="$( sed -n '${s/^.* GW=\([0-9\.]*\);.*/\1/p}' /tmp/ARCHIV_TRACEINET 2>/dev/null )"	# fixme! abstraction
	local ANSWER="$( wget -qO - "http://${GATEWAY:-127.0.0.1}/cgi-bin-sql?LOGIN=${CRC}&MAC=${MAC}&SIGNAL=${SIGNAL}&KEYWORD=${KEYWORD}" 2>/dev/null )"

	if [ -e /tmp/FREE ]; then
		FREE=1
	else
		grep -q ^"$CRC" "$AUTHFILE" 2>/dev/null && FREE=1	# use local auth file, if available - but also send logmsg to GW
	fi
	
	[ "$ANSWER" = "1" -o "$FREE" = "1" ] && {
		echo "$CRC" >/tmp/vds_user_$MAC		# for building vds
		return 0
	}
	
	return 1
}
