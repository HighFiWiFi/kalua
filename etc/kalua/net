_net_refresh_dnshosts ()
{
	local pidfile="/var/run/dnsmasq.pid"
	local pid

	[ -e "$pidfile" ] && {
		read pid <$pidfile
		kill -HUP $pid			# reread e.g. /etc/hosts + /etc/ethers + /var/run/hosts_olsr
	}
}

_net_dhcp_lease_filename()
{
	local file

	if   [ -e /tmp/dhcp.leases ]; then		# openwrt

		file="/tmp/dhcp.leases"

	elif [ -e /var/run/dhcp.leases ]; then		# freifunk-firmware

		file="/var/run/dhcp.leases"
	else
		file="$( uci get dhcp.@dnsmasq[0].leasefile )"
	fi

	[ -z "$file" ] && {
		file="/tmp/fake_dhcp_lease_file"
		touch "$file"
	}

	echo "$file"
}

_net_dhcp_lease_show()
{
	cat "$( _net dhcp_lease_filename )"
}

_net_dhcp_lease_remove()
{
	local mac="$1"
	local line
	local dhcp_lease_file="$( _net dhcp_lease_filename )"
	local tempfile="/tmp/dhcp_leases_$$"

	while read line; do {
	
		case "$line" in
			*$mac*) ;;
			     *) echo "$line" ;;
		esac

	} done <$dhcp_lease_file >$tempfile

	mv "$tempfile" "$dhcp_lease_file"

	_scheduler add "/etc/init.d/*dnsmasq restart"
}

_net_mac2vendor ()
{
	local FUNC="net_mac2vendor"
	local MAC="$1"
	local KEYWORD="$2"
	local URL="http://84.38.67.43/macs"	# intercity-vpn.de
	local MAC_SANITIZED
	local CACHE="/tmp/CACHE_MAC2VENDOR_$MAC"
	
	[ ! -e "$CACHE" ] && {

		_log do $FUNC daemon debug "not cached yet, working for '$MAC'"

		if [ ${#MAC} -ne 6 ]; then

			if [ ${#MAC} -eq 12 ]; then
				MAC_SANITIZED="$( _sanitizer do "$MAC" hex lowercase length:6 )"	# input = 112233445566
			else
				MAC_SANITIZED="$( _sanitizer do "$MAC" mac hex lowercase length:6 )"	# input = 11:22:33:44:55:66
			fi
			
			[ -z "$MAC_SANITIZED" ] && {
				_log do $FUNC daemon info "could not sanitize: '$MAC'"
				return 1
			}
		else
			MAC_SANITIZED="$MAC"
		fi

		_log do $FUNC daemon debug "sanitized '$MAC' to '$MAC_SANITIZED'"		
		_wget do "$URL/$MAC_SANITIZED" 5 >"$CACHE" 2>/dev/null
		
		[ "$( _file size "$CACHE" )" -eq 0 ] && {
			rm "$CACHE"
			return 1
		}
	}

	if [ "$KEYWORD" = "short" ]; then
		head -n1 $CACHE
	else
		head -n9 $CACHE
	fi
}

_net_ip4_is_private ()		# RFC-1918
{
	case "$1" in 192.168.*|172.1[6-9].*|172.2[0-9].*|172.3[0-1].*|169.254.*|10.*|127.*) return 0 ;; esac
	return 1
}

_net_ip2dns ()
{
	local IP="$1"
	local OLSR

	if   [ -e /var/etc/hosts ]; then
		OLSR="/var/etc/hosts"			# freifunk-firmware
	elif [ -e /var/run/hosts_olsr ]; then
		OLSR="/var/run/hosts_olsr"		# openwrt
	fi

	[ -n "$OLSR" ] && {
		fgrep -q "$IP	" $OLSR && {
			sed -n "/$IP	/{s/^.*	\([a-zA-Z0-9\._-]*\)	.*/\1/p;q}" $OLSR
			return 0
		}
	}

	nslookup $IP | sed -n "s/^Name:[^a-zA-Z0-9]*\(.*\)/\1/p"
}

_net_ip2mac ()		# ofcourse this works only for local IP's, but: maybe we want to "guess" using /etc/ethers...?
{
	local get_ip="$1"
	local line ip mac

	while read line; do {
		set $line
		ip="$1"
		mac="$4"

		[ "$ip" = "$get_ip" ] && {
			_sanitizer do "$mac" lowercase
			return
		}
	} done </proc/net/arp
}

_net_dns2ip ()
{
	nslookup $1 | sed -n '5s/^Address:[^0-9]*\([0-9\.]*\)/\1/p'
}

_net_dev2mac ()
{
	ip -o link show $1 | sed -n 's/^.*ether \(..:..:..:..:..:..\) .*/\1/p;q'
}

_net_devtype2symbol ()
{
	case $1 in
		tunnel) echo -n '=' ;;
	 	  wifi) echo -n '~' ;;
		     *) echo -n "-" ;;
	esac
}

_net_dev_type ()		# OUT1: string, "wifi/tunnel/wire"
{
	local DEV="$1"
	local OPTION="$2"	# short
	local OUT
	
	if   _net dev_is_wifi $DEV ; then
		OUT="wifi"
	elif _net dev_is_tuntap $DEV ; then
		OUT="tunnel"
	else
		OUT="wire"
	fi
	
	[ "$OPTION" = "short" ] && {
		OUT="$( _net devtype2symbol )"
	}
	
	echo -n "$OUT"
}

_net_ip2metric ()
{
	local ip="$1"
	local option="$2"

	case "$option" in
		olsr)
			_olsr remoteip2metric $ip
		;;
		*)
			ip route list $ip | sed -n 's/^.*metric \([0-9]*\).*/\1/p;q'
		;;
	esac
}

_net_dev_is_wifi ()
{
	grep -q "^.*$1:" /proc/net/wireless && return 0
	return 1
}

_net_dev_is_tuntap ()
{
	local KEYWORD="$( echo $1 | sed -n 's/^\([a-z]*\)[0-9]*/\1/p' )"
	
	[ "$KEYWORD" = "tun" ] && return 0
	[ "$KEYWORD" = "tap" ] && return 0
	return 1
}

_net_ip2dev ()		# outputs real devname like 'br0'
{
	ip -oneline route get $1 | sed -n 's/^.* dev \([a-zA-Z0-9@\.]*\)[^a-z]*src .*/\1/p'
}

_net_iplocal2dev ()		# does it really make sense to have this func?
{
	ip -oneline address show | sed -ne "/ inet $1\//{s/^[0-9]*: \([a-zA-Z0-9@\.]*\).*/\1/p;q}"
	
	# does not work for local IP's:
	# ip -o route get $1 | cut -d' ' -f3
}

_net_local_inet_offer ()		# SENS: check if default-route is local
{					# OUT1: string, false|wan|lan|pppoe
	local MODE="false"		# RC: true = inetoffer, false = no inetoffer
	local FUNC="net_local_inet_offer"
	local PHYDEV=0
	local METRIC=0
	local D=0
	local N=0

	[ ! -e /tmp/NETPARAM ] && {			# early_boot_estimation is for _profile()

		local  WAN_GATEWAY="$( uci get network.wan.gateway )"
		[ -n "$WAN_GATEWAY" ] && {
			
			if [ "$WAN_GATEWAY" = "0.0.0.0" ]; then
				_nvram set wan_gateway 
				_nvram set commit "config-mistake, unsetting wan-gateway which was '$WAN_GATEWAY'"
			else
				[ "$( uci get network.wan.proto )" = "pppoe" ] && {
					_log do $FUNC daemon info "early_boot_estimation: pppoe"
					echo "pppoe"
					return 0			# fixme!
				}
			
				_log do $FUNC daemon info "early_boot_estimation: wan"
				echo "wan"
				return 0
			fi
		}
	
		[ -n "$( uci get network.lan.gateway )" ] && {
			_log do $FUNC daemon info "early_boot_estimation: lan"
			echo "lan"
			return 0
		}

		/etc/init.d/S52vpnc_fff+ check && {
			_log do $FUNC daemon info "early_boot_estimation: tun"
			echo "tun"
			return 0
		}

		# fixme! wan-dhcp?

		_log do $FUNC daemon info "early_boot_estimation: false"
		echo "false"
		return 1
	}

	local  LAN_GATEWAY="$( uci get network.lan.gateway )"
	if [ -n "$LAN_GATEWAY" ] && [ -z "$( ip route list exact 0.0.0.0/0 via $LAN_GATEWAY )" ]; then

		[ "$LAN_GATEWAY" != "0.0.0.0" ] && {
			_log do $FUNC daemon info "alien_gateway '$LAN_GATEWAY': lan"
			echo "lan"
			return 0		# gets applied during '/etc/local.fw-fff+ masq'
		}
	fi

	# only look for the first default-route
	# some examples:
	#
	# default via 192.168.1.1 dev vlan1		-> wan-offer|wan_gateway
	# default via 191.255.255.1 dev venet0		-> root-server
	# default via 217.0.116.253 dev ppp0		-> pppoe
	# default dev tun0  scope link			-> vpnc
	# default via 10.63.52.36 dev br0 		-> lan-offer|lan-gateway
	
	eval $( ip route list exact 0.0.0.0/0 | head -n1 |
		while read N N D N PHYDEV METRIC N; do {	# we must eval it, otherwise		// fixme! look for 'table all'?
			echo PHYDEV=$PHYDEV			# the vars from subprocess are
			echo METRIC=$METRIC			# not known
			echo N=$N
			echo D=$D				# fixme! better use 'eval $( ip route list exact 0.0.0.0/0 | sed 'xyz' )'
		} done
	)

	if [ -z "$METRIC" ]; then				# found no metric = local inet-offer

		_log do $FUNC daemon debug "PHYDEV: '$PHYDEV' METRIC: '$METRIC' N: '$N' D: '$D'"

		if [ -z "${PHYDEV}${METRIC}${N}" ]; then	# ip route list exact 0.0.0.0/0 -> "default via eth0" or similar

			[ "$LAN_GATEWAY" = "0.0.0.0" ] && {	# fixme! move to early-boot-estimation
				
				_nvram set lan_gateway 
				_nvram set commit "config-mistake, unsetting lan-gateway which was '$LAN_GATEWAY'"
				
				ip route delete default via $D
			}
		else
			if   [ "$PHYDEV" = "$WANDEV" ]; then
				MODE="wan"
			elif [ "$PHYDEV" = "$LANDEV" ]; then
				MODE="lan"
			else
				MODE="pppoe"	# && WANDEV=ppp0          # fixme! this is not exact!
			fi
			
			[ "$PHYDEV" = "link" ] && {
				if   echo $D | grep -q "^tun[0-9]*" ; then
					MODE=tun
				elif echo $D | grep -q "^tap[0-9]*" ; then
					MODE=tap
				else
					MODE="$D"				# e.g. tun0 / vpnc
				fi
			}
			
			_log do $FUNC daemon info "found local default-gateway over device '$PHYDEV' = '$MODE'"
		fi
	else
		if [ $N -eq 0 ]; then
			_log do $FUNC daemon info "no local default-gateway, no default-gateway, no internet 8-("
		else
			_log do $FUNC daemon info "no local default-gateway found, only $N hops away 8-)"
		fi
	fi

	echo $MODE

	[ "$MODE" = "false" ] && return 1	
	return 0
}

_net_inet_seems_stable ()					# fixme! also check path to gateway (add wireless costs/hops)
{								# fixme! apply these checks regulary
	local FILE="/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY"	# fixme! test dns also?
	local FUNC="inet_seems_stable"				# fixme! use dnsfaker if unstable/unfake if stable

	_olsr uptime is_short || {
		[ -z "$( ip route list exact 0.0.0.0/0 table main )" ] && {
			_log do $FUNC daemon alert "unstable inet, no default route in main-table"
			return 1
		}
	}

	if [ -e "$FILE" ]; then
		read COST_INT <$FILE
		
		[ "$COST_INT" 2>/dev/null -gt 8000 ] && {
			_log do $FUNC daemon alert "unstable inet1, cost_int: '$COST_INT'"
			return 1
		}
		
		[ "$COST_INT" = "0" -a "$COST" != "1.00" ] && {
			_log do $FUNC daemon alert "unstable inet2, cost_int: '$COST_INT'"
			return 1
		}
	else
		return 0
	fi
}

_net_mac2ip ()		# SENS: get client-IP from different sources
{
	_sanitizer include

	local MAC="$( _sanitizer do "$1" lowercase )"
	local IP HOSTNAME COUNT

	_try1 ()	# is filled during pfilter_adduser() (macs are lowercase)
	{
		read 2>/dev/null IP </tmp/MAC2IP_$MAC
	}

	_try2 ()	# arp-cache (macs are lowercase)
	{
		local mac ip line

		while read line; do {
			set $line
			ip="$1"
			mac="$( _sanitizer do "$4" lowercase )"

			[ "$MAC" = "$mac" ] && {
				IP=$ip
				return
			}

		} done </proc/net/arp
	}

	_try3 ()	# DHCP-leases (macs are lowercase)
	{
		IP="$( sed -e "/$MAC/!d" -ne 's/^.* ..:..:..:..:..:.. \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) .*/\1/p' /var/run/dhcp.leases )"
	}

	_try4 ()	# /etc/ethers -> /etc/local.hosts (macs are lowercase)
	{
		HOSTNAME="$( sed -n "s/^$MAC \(.*\)/\1/p" /etc/ethers 2>/dev/null )"
		[ -n "$HOSTNAME" ] && IP="$( sed -n "/$HOSTNAME/s/^\([0-9\.]*\) ${HOSTNAME}.*/\1/p" /etc/local.hosts )"
	}

	for COUNT in 1 2 3 4; do {
		_try${COUNT}
		[ -n "$IP" ] && break
	} done

	echo -n $IP
}

_net_mac2hostname ()
{
	local MAC="$1"                                                                                                                                                
	local NAME="$( grep -i $MAC /etc/ethers | sed -n 's/^..:..:..:..:..:.. \(.*\)-.*-.*\..*$/\1/p' )"	# cutting off e.g. "-lan1-n364.domain"
	echo ${NAME:=anonym}                                                                                                                                          
}

_net_mac2dev ()
{
	local get_mac="$1"
	local mac dev dummy

	_sanitizer include

	while read dummy dummy dummy mac dummy dev; do {
		mac="$( _sanitizer do "$mac" lowercase )"

		[ "$get_mac" = "$mac" ] && {
			echo $dev
			return
		}

	} done </proc/net/arp
}

_net_mac2media ()
{
	local     MAC="$1"					# ARG1: (string) mac-address
	local   SHORT="$2"					# ARG2: (string) keyword "short" (optional)
	local     OUT=0						# OUT1: (string) wifi,wire OR ~,-

	local DEV="$( _net mac2dev $MAC )"
	
	  if [ "$DEV" = "$WIFIDEV" ]; then
	  	OUT=wifi
	elif uci get system.@ethers[0].wifi | grep -qi $MAC ; then
		OUT=wifi
	elif grep -sq ^"$( _sanitizer do "$( _net mac2ip $MAC )" escape_dots );" /tmp/CLIENTS_WIFI ; then
		OUT=wifi
	else
		OUT=wire		# fixme! this can also be guessed!
	fi

	[ -n "$SHORT" ] && OUT="$( _net devtype2symbol $DEV )"

	echo -n "$OUT"
}

_net_arp_permanent ()					# ARG1:ip ARG2:mac ARG3:wifi or wire
{
	local FUNC="net_arp_permanent"
        local IP="$1"
        local MAC="$( _sanitizer do "$2" lowercase )"
        local FORCE="$3"						# fixme! use also IP to guess interface
        
        _log do $FUNC daemon info "IP: '$IP' MAC: '$MAC' FORCE: '$FORCE'"
        
	local LINE="$( ip neigh show to $IP 2>/dev/null )"
	
	echo "$LINE" | grep -q "nud permanent" && {
		_log do $FUNC daemon info "already permanent - do nothing"
		return
	}

	local DEV="$( _net mac2dev $MAC )"
	local MODE="add"
	
	[ -n "$LINE" ] && {
		_log do $FUNC daemon info "already found - MODE: 'change'"
		MODE="change"
	}

 	if [ -z "$DEV" ]; then
		_log do $FUNC daemon info "not in neigh-list, probing"
 		  
 		  if [ "$FORCE" = "wifi" ]; then
 			
 			_log do $FUNC daemon info "enforced wifi"
 			DEV=$WIFIDEV
 		
 		elif [ "$( _net mac2media $MAC )" = "wire" ]; then
 		
 			_log do $FUNC daemon info "detected wire"
 			DEV=$LANDEV
 		else
 			_log do $FUNC daemon info "fallback to wifi"
 			DEV=$WIFIDEV
 		fi
 	else
 		_log do $FUNC daemon info "DEV from ip_neigh: '$DEV'"
 	fi
 
	_log do $FUNC daemon info "ip neigh $MODE $IP dev $DEV lladdr $MAC nud permanent"
	ip neigh $MODE $IP dev $PHYSDEV lladdr $MAC nud permanent 2>/dev/null
}

_net_mask2cidr ()
{
	local o

	case $1 in
		255.255.255.254) o=31 ;;
		255.255.255.252) o=30 ;;
		255.255.255.248) o=29 ;;
		255.255.255.240) o=28 ;;
		255.255.255.224) o=27 ;;
		255.255.255.192) o=26 ;;
		255.255.255.128) o=25 ;;
		255.255.255.0) o=24 ;;
		255.255.254.0) o=23 ;;
		255.255.252.0) o=22 ;;
		255.255.248.0) o=21 ;;
		255.255.240.0) o=20 ;;
		255.255.224.0) o=19 ;;
		255.255.192.0) o=18 ;;
		255.255.128.0) o=17 ;;
		255.255.0.0) o=16 ;;
		255.254.0.0) o=15 ;;
		255.252.0.0) o=14 ;;
		255.248.0.0) o=13 ;;
		255.240.0.0) o=12 ;;
		255.224.0.0) o=11 ;;
		255.192.0.0) o=10 ;;
		255.128.0.0) o=9 ;;
		255.0.0.0) o=8 ;;
		254.0.0.0) o=7 ;;
		252.0.0.0) o=6 ;;
		248.0.0.0) o=5 ;;
		240.0.0.0) o=4 ;;
		224.0.0.0) o=3 ;;
		192.0.0.0) o=2 ;;
		128.0.0.0) o=1 ;;
		*) o=32 ;;
	esac

	echo -n $o
}

_net_cidr2mask ()		# OUT1: string
{
	local o
	
	case $1 in
		31) o=255.255.255.254 ;;
		30) o=255.255.255.252 ;;
		29) o=255.255.255.248 ;;
		28) o=255.255.255.240 ;;
		27) o=255.255.255.224 ;;
		26) o=255.255.255.192 ;;
		25) o=255.255.255.128 ;;
		24) o=255.255.255.0 ;;
		23) o=255.255.254.0 ;;
		22) o=255.255.252.0 ;;
		21) o=255.255.248.0 ;;
		20) o=255.255.240.0 ;;
		19) o=255.255.224.0 ;;
		18) o=255.255.192.0 ;;
		17) o=255.255.128.0 ;;
		16) o=255.255.0.0 ;;
		15) o=255.254.0.0 ;;
		14) o=255.252.0.0 ;;
		13) o=255.248.0.0 ;;
		12) o=255.240.0.0 ;;
		11) o=255.224.0.0 ;;
		10) o=255.192.0.0 ;;
		 9) o=255.128.0.0 ;;
		 8) o=255.0.0.0 ;;
		 7) o=254.0.0.0 ;;
		 6) o=252.0.0.0 ;;
		 5) o=248.0.0.0 ;;
		 4) o=240.0.0.0 ;;
		 3) o=224.0.0.0 ;;
		 2) o=192.0.0.0 ;;
		 1) o=128.0.0.0 ;;
		 *) o=255.255.255.255 ;;
	esac
	
	echo -n $o
}

_net_hosts2cidr ()
{
	local o
	local HOSTS="$1"

	  if [ $HOSTS -le 1 ]; then
		o=32
	elif [ $HOSTS -le 2 ]; then
		o=31
	elif [ $HOSTS -le 4 ]; then
		o=30
	elif [ $HOSTS -le 8 ]; then
		o=29
	elif [ $HOSTS -le 16 ]; then
		o=28
	elif [ $HOSTS -le 32 ]; then
		o=27
	elif [ $HOSTS -le 64 ]; then
		o=26
	elif [ $HOSTS -le 128 ]; then
		o=25
	elif [ $HOSTS -le 256 ]; then
		o=24
	fi

	echo -n $o
}
