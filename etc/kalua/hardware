_hardware_list ()	# fixme! pci_class + fallback to 'http://pci-ids.ucw.cz/read/PCI/14e4/4719'
{			# fixme! split into show_pci/usb/pcmcia...

	# use this a input for kernel2.6-style
	# sed 's/^\([0-9a-f]\{4\}\)[^0-9a-f]*\([0-9a-f]\{4\}\)\([0-9a-f]\{4\}\).*/Class \1: PCI device \2:\3 -/' /proc/bus/pci/devices

	local ALGO CLASS VENDOR DEVICE ID_VENDOR ID_CLASS ID_DEVICE LINE OUT
	local SOURCE="${1:-/proc/pci}"		# can be file (copy/paste from another device)
	local KEYWORD="$2"			# 'verbose'

	_sanitizer include

	_service1 ()
	{
		local VENDOR="$1"
		local DEVICE="$2"	
		local URL="http://pci-ids.ucw.cz/read/PC/$VENDOR"	# accepts upper+lowercase	

		_wget do "$URL"		| fgrep itemname |	      sed 's/^.*Name: \(.*\)/VENDOR="\1";/'
		_wget do "$URL/$DEVICE" | fgrep itemname | tail -n1 | sed 's/^.*Name: \(.*\)/DEVICE="\1";/'
	}

	_service2 ()
	{
		local VENDOR="0x$1"
		local DEVICE="0x$2"
		local URL="http://www.pcidatabase.com/search.php?device_search=Search&device_search_str=${DEVICE}"

		_wget do "${URL}" | fgrep "$VENDOR" |
		 sed -n "s#^.*<td>${DEVICE}</td><td>\(.*\)</td><td>${VENDOR}</td>.*id=[0-9]*.>\(.*\)</a>.*#DEVICE='\1';VENDOR='\2';#p"
	}

	_class ()
	{
		local CLASS="$1"				# 12e4
		local MAIN="$( echo $CLASS | cut -b 1-2 )"
		local SUB="$(  echo $CLASS | cut -b 3-4 )"
		local URL="http://pci-ids.ucw.cz/read/PD"
		
		_wget do "$URL/$MAIN"	   | fgrep itemname | tail -n1 | sed 's/^.*Name: \(.*\)/CLASS="\1, /'
		_wget do "$URL/$MAIN/$SUB" | fgrep itemname | tail -n1 | sed 's/^.*Name: \(.*\)/\1/'
		echo -n '"'
	}

	while read LINE; do {
	
		case "verbose" in
			"$KEYWORD"|"$SOURCE") echo $LINE ;;
		esac
		
		eval $( echo "$LINE" | sed -n 's/^.*Class \([0-9a-f]*\): PCI device \([0-9a-f]*\):\([0-9a-f]*\) .*/ID_CLASS=\1;ID_VENDOR=\2;ID_DEVICE=\3/p' )

		[ -n "$ID_CLASS" ] && {

			eval "$( _sanitizer do "$( _class "$ID_CLASS" )" strip_newlines )"

			ID_VENDOR="$( _sanitizer do "$ID_VENDOR" uppercase )"
			ID_DEVICE="$( _sanitizer do "$ID_DEVICE" uppercase )"

			for ALGO in _service1 _service2; do {
				eval "$( $ALGO "${ID_VENDOR}" "${ID_DEVICE}" )"
				[ -n "$DEVICE" ] && break
			} done
			
			echo "$CLASS | $DEVICE | $VENDOR"

			CLASS=; DEVICE=; VENDOR=; ID_CLASS=; ID_VENDOR=; ID_DEVICE=
		}
	
	} done <"$SOURCE"
}

_hardware_remap_devs ()		# this one is tricky, but we want boardvalues-2-boardtype/ifnames (and vicaversa) only at one point
{				# remap_devs <empty> or		-> function calls himself with interface-values
				# remap_devs get_model		-> function outputs only vendor/model

	local FUNC="hardware_remap_devs"		# fixme! clkfreq=240 (overclocking?)
	local NEW_MAC					# fixme! boardflags buffalo?

	[ "$8" = "get_model" ] && {
		echo "ROUTER_VENDOR='${10}';ROUTER_MODEL='${11}';ROUTER_NO='$9'"
		return
	}

	[ -z "$8" ] && {
		local PHYADDR="$( nvram get et0phyaddr )"
		local BOARDNUM="$( nvram get boardnum )"
		local BOARDTYPE="$( nvram get boardtype | sed 's/^0x[0]*//' )"		# 0x0467 -> 467
		local BOARD="${PHYADDR}_${BOARDTYPE}_${BOARDNUM}"
		
		case "$BOARD" in 
			"30_467_00")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "0" "Buffalo" "WHR-HP-G54" ;;
			"30_467_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "3 2 1 0 5*"   "4 5" $1 "1" "Linksys" "WRT-54-GL" ;;
			"30_708_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "2" "Linksys" "WRT-54-G v3.0" ;;
			"30_101_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "3" "Linksys" "WRT-54-G v2.0" ;;
			"30_42f_45")		_$FUNC "vlan0" "br0" "eth2" "eth2" "vlan1" "1 2 3 4 5*"   "0 5" $1 "4" "Asus"    "WL-500g premium v1" ;;											
			"30_48E_45")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "4 5" $1 "D" "Asus"    "WL-500g premium v2" ;;	# ???
			"30_101_")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "0 1 2 3 5*"   "4 5" $1 "5" "Siemens" "SE505 v2" ;;
			 "0_bcm94710r4_100")	_$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  ""             ""    $1 "6" "Siemens" "SE505 v1" ;;						
			"30_bcm94710dev_42")	_$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  "0 1 2 3 4 5u" ""    $1 "7" "Linksys" "WRT-54-G v1.1 / Allnet 0277" ;;
			"30_bcm94710ap_44")	_$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  "0 1 2 3 4 5u" ""    $1 "8" "Dell"    "Truemobile 2300" ;;
			 "0_bcm94710dev_asusX")	_$FUNC "eth1"  "br0" "eth2" "eth2" "none"  ""             ""    $1 "9" "Asus"    "WL-HDD (Yakumo_Storage)" ;;
			"30_bcm94710dev_2")	_$FUNC "eth1"  "br0" "eth2" "eth2" "none"  ""             ""    $1 "A" "Linksys" "WAP v1.0" ;;
			"30_48e_00")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "0 1 2 3 5*"   "0 5" $1 "B" "Buffalo" "WHR-G125" ;;
			"30_bcm94710dev_asusX") _$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  ""             ""    $1 "C" "Asus"    "WL-500g deluxe" ;;
	
			*)
				[ "$1" = "get_model" ] && {
					echo "ROUTER_VENDOR='unknown';ROUTER_MODEL='unknown'"
					return
				}
				
				_log do $FUNC daemon debug "unknown vendor/model"
			;;
		esac
	
		return
	}

	_log do $FUNC daemon debug "vendor/model/no: '${9}' / '${10}' / '${8}'"

	case $8 in
		1|2|3)	# WRT-54-GL / G3.0 / G2.0
			# factory (G3.0)
			# et0macaddr=00:90:4C:60:00:2A
			# il0macaddr=00:90:4c:5f:00:2a
		
			NEW_MAC="$( _sanitizer do "$( grep ..:..:..:..:..:.. /dev/mtd/0ro | tail -n1 )" mac lowercase )"
			_nvram set  lan_hwaddr "$NEW_MAC"							# +0 = lan
			_nvram set wifi_hwaddr "$( _hardware mac_plus $( _hardware mac_plus $NEW_MAC ) )"	# +2 = wifi

			_nvram set  il0macaddr $( nvram get wifi_hwaddr )	# il0macaddr <= wifi_hwaddr 
			_nvram set  et0macaddr "$NEW_MAC"			# et0macaddr <=  lan_hwaddr
			
			[ -z "$( nvram get wan_hwaddr )" ] && {
				_nvram set  wan_hwaddr "$( _hardware mac_plus $NEW_MAC )"			# +1 = wan
			}
		;;
		4)	# asus wl-500g premium v1
			#
			# et0macaddr=00:1d:60:46:97:09 (which is individual)
			# et1macaddr=40:10:18:00:00:2d (is default, and used by the ETHERNET_PHY = eth1)
			#
			# example of correct values for an router with original wifi-card (sadly, no relation between values)
			# wifi_hwaddr=00:1d:60:46:81:83
			#  lan_hwaddr=00:1d:60:46:97:09
			#
			# if wifi-card is changed, there is no need to set wifi_hwaddr,
			# but if wifi-card is original, then wifi_mac=lan_mac !!!	// we have to test this
			
			_log do $FUNC daemon debug "fixme! if wifi-card is original, you have to set wifi_hwaddr"	
			
			# _nvram set lan_hwaddr $( nvram get et0macaddr )
		;;
		8)	# dell2300				// fixme! idea: if wifi is up, apply ($WIFIMAC - 2) to LAN
			# factory-settings:
			# et0macaddr=00:90:4c:49:00:2c
			# et1macaddr=00:90:4c:4a:00:2c
			
			[ -n "$( nvram get wan_hwaddr )" ] && _nvram set wan_hwaddr		# its not possible to set wan_hwaddr!
			
			if [ "$( _sanitizer do "$(nvram get et1macaddr)" lowercase )" != "00:90:4c:4a:00:2c" ]; then
				[ "$( nvram get et1macaddr )" != "( nvram get lan_hwaddr )" ] && {
					_nvram set lan_hwaddr "$( nvram get et1macaddr )"
				}
			else
				# et0macaddr=...wifi?...doesnt matter, is automatically set correctly
				# et1macaddr=00:90:4b:39:7b:5e
				# lan_hwaddr=00:90:4b:39:7b:5e
			
				_log do $FUNC daemon alert "must be set manually: It is the mac on the back/downside in the middle, near barcode -2"
				_log do $FUNC daemon alert "use this commands: 'mymac=00:90:4b:xx:xx:xx ; nvram set et1macaddr=\$mymac'"
				_log do $FUNC daemon alert "and: 'nvram set lan_hwaddr=\$mymac ; nvram commit ; reboot'"
			fi
		;;
		A)
			_log do $FUNC daemon alert "must be set manually: it is the mac on the back/downside = wifimac"
			
			# bootloader defaults are: 00:11:22:33:44:55 for LAN
			#                          00:11:22:33:44:56 for WIFI
		;;
		9|C)
			# Asus WL-HDD / Yakumo Storage  + WL-500g deluxe
			# et0macaddr     =>  lan_hwaddr
			# et1macaddr + 2 => wifi_hwaddr = lan_hwaddr (2b + 2 =2d)

			NEW_MAC="$( _sanitizer do "$( sed -n '/..:..:..:..:..:../{p;q}' /dev/mtd/0ro )" mac lowercase )"
			_nvram set  lan_hwaddr "$NEW_MAC"
			_nvram set wifi_hwaddr "$( _hardware mac_plus $( _hardware mac_plus $NEW_MAC) )"	# +2

			_nvram set  et0macaddr "$NEW_MAC"			# et0macaddr <=  lan_hwaddr
			_nvram set  et1macaddr $( nvram get wifi_hwaddr )	# et1macaddr <= wifi_hwaddr

		;;
	esac

	local LIST="lan_ifnames lan_ifname wl0_ifname wifi_ifname wan_ifname vlan0ports vlan1ports" # + wan_device=wan_ifname?
	local CHANGE=""
	local ENTRY=""
	local VALUE=""
	local ARG_NUM=0
	
	for ENTRY in $LIST ; do {
		ARG_NUM=$(( ARG_NUM + 1 ))
		eval "VALUE=\"\$${ARG_NUM}\""			# get arg_1...2...n in $VAR
		_nvram set "$ENTRY" "$VALUE" || CHANGE="true"
	} done
	
	[ -n "$CHANGE" ] && return 1
}

_hardware_mac_plus ()
{
	local MAC="$( _sanitizer do "$1" lowercase )"
	local MAC_LAST_BYTE="$( echo $MAC | cut -b 17 )"
	local MAC="$( echo $MAC | cut -b 1-16 )"

	MAC_LAST_BYTE="$( echo $MAC_LAST_BYTE | sed 'y/0123456789abcdef/zyxwvutsrqonmlkj/' | sed 'y/zyxwvutsrqonmlkj/123456789abcdef0/' )"

	[ "$MAC_LAST_BYTE" = "0" ] && {				# cf + 1 = d0 !
		MAC_LAST_BYTE="$( echo $MAC | cut -b 16 )"
		MAC_LAST_BYTE="$( echo $MAC_LAST_BYTE | sed 'y/0123456789abcdef/zyxwvutsrqonmlkj/' | sed 'y/zyxwvutsrqonmlkj/123456789abcdef0/' )"
		MAC="$( echo $MAC | cut -b 1-15 )"
		echo "${MAC}${MAC_LAST_BYTE}0"
		return
	}
	
	echo "${MAC}${MAC_LAST_BYTE}"
}
