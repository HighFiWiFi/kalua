_firmware_update_pmu ()		# poor mens update - simply overwrites all (shell-)files with tarball from repo
{
	local FUNC="firmware_update_pmu"
	local MODE="$1"
	local URL="$( _links firmware_url_get tarball $MODE )"		# enforce beta|stable|testing
	local WORKINGDIR="/tmp/pmu"
	local FILE="tarball.tgz"
	local TGZ="/tmp/$FILE"
	local SIZE COUNT TEMPFILE
	
	_cleanup ()
	{
		_log do "$FUNC" daemon info "cleaning up - applied ${COUNT:-0} files"
		cd /tmp
		rm -fR "$WORKINGDIR"
		rm -f  "$TGZ"
	}
	
	wget -O "$TGZ" "$URL" || {
		_log do "$FUNC" daemon info "failed to download '$URL' - abort"
		_cleanup
		return 1
	}
	
	tar tzf "$TGZ" >/dev/null || {
		_log do "$FUNC" daemon info "failed to extract '$TGZ' - abort"
		_cleanup
		return 1
	}
	
	mkdir -p "$WORKINGDIR"
	mv "$TGZ" "$WORKINGDIR"
	cd "$WORKINGDIR"
	
	tar xzf "$FILE" || {
		 _log do "$FUNC" daemon info "failed to extract '$TGZ' to '$WORKINGDIR' - abort"
		_cleanup
		return 1	 
	}
	rm "$FILE"

	for TEMPFILE in $( find -type f ); do {

		[ "$( _file hash "$TEMPFILE" )" = "$( _file hash "/$TEMPFILE" )" ] || {

			_log do "$FUNC" daemon debug "moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			_software make_free_space "$(( 120 + $( _file size "$TEMPFILE" kb ) ))"
		
			mv "$TEMPFILE" "/$TEMPFILE" || {
				_log do "$FUNC" daemon alert "error during moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			}
			
			COUNT=$(( $COUNT + 1 ))
		}
	} done
	
	_cleanup
	
	echo >>/etc/banner "# manually updated with poormens method on $(date) to this version"
	echo >>/etc/banner "# originally flashed version: $( grep ^Kit: /etc/freifunk-release )"
	tail >>/etc/banner -n2 /etc/variables_fff+
	echo >>/etc/banner "#"
	echo >>/etc/banner
	
	/etc/kalua_init
}

_firmware_updatemode ()
{
	local MODE="$( nvram get fff_autofwupdate )"

	case $MODE in
		0|beta|testing)
			echo -n "$MODE"
		;;
		*)
			echo -n "stable"
		;;
	esac
}

_firmware_fetch ()
{
	local FIRMWARE_URL="$1"
	local FUNC="fetch_firmware"
	local FREE_WANTED="1750"		# which means 1750-120 = 1630 useable kilobyte for image-file (should ne enough 8-) )
	local DAEMON="firmware_fetch"
	local DESTINATION="/www/fw.trx"
	local RETRY_COUNT=0
	local IPK

	_scheduler queue_purge
	/etc/init.d/S90webcam_fff+ stop	
	/etc/init.d/S52vpn_fff+ stop		# for safe uninstalling this package
	
	_software make_free_space $FREE_WANTED
	
	[ "$( _system flash_free )" -lt "$FREE_WANTED" ] && {
		_log do $FUNC daemon crit "could'nt free target-flash space, strange!"
		DESTINATION="/tmp/fw.trx"
		local FW_IN_RAM="true"
	}

	rm "$DESTINATION"
	while true; do {

		wget -c -O "$DESTINATION" "$FIRMWARE_URL" && {
			_log do $FUNC daemon info "download successful"
			break
		}

		_scheduler queue_purge

		[ "$( _system flash_free )" -lt 120 ] && {
			_log do $FUNC daemon crit "low flash space, during download?"
			DESTINATION="/tmp/fw.trx"
			local FW_IN_RAM="true"
			rm "$DESTINATION"
			RETRY_COUNT=0
		}

		RETRY_COUNT=$(( $RETRY_COUNT + 1 ))
		[ "$RETRY_COUNT" -gt 50 ] && {
			rm -f "/www/SOFTWARE_FULLY_INSTALLED"	# to ensure, that we reinstall all removed packages...
			rm -f "$DESTINATION"
			_system reboot_safe "firmware download unseccussful"	# fixme!
		}

		_log do $FUNC daemon info "something went wrong during download...retrying in 30 sec (try: $RETRY_COUNT)"
		sleep 30
	} done

	_scheduler queue_purge

	[ "$FW_IN_RAM" = "true" ] && {
		_log do $FUNC daemon info "burning firmware directly"
		_firmware burn "$DESTINATION"
		_system reboot_safe "firmware burning unsuccessful"
	}

	_log do "$DAEMON" daemon info "download ready."
}

_firmware_burn ()
{
	local FILE="$1"
	local FUNC="firmware_burn"
	local OUT

	OUT="$( /www/cgi-bin/freifunk-upload -c "$FILE" )"
	
	if [ "$OUT" = "ok" ]; then
		_log do "$FUNC" daemon info "crc: $OUT - burning '$FILE'"
		/usr/sbin/firmware-burn "$FILE"	
	else
		_log do "$FUNC" daemon alert "wrong crc: '$OUT'	- abort"
		return 1
	fi
}
