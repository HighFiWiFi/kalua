_firmware_update_pmu ()		# poor mens update - simply overwrites all (shell-)files with tarball from repo
{				# fixme! safe hash of last successful installed tarball /www/TARBALL_STABLE_$HASH and only upgrade, if it differs
	local FUNC="firmware_update_pmu"
	local MODE="$( _firmware updatemode "$1" override)"

	case "$MODE" in
		stable|beta|testing)
			:
		;;
		*)
			_log do "$FUNC" daemon debug "abort, updatemode: $MODE"
			return
		;;
	esac

	local URL="$( _links firmware_url_get tarball $MODE )"		# enforce beta|stable|testing
	local hash_last_applied
	local hash_tarball="$( _links firmware_url_get tarball_hash $MODE )"
	local FILE_HASH_APPLIED="/etc/tarball_last_applied_hash"
	local WORKINGDIR="/tmp/pmu"
	local FILE="tarball.tgz"
	local TGZ="/tmp/$FILE"
	local SIZE TEMPFILE CRON_RESTART REPATCH_ALL
	local COUNT=0
	local COUNT_ERROR=0

	_cleanup ()
	{
		local option="$1"

		_log do "$FUNC" daemon debug "cleaning up - applied $COUNT files ($COUNT_ERROR errors)"
		cd /tmp
		rm -fR "$WORKINGDIR"
		rm -f  "$TGZ"

		[ "$option" = "reschedule" ] && {
			_scheduler add "_$FUNC $MODE" force
		}
	}

	read hash_last_applied <"$FILE_HASH_APPLIED"

	[ "$hash_tarball" = "$hash_last_applied" ] && {
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date (tarball-hash known)"
		return 0
	}

	_log do "$FUNC" daemon debug "fetching tarball in '$MODE'-mode: '$URL'"
	wget -O "$TGZ" "$URL" || {
		_log do "$FUNC" daemon info "failed to download '$URL' - abort"

		_cleanup reschedule
		return 1
	}
	
	tar tzf "$TGZ" >/dev/null || {
		_log do "$FUNC" daemon info "fail during extract-test '$TGZ' - abort"

		_cleanup reschedule
		return 1
	}
	
	mkdir -p "$WORKINGDIR"
	mv "$TGZ" "$WORKINGDIR"
	cd "$WORKINGDIR"
	
	tar xzf "$FILE" || {
		 _log do "$FUNC" daemon alert "failed to extract '$TGZ' to '$WORKINGDIR' - abort"

		_cleanup reschedule
		return 1	 
	}
	rm "$FILE"

	_log do "$FUNC" daemon debug "tarball extracted - applying only files which differ"

	for TEMPFILE in $( find -type f ); do {

		[ "$( _file hash "$TEMPFILE" )" = "$( _file hash "/$TEMPFILE" )" ] || {

			_log do "$FUNC" daemon info "moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			_software make_free_space "$(( 120 + $( _file size "$TEMPFILE" kb ) ))"

			case "$( basename "$TEMPFILE" )" in
				cron|S51crond*)
					_log do "$FUNC" daemon info "detected changed cron settings"
					CRON_RESTART=1
				;;
				S03patch-o-matic*)
					_log do "$FUNC" daemon info "detected changed patch-o-matic"
					REPATCH_ALL=1
				;;
			esac

			mv "$TEMPFILE" "/$TEMPFILE" || {
				_log do "$FUNC" daemon alert "error during moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
				COUNT_ERROR=$(( $COUNT_ERROR + 1 ))
			}
			sync

			COUNT=$(( $COUNT + 1 ))
		}
	} done

	_cleanup
	echo -n "$hash_tarball" >"$FILE_HASH_APPLIED"

	if [ $COUNT -gt 0 ]; then

		/etc/kalua_init

		[ "$CRON_RESTART" = "1" ] && {
			/etc/init.d/*crond_fff+ stop

			while ! pidof crond ; do {
				/etc/init.d/*crond_fff+ start
			} done
		}

		[ "$REPATCH_ALL"  = "1" ] && /etc/init.d/*patch-o-matic* repatch all

		if _uci is_oldstyle; then
			cat /etc/banner | head -n24 >/etc/banner
		else
			cat /etc/banner | head -n14 >/etc/banner
		fi

		echo >>/etc/banner
		echo >>/etc/banner "# manually updated with poormens method on $( date ) by '$0' to this version:"
		echo >>/etc/banner "# originally flashed version: $( _system version )"
		tail >>/etc/banner -n2 /etc/variables_fff+
		echo >>/etc/banner "#"
		echo >>/etc/banner
		
		_log do "$FUNC" daemon alert "[OK] applied tarball in '$MODE'-mode ($COUNT files), wrote new banner"
	else
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date"
	fi
}

_firmware_updatemode ()		# updatemode <empty>		= string of configured update-mode
{				# updatemode "stable"		= bool, true if "stable" = "configured update-mode", false if not
	local CHECKMODE="$1"	# updatemode "beta" "override"	= string if mode "beta" is known, otherwise configured mode (fallback)
	local KEYWORD="$2"
	local OUT MODE

	if [ "$KEYWORD" = "override" ]; then
		MODE="$CHECKMODE"
		[ -z "$MODE" ] && MODE="$( uci get system.@fwupdate[0].mode )"
	else		
		MODE="$( uci get system.@fwupdate[0].mode )"
	fi

	case $MODE in
		0|beta|testing)
			OUT="$MODE"
		;;
		*)
			OUT="stable"
		;;
	esac

	if [ -n "$CHECKMODE" ] && [ -z "$KEYWORD" ]; then
		[ "$OUT" = "$CHECKMODE" ] && return 0
		return 1
	else
		echo -n "$OUT"
	fi
}

_firmware_fetch ()
{
	local FIRMWARE_URL="$1"
	local FUNC="fetch_firmware"
	local FREE_WANTED="1750"		# which means 1750-120 = 1630 useable kilobyte for image-file (should ne enough 8-) )
	local DESTINATION="/www/fw.trx"
	local RETRY_COUNT=0
	local IPK

	_scheduler queue_purge
	/etc/init.d/S90webcam_fff+ stop	
	/etc/init.d/S52vpn_fff+ stop		# for safe uninstalling this package
	
	_software make_free_space $FREE_WANTED ruthless
	
	[ "$( _system flash_free )" -lt "$FREE_WANTED" ] && {
		_log do $FUNC daemon crit "could'nt free target-flash space, strange!"
		DESTINATION="/tmp/fw.trx"
		local FW_IN_RAM="true"
	}

	rm "$DESTINATION"
	while true; do {

		wget -c -O "$DESTINATION" "$FIRMWARE_URL" && {
			_log do $FUNC daemon info "download successful"
			break
		}

		_scheduler queue_purge

		[ "$( _system flash_free )" -lt 120 ] && {
			_log do $FUNC daemon crit "low flash space, during download?"
			DESTINATION="/tmp/fw.trx"
			local FW_IN_RAM="true"
			rm "$DESTINATION"
			RETRY_COUNT=0
		}

		RETRY_COUNT=$(( $RETRY_COUNT + 1 ))
		[ "$RETRY_COUNT" -gt 50 ] && {
			rm -f "/www/SOFTWARE_FULLY_INSTALLED"	# to ensure, that we reinstall all removed packages...
			rm -f "$DESTINATION"
			_system reboot_safe "firmware download unseccussful"	# fixme!
		}

		_log do $FUNC daemon info "something went wrong during download...retrying in 30 sec (try: $RETRY_COUNT)"
		sleep 30
	} done

	_scheduler queue_purge

	[ "$FW_IN_RAM" = "true" ] && {
		_log do $FUNC daemon info "burning firmware directly"
		_firmware burn "$DESTINATION"
		sleep 30
		_system reboot_safe "firmware burning unsuccessful"
	}

	_log do "$FUNC" daemon info "download ready."
}

_firmware_burn ()
{
	local FILE="$1"
	local FUNC="firmware_burn"
	local OUT

	if _uci is_oldstyle ; then

		OUT="$( /www/cgi-bin/freifunk-upload -c "$FILE" )"

		if [ "$OUT" = "ok" ]; then
			_log do "$FUNC" daemon info "crc: $OUT - burning '$FILE'"

			/etc/init.d/*crond_fff+ restart nano
			[ -e /dev/misc/crondog ] && echo >/dev/misc/crondog			# fixme!

			/usr/sbin/firmware-burn "$FILE"	
		else
			_log do "$FUNC" daemon alert "wrong crc: '$OUT'	- abort"
			return 1
		fi
	else
		mylog()			# syslogd will likely be killed
		{
			logger "$1"
			echo "$1"
		}

		[ -e "$FILE" ] || {
			mylog "file '$FILE' is missing, abort"
			return 1
		}

		mylog "[START] checking image"
		. /etc/functions.sh
		. /lib/upgrade/platform.sh
		. /lib/upgrade/common.sh

		if platform_check_image "$FILE" ; then
			mylog "[READY] image OK checked"
		else
			mylog "[ERR] bad checksum, abort"
			return 1
		fi

		while [ ! -e /tmp/cron_watchdog.id ]; do {
			mylog "waiting till cron_watchdog starts"
			sleep 5
		} done

		mylog "watchdog found, enforcing watchdog-ending"
		touch /tmp/cron_watchdog_please_end_yourself_$( cat /tmp/cron_watchdog.id )
		mylog "sleeping 60sec"
		sleep 60

		local task list_tasks
		list_tasks="crond S69watch_olsrd_fff+ scheduler uhttpd ulogd netserver dnsmasq luci-bwc udhcpc syslogd olsrd polipo cron_watchdog.sh"

		_log shell_is_interactive || {
			list_tasks="$list_tasks screen dropbear wifi_down hostapd"
		}

		list_tasks="$list_tasks pause $list_tasks"		# double try...

		for task in $list_tasks ; do {

			case "$task" in
				pause)
					sleep 3
				;;
				wifi_down)
					uci set wireless.radio0.disabled=1
					wifi
				;;
				*)
					mylog "killall $task"
					killall "$task"
				;;
			esac
		} done

		rm -fR /etc/banner /etc/profile /etc/kalua /etc/nixio
		mylog "[OK] still running tasks:"
		ps ax
		echo 3 > /proc/sys/vm/drop_caches
		free

		mylog "[START] sysupgrading"
		sysupgrade -v "$FILE"
		mylog "[READY] sysupgraded"

		>"$FILE"		# normally this section is never reached	
		/bin/sync
		/bin/sleep 30
		/sbin/reboot
	fi
}

_firmware_filelist ()
{
	local FUNC="firmware_filelist"
	local FILE="$1"
	local FILE LIST
	
	[ -n "$FILE" ] && {		# helper for examining specific files in /usr/sbin/fwupload_fff+
		echo "$FILE"
		return
	}

	LIST="
		/etc/dhcp-script.d/10dhcpscript
		/etc/init.d/*_fff+
		/etc/init.d/S41build_static_netparam
		/etc/init.d/S90ipip_tunnel
		/etc/kalua/*
		/etc/kalua_init*
		/etc/local.fw-fff+
		/etc/variables_*
		/usr/bin/neigh
		/usr/bin/scheduler
		/usr/sbin/cron.autocreate_tickets
		/usr/sbin/cron.check_inet_gw_fff+
		/usr/sbin/cron.evaluate_ulogd_syslogemu_fff+
		/usr/sbin/cron.generate_new_tickets
		/usr/sbin/cron.monitoring
		/usr/sbin/cron.optimize_wifi_txpower
		/usr/sbin/cron.select_best_antenna_fff+
		/usr/sbin/cron.upgrade_packages
		/usr/sbin/fwupload_fff+
		/www/cgi-bin-admin
		/www/cgi-bin-chip
		/www/cgi-bin-shoutbox
		/www/cgi-bin-speed
		/www/cgi-bin-sql
		/www/cgi-bin-tool_fff+
		/www/cgi-bin-traffic_fff+
		/www/cgi-bin-welcome*
		/www/cgi-bin/cgi-bin-update_fff+
		/www/cgi-bin/config_fff+
		/www/cgi-bin/telnetd_fff+
		/www/cgi-bin/userdb
		/www/robots.txt
		"

	for FILE in $LIST; do {
		echo "$FILE"
		[ ! -e "$FILE" ] && _log do $FUNC daemon info "[ERR] missing file '$FILE'"
	} done
}
