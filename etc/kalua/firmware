_firmware_update_pmu ()		# poor mens update - simply overwrites all (shell-)files with tarball from repo
{
	local FUNC="firmware_update_pmu"
	local MODE="$( _firmware updatemode "$1" override)"
	local URL="$( _links firmware_url_get tarball $MODE )"		# enforce beta|stable|testing
	local WORKINGDIR="/tmp/pmu"
	local FILE="tarball.tgz"
	local TGZ="/tmp/$FILE"
	local SIZE COUNT TEMPFILE
	
	_cleanup ()
	{
		_log do "$FUNC" daemon debug "cleaning up - applied ${COUNT:=0} files"
		cd /tmp
		rm -fR "$WORKINGDIR"
		rm -f  "$TGZ"
	}
	
	_log do "$FUNC" daemon debug "fetching tarball in '$MODE'-mode: '$URL'"
	wget -O "$TGZ" "$URL" || {
		_log do "$FUNC" daemon info "failed to download '$URL' - abort"
		_cleanup
		return 1
	}
	
	tar tzf "$TGZ" >/dev/null || {
		_log do "$FUNC" daemon info "failed to extract '$TGZ' - abort"
		_cleanup
		return 1
	}
	
	mkdir -p "$WORKINGDIR"
	mv "$TGZ" "$WORKINGDIR"
	cd "$WORKINGDIR"
	
	tar xzf "$FILE" || {
		 _log do "$FUNC" daemon info "failed to extract '$TGZ' to '$WORKINGDIR' - abort"
		_cleanup
		return 1	 
	}
	rm "$FILE"
	_log do "$FUNC" daemon debug "tarball extracted - applying only files which differ"

	for TEMPFILE in $( find -type f ); do {

		[ "$( _file hash "$TEMPFILE" )" = "$( _file hash "/$TEMPFILE" )" ] || {

			_log do "$FUNC" daemon info "moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			_software make_free_space "$(( 120 + $( _file size "$TEMPFILE" kb ) ))"
		
			mv "$TEMPFILE" "/$TEMPFILE" || {
				_log do "$FUNC" daemon alert "error during moving file '$WORKINGDIR/$TEMPFILE' to '/$TEMPFILE'"
			}
			sync

			COUNT=$(( $COUNT + 1 ))
		}
	} done
	
	_cleanup
	/etc/kalua_init
	
	if [ ${COUNT:=0} -gt 0 ]; then
		echo >>/etc/banner "# manually updated with poormens method on $(date) to this version"
		echo >>/etc/banner "# originally flashed version: $( grep ^Kit: /etc/freifunk-release )"
		tail >>/etc/banner -n2 /etc/variables_fff+
		echo >>/etc/banner "#"
		echo >>/etc/banner
		_log do "$FUNC" daemon alert "[OK] applied tarball in '$MODE'-mode ($COUNT files), wrote new banner"
	else
		_log do "$FUNC" daemon info "[OK] applied nothing - all seems up to date"
	fi
}

_firmware_updatemode ()		# updatemode <empty>		= string of configured update-mode
{				# updatemode "stable"		= bool, true if "stable" = "configured update-mode", false if not
	local CHECKMODE="$1"	# updatemode "beta" "override"	= string if mode "beta" is known, otherwise configured mode (fallback)
	local KEYWORD="$2"
	local OUT MODE
	
	if [ "$KEYWORD" = "override" ]; then
		MODE="$CHECKMODE"
		[ -z "$MODE" ] && MODE="$( nvram get fff_autofwupdate )"
	else		
		MODE="$( nvram get fff_autofwupdate )"
	fi

	case $MODE in
		0|beta|testing)
			OUT="$MODE"
		;;
		*)
			OUT="stable"
		;;
	esac
	
	if [ -n "$CHECKMODE" ] && [ -z "$KEYWORD" ]; then
		[ "$OUT" = "$CHECKMODE" ] && return 0
		return 1
	else
		echo -n "$OUT"
	fi
}

_firmware_fetch ()
{
	local FIRMWARE_URL="$1"
	local FUNC="fetch_firmware"
	local FREE_WANTED="1750"		# which means 1750-120 = 1630 useable kilobyte for image-file (should ne enough 8-) )
	local DESTINATION="/www/fw.trx"
	local RETRY_COUNT=0
	local IPK

	_scheduler queue_purge
	/etc/init.d/S90webcam_fff+ stop	
	/etc/init.d/S52vpn_fff+ stop		# for safe uninstalling this package
	
	_software make_free_space $FREE_WANTED ruthless
	
	[ "$( _system flash_free )" -lt "$FREE_WANTED" ] && {
		_log do $FUNC daemon crit "could'nt free target-flash space, strange!"
		DESTINATION="/tmp/fw.trx"
		local FW_IN_RAM="true"
	}

	rm "$DESTINATION"
	while true; do {

		wget -c -O "$DESTINATION" "$FIRMWARE_URL" && {
			_log do $FUNC daemon info "download successful"
			break
		}

		_scheduler queue_purge

		[ "$( _system flash_free )" -lt 120 ] && {
			_log do $FUNC daemon crit "low flash space, during download?"
			DESTINATION="/tmp/fw.trx"
			local FW_IN_RAM="true"
			rm "$DESTINATION"
			RETRY_COUNT=0
		}

		RETRY_COUNT=$(( $RETRY_COUNT + 1 ))
		[ "$RETRY_COUNT" -gt 50 ] && {
			rm -f "/www/SOFTWARE_FULLY_INSTALLED"	# to ensure, that we reinstall all removed packages...
			rm -f "$DESTINATION"
			_system reboot_safe "firmware download unseccussful"	# fixme!
		}

		_log do $FUNC daemon info "something went wrong during download...retrying in 30 sec (try: $RETRY_COUNT)"
		sleep 30
	} done

	_scheduler queue_purge

	[ "$FW_IN_RAM" = "true" ] && {
		_log do $FUNC daemon info "burning firmware directly"
		_firmware burn "$DESTINATION"
		_system reboot_safe "firmware burning unsuccessful"
	}

	_log do "$FUNC" daemon info "download ready."
}

_firmware_burn ()
{
	local FILE="$1"
	local FUNC="firmware_burn"
	local OUT

	OUT="$( /www/cgi-bin/freifunk-upload -c "$FILE" )"
	
	if [ "$OUT" = "ok" ]; then
		_log do "$FUNC" daemon info "crc: $OUT - burning '$FILE'"
		echo >/dev/misc/crondog			# fixme!
		/usr/sbin/firmware-burn "$FILE"	
	else
		_log do "$FUNC" daemon alert "wrong crc: '$OUT'	- abort"
		return 1
	fi
}

_firmware_filelist ()
{
	local FUNC="firmware_filelist"
	local FILE="$1"
	local FILE LIST
	
	[ -n "$FILE" ] && {
		echo "$FILE"
		return
	}
	
	LIST="/etc/kalua/* /etc/kalua_init /etc/init.d/S41build_static_netparam /usr/bin/neigh"
	LIST="$LIST /www/cgi-bin-speed /www/cgi-bin-welcome /usr/bin/scheduler"
	LIST="$LIST /www/cgi-bin-admin /www/cgi-bin-sql /www/cgi-bin-chip /usr/sbin/cron.monitoring"
	LIST="$LIST /etc/dhcp-script.d/10dhcpscript /usr/sbin/cron.upgrade_packages /usr/sbin/cron.optimize_wifi_txpower"
	LIST="$LIST /etc/init.d/S90ipip_tunnel /usr/sbin/cron.generate_new_tickets"
	LIST="$LIST /etc/init.d/S01boot_process_watchdog_fff+ /etc/init.d/S01firmware_update_fff+ /etc/init.d/S02check_interface_correctness_fff+"
	LIST="$LIST /etc/init.d/S03patch-o-matic_fff+ /etc/init.d/S43ethers_fff+ /etc/init.d/S46fake_dns_server_fff+ /etc/init.d/S51crond_fff+"
	LIST="$LIST /etc/init.d/S52build_services_fff+ /etc/init.d/S52vpn_fff+ /etc/init.d/S52vpnc_fff+ /etc/init.d/S54batman_fff+"
	LIST="$LIST /etc/init.d/S69watch_olsrd_fff+ /etc/init.d/S70prepare_fff+ /etc/init.d/S71auto_software_update_fff+"
	LIST="$LIST /etc/init.d/S72filter_fff+ /etc/init.d/S90webcam_fff+ /etc/init.d/S99an_olsr_dev_check_fff+ /etc/local.fw-fff+"
	LIST="$LIST /etc/variables_fff+ /etc/variables_software_fff+ /usr/sbin/cron.check_inet_gw_fff+ /usr/sbin/cron.evaluate_ulogd_syslogemu_fff+"
	LIST="$LIST /usr/sbin/cron.select_best_antenna_fff+ /usr/sbin/fwupload_fff+ /www/cgi-bin-tool_fff+ /www/cgi-bin-traffic_fff+"
	LIST="$LIST /www/cgi-bin/cgi-bin-update_fff+ /www/cgi-bin/config_fff+ /www/cgi-bin/telnetd_fff+"
	LIST="$LIST /usr/sbin/cron.autocreate_tickets /www/robots.txt /www/cgi-bin-shoutbox"

	for FILE in $LIST; do {
		echo "$FILE"
		[ ! -e "$FILE" ] && _log do $FUNC daemon info "[ERR] missing file '$FILE'"
	} done
}
