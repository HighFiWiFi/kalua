FUNC_SANITIZER=1

# _sanitizer
# _sanitizer_hex
# _sanitizer_lowercase
# _sanitizer_uppercase
# _sanitizer_email
# _sanitizer_urlvalue
# _sanitizer_mac
# _sanitizer_alphanum


# ToDo: 
# - urlencode
# - integer
#   - shortint
#   - integer		// sed -n 's/^[^0-9-]*\([0-9-]*\)[^0-9-]*/\1/p'
#   - longint
#   - unsigned
#   - range -500...+800	(round to min or max, or check)
# - ip4, ip6


_sanitizer ()
{
	local INPUT="$1"
	local WORK="$1"

	while [ -n "$2" ]; do {	
	
		case $2 in
			check)
				[ "$WORK" = "$INPUT" ] && return 0
				return 1
			;;
			*)							# hex|lowercase|uppercase|email|urlvalue|mac|alphanum
				WORK="$( _sanitizer_$2 "$WORK" )" || {
					logger -t "fff+ $0 _sanitizer()" -p "daemon.alert" "'_sanitizer_$2 $1' - invalid call"
					return 1
				}
			;;
		esac
		
		shift
	} done
	
	echo -n "$WORK"
}

_sanitizer_hex ()
{
	echo -n "$1" | sed 's/[^a-fA-F0-9]//g'
}

_sanitizer_lowercase ()
{
	echo -n "$1" | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'
}

_sanitizer_uppercase ()
{
	echo -n "$1" | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'
}

_sanitizer_email ()
{
	echo -n "$1" | sed 's/[^0-9a-zA-Z@\._-]//g'		# fixme! only one '@'
}

_sanitizer_urlvalue ()
{
	func_need log
	
	func_url_encode "$1"
}

_sanitizer_mac ()		# real world mac's, does not work on e.g. tun/tap/bridge-macs	// fixme! enforce ':'-format?
{
	echo -n "$1" | sed -n 's/^.*\([018aA][01248AaCc][:-][a-fA-F0-9][a-fA-F0-9][:-][a-fA-F0-9][a-fA-F0-9][:-][a-fA-F0-9][a-fA-F0-9][:-][a-fA-F0-9][a-fA-F0-9][:-][a-fA-F0-9][a-fA-F0-9]\).*/\1/p'
}

_sanitizer_alphanum ()
{
	echo -n "$1" | sed 's/[^a-zA-Z0-9]//g'
}
