_profile_get ()		# OUT1: string
{			# RC: false = apply new profile (!) -> S02interface_check

	local FUNC="profile_get"
	local PROFILE
	local NODE_NUMBER_VAR="fff_node_number"
	local PROFILE_VAR="fff_profile"
	local PROFILE_SAFED="$( nvram get $PROFILE_VAR )"
	local OUT="standard"
	local MAC="$1"

	[ ! -e /www/FRESHFLASHED ] && {
		_log do $FUNC daemon debug "detected freshflash"

		if [ -n "$PROFILE_SAFED" ]; then
			
			_log do $FUNC daemon debug "applying already safed profile again"
			nvram get $PROFILE_VAR
			return 1
		else									# this is an example to migrate from an
			nvram get wl0_ssid | grep -q sundi && {				# alread exisiting network to this software
				MYNODE="$( nvram get wifi_ipaddr | cut -d'.' -f4 )"
				[ -n "$MYNODE" ] && _nvram set $NODE_NUMBER_VAR $MYNODE
		
				PROFILE_SAFED="ffsundi_mesh"				# here is the place to enforce a profile,
				_nvram set $PROFILE_VAR $PROFILE_SAFED			# history of the node doesn't matter
				nvram get $PROFILE_VAR
				return 1
			}
		fi
	}

	[ -z "$PROFILE_SAFED" ] && {			# unset? -> set profile

		_log do $FUNC daemon debug "is unset, probing capabilities"

		PROFILE="$( _profile_mac2profile get $MAC )"

		  if [ -n "$PROFILE" ]; then
			
			_log do $FUNC daemon debug "found mac2profile-entry: '$PROFILE'"
			_nvram set $PROFILE_VAR 	"$( echo "$PROFILE" | sed -n 's/^..:..:..:..:..:.. \([a-zA-Z0-9_-]*\).*/\1/p' )"
  	  		_nvram set $NODE_NUMBER_VAR 	"$( echo "$PROFILE" | sed -n 's/^..:..:..:..:..:.. [a-zA-Z0-9_]*[^0-9]*\([0-9]*\).*/\1/p' )"
  	  	
  	  	elif _wifi feature_probe 802.11a ; then
  	  	
  	  		_nvram set $PROFILE_VAR "standard_mesh_band_a"
  	  	
  	  	elif _wifi feature_probe 802.11g ; then
			  
			  if [ -z "$( nvram get fff_node_number )" ]; then

			  	_log do $FUNC daemon debug "no node_number, totally virgin"
			  	_nvram set $PROFILE_VAR "standard_mesh_band_g"
			  	
			elif [ "$( _wifi get_mode )" = "ap" ]; then
		
				_log do $FUNC daemon debug "device is in AP-mode"
				_nvram set $PROFILE_VAR "standard_ap_band_g"
			
			elif [ "$( _wifi get_mode )" = "client" ]; then
				
				_log do $FUNC daemon debug "device is in STA-mode (client)"
				
				_nvram set $PROFILE_VAR "standard_mesh_band_g"
				# _nvram set $PROFILE_VAR "standard_client_band_g"	# fixme! (needs some work...)
			else
				if [ "$( nvram get wl0_channel )" = "13" ]; then
					_log do $FUNC daemon debug "device is not in AP or client-mode, but on Channel 13"
					_nvram set $PROFILE_VAR "backbone_mesh_band_g"
				else
					_log do $FUNC daemon debug "device is not in AP or client-mode"
					_nvram set $PROFILE_VAR "standard_mesh_band_g"
				fi
			fi
		else
			_log do $FUNC daemon debug "could'nt determine profile, fallback to g-mesh"
			_nvram set $PROFILE_VAR "standard_mesh_band_g"
		fi
		
		nvram get $PROFILE_VAR
		return 1
	}

	nvram get $PROFILE_VAR
	return 0
}

_profile_set_config ()
{
	local FUNC="profile_set_config"
	local PROFILE="$1"			# e.g. weimarnetz_standard
	local NODE_ID="$2"			# e.g. 422 or 69-7

	[ -z "$NODE_ID" ] && NODE_ID="$( nvram get fff_node_number )"		# maybe known?

	_profile_user map_name $PROFILE >/dev/null && {				# if map-able: rename profile, otherwise
		PROFILE="$( _profile_user map_name $PROFILE )"			# leave the name (var is global!) like it was
		_nvram set fff_profile $PROFILE
	}

	_log do $FUNC daemon debug "applying profile '$PROFILE' / nodeID: '$NODE_ID'"

	pidof crond >/dev/null && {
		_log do $FUNC daemon debug "discontinue cron.minutely checks for 600 seconds"
		
		echo "rm \$0; sleep 600" >/tmp/.autorun
		chmod +x /tmp/.autorun
		sleep 3			# fixme! why sleep?
	}

	touch /tmp/PROFILE_SET
	_profile nvram_make_backup
	_profile memorise_important_vars $NODE_ID
	_profile unset_nvram_group
	_profile rebuild_cfe	
	_profile remap_devs
	
	_profile_user set_$PROFILE $NODE_ID
	
	_profile memorise_important_vars restore

	# fixme! this means, we can't enforce this variable in profile 8-(
	if [ -z "$(nvram get ff_adm_neturl)" ] || nvram get ff_adm_neturl | grep -q "wireless.subsignal.org" ; then
		_nvram set ff_adm_neturl "<big><a href=http://wireless.subsignal.org>http://wireless.subsignal.org</a> - der Weimarer Freifunk Anlaufpunkt - Telefon:&nbsp;<b>03643&nbsp;/&nbsp;544304</b></big>"
	fi

	_profile count_used_nvram_vars

	rm /tmp/PROFILE_SET
	_nvram set commit
}

_profile_nvram_make_backup ()
{
	local FUNC="profile_nvram_make_backup"
	local TEMP="/tmp/nvram_backup"
	local BACKUP="/www/backup_nvram_$( ls -l /www/backup_nvram_* /bin/sh 2>/dev/null | sed -n '$=' ).sh.gz"		# /bin/sh for +1

	_log do $FUNC daemon debug "writing '$BACKUP'"	

	echo "# in case of emergency, simply run this file with 'sh file.sh'" >"$TEMP"

	nvram show 2>/dev/null |
	 sort |
	  sed "s/'/'\\\''/g" |
	   sed -n "s/^\([a-zA-Z0-9_-]*\)=\([A-Za-z0-9<>_\.-].*\)/nvram set \1='\2'/p" >>"$TEMP"

	echo "echo 'dont forget an \"nvram commit\" to save changes...'" >>"$TEMP"

	cat "$TEMP" | gzip -c >>"$BACKUP"
	rm  "$TEMP"
}

_profile_count_used_nvram_vars ()
{
	local FUNC="profile_count_used_nvram_vars"
	local COUNT="$( nvram show 2>/dev/null | sed -n '/^[a-zA-Z0-9_\.-]*=[A-Za-z0-9<>_-].*/p' | wc -l )"
	
	_log do $FUNC daemon debug "$COUNT"
}

_profile_memorise_important_vars ()
{
	local FUNC="profile_memorise_important_vars"
	
	[ "$1" = "restore" ] && {
		_log do $FUNC daemon debug "restoring '/tmp/${FUNC}_*'"
		
		.  /tmp/profile_memorise_important_vars_*
		rm /tmp/profile_memorise_important_vars_*
		
		_log do $FUNC daemon debug "restored"
		return
	}
	
	local VARGROUP=""
	local TEMP="/tmp/${FUNC}_$$"
	local LIST="fff_profile fff_ethers_ fff_sms_ fff_autofwupdate fff_portfw fff_mail_ fff_node_number fff_vpn_"
	      LIST="$LIST fff_vpnc_ fff_dhcp_ignore fff_adblock fff_nosplash fff_best_ant fff_timeserver"		# fixme! ff_ipkg?
	      LIST="$LIST ff_adm_ ff_reset ff_secureadmin_ ff_dsskey lan_hwaddr wan_hwaddr wifi_hwaddr"			# ff_nameservice?
	      LIST="$LIST fff_optimize_ ppp_ wifi_gateway wan_gateway lan_gateway wan_hostname fff_traffic_borders"

	[ "$(nvram get ff_pw)" != '$1$$CoERg7ynjYLsj2j4glJ34.' ] && {			# fixme! better use: "$(httpd -m admin)"
		_log do $FUNC daemon debug "password is not 'admin', using it"		# so we have to possibility to define once
		LIST="$LIST ff_pw"							# an profil_pw, which is not in later sources...
	}

	case "$(nvram get wan_proto)" in
		pppoe|dhcp)
			LIST="$LIST wan_proto"
		;;
	esac

	[ "$( _wifi get_mode )" = "client" ] && {					# fixme! (master-mode too?!)
		LIST="$LIST wl0_infra wl0_mode wl0_ssid wl0_channel wifi_proto"
	}

	[ "$( _wifi get_mode )" = "ap" ] && {
		[ -n "$(nvram get fff_profile)" ] && {
			nvram get wl0_ssid | grep -i -q "weimar" || {			# fixme! (dirty hack)
				LIST="$LIST wl0_ssid"					# remember ESSID if keyword 'weimar'
			}								# is not included e.g. "Ristorante_Versilia"
		}
	}

	eval "$( _ipsystem do $1 )"
	
	[ -n "$(nvram get lan_gateway)" ] && {
	
		if [ "$(nvram get lan_gateway)" = "0.0.0.0" ]; then
			_log do $FUNC daemon debug "removing senseless DD-WRT(?) entry"
			_nvram set lan_gateway
		else
			[ "$LAN_ADR" != "$( nvram get lan_ipaddr)" ] && {		# static alien LAN ip-addr/netmask
				LIST="$LIST lan_ipaddr lan_netmask"
			}
		fi
	}

	[ -n "$(nvram get wan_gateway)" ] && {
		[ "$WAN_ADR" != "$( nvram get wan_ipaddr)" ] && {		# static alien WAN ip-addr/netmask
			LIST="$LIST wan_ipaddr wan_netmask"
		}
	}

	[ -n "$(nvram get wifi_gateway)" ] && {
		[ "$WIFI_ADR" != "$( nvram get wifi_ipaddr)" ] && {		# static alien WIFI ip-addr/netmask
			LIST="$LIST wifi_ipaddr wifi_netmask"
		}
	}

	# inetoffer or specials (e.g. olsr over wifi-client)
	#
	# OK?    - lan, simple, static gateway					= lan_gateway
	# OK?    - lan, own static network/mask/gateway (not ip-system)		= lan_ipaddr/netmask/gateway
	# OK?    - lan, alien gateway (=2nd ip, with DHCP)			= lan_gateway
	
	# OK?    - wan, dhcp
	# OK?    - wan, simple, static gateway					= wan_gateway
	# OK?    - wan, own static network/mask/gateway (not ip-system)		= wan_ipaddr/netmask/gateway
	# OK?    - wan, pppoe							= wan_proto/mtu, ppp_redialperiod/idletime/username/passwd
	
	# OK?    - wifi, mode:client+specific essid				= wl0_infra/mode/ssid/channel, wifi_proto
	# OK?    - wifi, mode:client+specific essid simple, static gateway	= wl0_infra/mode/ssid/channel, wifi_proto/gateway
	# fixme! - wifi, mode:client+specific essid,static, only alien gateway	= ?
	# OK?    - wifi, mode:client+specific essid
	#		 own static network/mask/gateway (not ip-system)	= wl0_infra/mode/ssid/channel, wifi_proto/gateway/ipaddr/netmask
	
	# fixme! - vpnc?
	#

	_log do $FUNC daemon debug "writing to $TEMP"	

	for VARGROUP in $LIST; do {
		nvram show 2>/dev/null |
		 grep ^$VARGROUP |
		  sed "s/'/'\\\''/g" |
		   sed -n "s/^\([0-9a-zA-Z_\.-]*\)=\(.*\)/_nvram set \1 '\2'/p"
	} done >$TEMP
}

_profile_rebuild_cfe ()
{
	local FUNC="profile_rebuild_cfe"
	local TEMP="/tmp/cfe_rebuild_$$"

	_log do $FUNC daemon debug "extracting cfe"
	
	strings /dev/mtd/0ro |
	 sed '/^[0-9a-fA-F][0-9a-fA-F]:/,$d'|
	  sed -n '/^.*=[^%].*/p' |
	   sed -n "s/^\([a-zA-Z][a-zA-Z0-9_\.-]*\)=\(.*\)$/_nvram set \1 '\2' ;/p" >$TEMP

	_log do $FUNC daemon debug "applying values"

	. $TEMP
	rm $TEMP

	# fixme!
	# - vars is only 1 char
	# - value is only 1 [^a-zA-Z0-9]

	# 'WIR'='<'
	# 'C'='.w'
	# 'x'='sn'
	# 'TG'='<'
	# 'IN3'=';'
	# 'V'='FCI'
	# 'x_'=' '
	# 'l'='amNj'
	# 'D'='O9%'
	# 'e'='z|a{k'
	# 'C'=';3'
	# 'SsU5'=','
	# 'u'='x}'
}

_profile_rebuild_cfe_se505 ()
{
	cat <<EOF
aa0=3
ag0=255
boardflags=0x0388
boardflags2=0
boardrev=0x10
boardtype=0x0101
boot_flash_addr=bfc00000
ccode=0
cctl=0
clkfreq=200
cpu_type=0x4712
dl_ram_addr=a0001000
et0macaddr=00:90:96:C0:88:2A
et0mdcport=0
et0phyaddr=0
et1macaddr=00:90:96:C0:88:2A
et1mdcport=1
et1phyaddr=30
gpio1=adm_eesk
gpio2=adm_eecs
gpio4=adm_rc
gpio6=adm_eedi
il0macaddr=00:90:96:c0:88:2b
os_flash_addr=bfc40000
os_name=linux
os_ram_addr=80001000
pa0b0=0x119a
pa0b1=0xfb93
pa0b2=0xfea5
pa0itssit=62
pa0maxpwr=66
pmon_ver=2.01.01
scratch=a0180000
sdram_config=0x0000
sdram_init=0x0419
sdram_ncdl=0x23
sdram_refresh=0x8040
sromrev=2
wl0_corerev=7
wl0gpio1=0
wl0gpio2=0
wl0gpio3=0
wl0gpio4=0
wl0gpio5=0
wl0id=0x4320
wl0_radioids=BCM2050
wl0_unit=0
EOF
}

_profile_unset_nvram_group ()	# empty ARG1 = all (!)
{
	local FUNC="profile_unset_nvram_group"
	local SIZE_COUNTER=0
	local GROUP="$1"		# e.g. lan_
	local TEMP="/tmp/${FUNC}_$$"
	local VAR=""
	local LIST="$( nvram show 2>$TEMP | sort | sed -n "s/^\($GROUP[0-9a-zA-Z_\.-]*\)=.*$/\1/p" )"	# 2> is the output 'used 5286 bytes'
	local SIZE_DIFF=0
	local SIZE_AFTER=0
	local SIZE_BEFORE="$( cut -d" " -f2 $TEMP )"
	
	[ -z "$GROUP" ] && _log do $FUNC daemon debug "trying to erase hole nvram"
	
	_log do $FUNC daemon debug "used nvram: $SIZE_BEFORE bytes"
	
	for VAR in $LIST; do {
		SIZE_COUNTER=$(( $SIZE_COUNTER + 1 + ${#VAR} + $( nvram get "$VAR" | wc -c ) ))
		_nvram set "$VAR" ""
	} done
	
	_log do $FUNC daemon debug "calculated freed bytes: $SIZE_COUNTER"
	
	nvram show >/dev/null 2>$TEMP
	SIZE_AFTER="$( cut -d" " -f2 $TEMP )"
	
	_log do $FUNC daemon debug "used nvram: $SIZE_AFTER bytes"

	SIZE_DIFF=$(( $SIZE_BEFORE - $SIZE_AFTER ))

	[ $SIZE_DIFF -ne $SIZE_COUNTER ] && {
		_log do $FUNC daemon debug "calculated freed bytes != real freed ($SIZE_COUNTER != $SIZE_DIFF)"
	}

	if [ -z "$GROUP" ] && [ $SIZE_AFTER -ne 0 ]; then
		_log do $FUNC daemon debug "could not delete all variables"
		
		nvram show 2>/dev/null | sed 's/[^a-zA-Z0-9_:><@-]/\./g' >$TEMP		# replace non-printable chars to dots
		
		SIZE_BEFORE=0
		while read LIST; do {
			SIZE_BEFORE=$(( $SIZE_BEFORE + 1 ))		# now count+log each line
			_log do $FUNC daemon debug "trashline $SIZE_BEFORE: '$LIST'"
		} done <$TEMP
		
		if [ $SIZE_BEFORE -eq 0 ]; then
			_log do $FUNC daemon debug "but nvram database seems to be empty"
		else
			_log do $FUNC daemon debug "writing backup with $SIZE_BEFORE lines to '/www/uneraseable_nvram.txt'"
			nvram show 2>/dev/null >/www/uneraseable_nvram.txt
		fi
	fi

	rm $TEMP
}

_profile_local_include_vars ()
{
	local VAR

	while [ -n "$1" ]; do {			# fixme! todo: escape "'"
	
		VAR="$( echo "$1" | sed -n "s/^\(.*\)=\(.*\)$/\1='\2'/p" )"	# hello=world c -> hello='world c'
	
		echo "local $VAR 2>/dev/null >/dev/null ;"
	
		shift
	} done
}

_profile_set_system ()
{
	local TEMP_TZ="$TZ"; unset TZ		# sadly we use the global var TZ, so we need a "stack"
	local VAR
	eval $(_profile local_include_vars "$@")

	[ -n "$PASS"     ] && _nvram set ff_pw        "$( httpd -m "$PASS" )"	# must be plaintext (is replaced by real pw later...)
	[ -n "$HOSTNAME" ] && _nvram set wan_hostname "$HOSTNAME"		# e.g. my-router
	[ -n "$DOMAIN"   ] && _nvram set wan_domain   "$DOMAIN"			# e.g. olsr
	[ -n "$DNS"      ] && _nvram set wan_dns      "$DNS"			# e.g. 141.1.1.1
	[ -n "$TZ"       ] && _nvram set ff_tz        "$TZ"			# standard timezone-string
	[ -n "$REPOS"    ] && _nvram set ff_ipkg      "$REPOS"			# src freifunk http://download.berlin.freifunk.net/ipkg/packages;src weimarnetz http://www.weimarnetz.de/ipkg/packages 
	[ -n "$IPSYSTEM" ] && _nvram set fff_ipsystem "$IPSYSTEM"		# it must exist the function: "_ipsystem_$IPSYSTEM ()"
	[ -n "$WEBLOGIN" ] && _nvram set fff_weblogin "1"
	[ -n "$VDS"	 ] && _nvram set fff_vds      "1"			# data retention / vorratsdatenspeicherung

	[ -n "$SERVERS"  ] && {
		_nvram set fff_url_firmware    "http://$( echo "$SERVERS" | cut -d";" -f1 )"	# fixme! allow ftp,ssh,...?
		_nvram set fff_url_network     "http://$( echo "$SERVERS" | cut -d";" -f2 )"
		_nvram set fff_server_vpn_dns         "$( echo "$SERVERS" | cut -d";" -f3 )"
		_nvram set fff_server_vpn_ip4         "$( echo "$SERVERS" | cut -d";" -f4 )"
		_nvram set fff_server_vpn_ip6         "$( echo "$SERVERS" | cut -d";" -f5 )"
	}

	[ -n "$DEFAULTS" ] && {
		_nvram set boot_wait "on"		# for safe TFTP, is also hard set in /etc/preinit
		_nvram set ff_dnsmasq "1"		# start DNSmasq-daemon -> 1/0
		_nvram set ff_mini_fo "1"		# rom-overlay filesystem
		_nvram set ff_nonetmsg "0"		# not udp-netmessages during bootstrapping
		_nvram set ff_unsecure_webadmin "1"	# HTTPS enforced for /www/cgi-bin/ ?
		_nvram set fff_ipsystem "ffweimar"	# it must exist the function "_ipsystem_ffweimar ()"
		_nvram set wan_domain "olsr"		# better do not change it
	}
	
	TZ="$TEMP_TZ"
}

_profile_set_contact ()
{
	eval $(_profile local_include_vars "$@")
	
	[ -n "$LOCATION"] && _nvram set ff_adm_loc	"$LOCATION"
	[ -n "$MAIL"    ] && _nvram set ff_adm_mail	"$MAIL"
	[ -n "$PHON"    ] && _nvram set ff_adm_tel	"$PHON"
	[ -n "$NOTE"    ] && _nvram set ff_adm_note	"$NOTE"
	[ -n "$LAT"     ] && _nvram set ff_adm_latlon	"${LAT};${LON}"
	[ -n "$URL"	] && _nvram set ff_adm_neturl	"$URL"
}

_profile_set_wifi ()
{
	eval $(_profile local_include_vars "$@")
	
	[ -n "$IP" ] && {
		_nvram set wifi_proto	"static"
		_nvram set wifi_ipaddr	"${IP%/*}"
		_nvram set wifi_netmask "$( _net cidr2mask ${IP#*/} )"	# 8 -> 255.0.0.0
	}

	[ -n "$DHCP" ] && {
		# DHCP="STARTIP/PRE,NUM,LEASETIME" -> DHCP="${WIFI_IP_1ST}/${WIFI_PRE},${WIFI_MASK}"
		_nvram set ff_wldhcp "$(echo $DHCP|sed -n 's/^\(.*\),.*,.*/\1/p'),$( _net cidr2mask $(echo $DHCP|sed -n 's/^.*\/\(.*\),.*,.*/\1/p'))"
	}

	[ -n "$PROTO"	 ] && _nvram set wifi_proto 	"$PROTO"
	[ -n "$DEFAULTS" ] && _nvram set ff_mtu 	"1500"		# checkit
}

_profile_set_wifi_phy ()
{
	eval $(_profile local_include_vars "$@")

	case "$MODE" in
		adhoc)
			_nvram set wl0_mode     "sta"
			_nvram set wl0_infra    "0"
			_nvram set ff_bssid	"${BSSID:=02:ca:ff:ee:ba:be}"			# adhoc without fixed bssid doesn't make sense
			_nvram set wl0_closed   "0"
			_nvram set ff_noprobe   "1"						# freifunk/ff-special
			_nvram set ff_ath_param "countrycode=608 outdoor=1 bstuck_thresh=1"	# atheros/freifunk-special! 608=phillipines, 276=germany
		;;
		ap|master|offer)			# todo: wl scansuppress 1 -> wl scansuppress
			_nvram set wl0_mode     "ap"	# 	wl interference 2 ; 0=off|1=ism_protection|2=wlan_protection|3=auto
			_nvram set wl0_infra    "1"
			_nvram set wl0_closed   "0"
			_nvram set ff_noprobe   ""
			_nvram set ff_ath_param ""
			_nvram set ff_bssid	""
		;;
		managed|client)
			_nvram set wl0_mode     "sta"
			_nvram set wl0_infra    "1"
			_nvram set ff_noprobe   ""
			_nvram set ff_ath_param ""
			_nvram set ff_bssid	""
		;;
	esac

	[ -n "$CHANNEL" ] && {
		if [ $CHANNEL -lt 15 ]; then		# fixme! there is also 7,8,9,11,12,13 in band_a!
			_nvram set wl0_phytype "g"
		else
			_nvram set wl0_phytype "a"
		fi
	
		_nvram set wl0_channel "$CHANNEL"
	}

	[ -n "$DEFAULTS" ] && {
		_nvram set ff_txpwroverride	"1"		# http://wireless.subsignal.org/index.php?title=SvenOlaTuecke-Mail2007sep12-sendeleistung%2Ceinheiten%2Cwl%2Cwifi%2Cbroadcom
		_nvram set pa0maxpwr		"0x48"		# http://wireless.subsignal.org/index.php?title=SvenOlaTuecke-Mail2007sep12-sendeleistung%2Ceinheiten%2Cwl%2Cwifi%2Cbroadcom
								# must be 0x4e ?
		_nvram set wl0_country_code 	"DE"		# contry-code madwifi? ALL?
		_nvram set wl0_radio 		"1"		# 0 = wifi_off
		_nvram set wl0_antdiv		"0"		# antenna A
		_nvram set wl0_txant		"0"		# antenna A
		_nvram set wl0_rateset		"default"	# all = all rates are basic rates; default = driver defaults
		_nvram set wl0_rate		"0"		# 0=auto, 1000000 = 1mbit
		_nvram set wl0_bcn 		"100"		# beacon rate [100 = 10/s] default=100
		_nvram set wl0_dtim		"1"		# interval of Delivery Traffic Indication Message's
		_nvram set wl0_frag		"2346"		# frag-threshold ("schwelle"), max=2346=off (have seen 2352 in madwfi?!)
		_nvram set wl0_rts		"2347"		# rts-threshold ("schwelle"), frag+1 -> no rts/cts
		_nvram set wl0_txpwr		"58"		# [1/4 dBm = qdBm], 58 qdBm = 28 mW -> _wifi math_mw2qdbm
		_nvram set wl0_gmode_protection "off"		# CTS on/off
		_nvram set wl0_frameburst	"off"		# on/off
		_nvram set wl0_gmode		"0"		# 0 = Bonly/LegacyB, 1 = Auto/B&G, 2 = Gonly (longslot), 3 = BDeferred,
								# 4 = performanceG (shortslot), 5 = LRS (left-right-singular-vectors?),
								# 6 = Afterburner
	}							# http://wireless.subsignal.org/index.php?title=WLAN-Optimierung
	
	[ -n "$ESSID"    ] && _nvram set wl0_ssid       "$ESSID"
	[ -n "$TXPOWER"  ] && _nvram set wl0_txpwr      "$TXPOWER"	# [1/4 dBm = qdBm] -> convert_mw2dbm() in functions_wifi_fff+
	[ -n "$BEACON"   ] && _nvram set wl0_bcn        "$BEACON"	# beacon rate [100 = 10/s] default=100
	[ -n "$MRATE"    ] && _nvram set wl0_mrate      "$MRATE"	# default = 5500000, can be 'auto'

	[ -n "$RTS"      ] && {
		[ "$RTS" = "off" ] && RTS="2347"
		_nvram set wl0_rts "$RTS"				# 2347 = off = empty?
	}

	[ -n "$DISTANCE" ] && {
		[ "$DISTANCE" -le 2000 ] && DISTANCE=""			# for ACK-Timing, [meter], normal 2000 // fixme! (needs some research)
		_nvram set wl0_distance "$DISTANCE"
	}

	[ -n "$FRAG"     ] && {
		[ "$FRAG" = "off" ] && FRAG=2346
		_nvram set wl0_frag       "$FRAG"			# 256...2346 (=off)
	}

	[ -n "$PREAMBLE" ] && _nvram set wl0_plcphdr	"$PREAMBLE"	# should be internally set by GMODE-selection?
	[ -n "$GMODE"    ] && _nvram set wl0_gmode      "$GMODE"	# needs more abstraction
}

_profile_set_olsr ()
{ 
	eval $(_profile local_include_vars "$@")

	[ -n "$DEFAULTS" ] && {
		_nvram set ff_hna4 	  "$OLSR_HNA"
		_nvram set ff_qos	  "2"			# hysteresis or LQ?
		_nvram set ff_policyrt	  "0"			# 1 = my gateway only for me
		_nvram set ff_arprefresh  "1"
		_nvram set ff_nameservice "1"
		_nvram set ff_httpinfo	  "1"
		_nvram set ff_olsrspeed	  "5"
		_nvram set ff_dijklim	  "1"			# LinkQualityDijkstraLimit / activate dijkstra-limit -> SPEED * 2
		_nvram set ff_fisheye  	  "1"
		_nvram set ff_ip4broad 	  "255.255.255.255"

		# _nvram set ff_ping
		# _nvram set ff_service
		# _nvram set ff_bmf
		# _nvram set ff_lqmult
		# _nvram set ff_will
	}
}

_profile_set_fff_extensions ()
{
	eval $(_profile local_include_vars "$@")

	[ -n "$DEFAULTS" ] && {
		_nvram set fff_menu 		"full" 		# "switch between 'simply', 'expert' and 'full' menu"
		_nvram set fff_adblock 		"true"		# "unset/true | 0/off/false"
		_nvram set fff_node_number 	"$NODE_NUMBER"
		_nvram set fff_autofwupdate 	"stable"	# "unset/stable | testing | beta"
	}
}

_profile_set_packetfilter ()
{
	eval $(_profile local_include_vars "$@")

	[ "$FIREWALL" = "off" ] && {
		_nvram set ff_wanssh "1"
		_nvram set ff_wanhttp "1"
		_nvram set ff_wanicmp "1"
		_nvram set fw_disable "1"
	}

	[ -n "$IGNORE" ] && _nvram set ff_ign "$IGNORE"

	[ "$NAT" = "off" ] && {
		_nvram set ff_nonat "1"
	}
}

_profile_set_lan ()
{
	eval $(_profile local_include_vars "$@")
		
	[ -n "$IP" ] && {
		_nvram set lan_proto	"static"
		_nvram set lan_ipaddr	"${IP%/*}"
		_nvram set lan_netmask	"$( _net cidr2mask ${IP#*/} )"	# 27 -> 255.255.255.224
	}

	[ -n "$DHCP" ] && {	# DHCP="STARTIP/PRE,NUM,LEASETIME"
	
		_nvram set dhcp_start 	"$(echo $DHCP|sed -n 's/^.*\.\([0-9]*\)\/.*/\1/p')"	# e.g. '98' (octett4)
		_nvram set dhcp_num	"$(echo $DHCP|sed -n 's/^.*,\([0-9]*\),.*/\1/p')"	# e.g. '29' (how much?)
		_nvram set dhcp_lease   "$(echo $DHCP|sed -n 's/^.*,.*,\(.*\)/\1/p')"		# e.g. '2h' (leasetime)
	}
	
	[ -n "$PROTO" ] && _nvram set lan_proto    "$PROTO"
	[ -n "$GW"    ] && _nvram set lan_gateway  "$GW"
	[ -n "$MAC"   ] && _nvram set lan_hwaddr   "$MAC"
	[ -n "$ROUTE" ] && _nvram set static_route "$ROUTE" 	# ->S40network
}

_profile_set_wan ()
{
	eval $(_profile local_include_vars "$@")
	
	[ -n "$IP" ] && {
		_nvram set wan_proto	"static"
		_nvram set wan_ipaddr	"${IP%/*}"				# 172.16.254.253
		_nvram set wan_netmask	"$( _net cidr2mask ${IP#*/} )"	# 255.255.255.252
	}
	
	[ -n "$MTU"   ] && _nvram set wan_mtu		"$MTU"		# for pppoe
	[ -n "$GW"    ] && _nvram set wan_gateway	"$GW"
	[ -n "$PROTO" ] && _nvram set wan_proto 	"$PROTO"	# DHCP, pppoe
}

_profile_remap_devs ()		# this one is tricky, but we want boardvalues-2-boardtype/ifnames (and vicaversa) only at one point
{				# _profile remap_devs <empty> or	-> function calls himself with interface-values
				# _profile remap_devs get_model	-> function outputs only vendor/model

	local FUNC="profile_remap_devs"
	local NEW_MAC

	[ "$8" = "get_model" ] && {
		echo "ROUTER_VENDOR='${10}';ROUTER_MODEL='${11}';ROUTER_NO='$9'"
		return
	}

	[ -z "$8" ] && {
		local PHYADDR="$( nvram get et0phyaddr )"
		local BOARDNUM="$( nvram get boardnum )"
		local BOARDTYPE="$( nvram get boardtype | sed 's/^0x[0]*//' )"		# 0x0467 -> 467
		local BOARD="${PHYADDR}_${BOARDTYPE}_${BOARDNUM}"
		
		case "$BOARD" in 
			"30_467_00")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "0" "Buffalo" "WHR-HP-G54" ;;
			"30_467_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "3 2 1 0 5*"   "4 5" $1 "1" "Linksys" "WRT-54-GL" ;;
			"30_708_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "2" "Linksys" "WRT-54-G v3.0" ;;
			"30_101_42")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "0 5" $1 "3" "Linksys" "WRT-54-G v2.0" ;;
			"30_42f_45")		_$FUNC "vlan0" "br0" "eth2" "eth2" "vlan1" "1 2 3 4 5*"   "0 5" $1 "4" "Asus"    "WL-500g premium v1" ;;											
			"30_48E_45")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "1 2 3 4 5*"   "4 5" $1 "D" "Asus"    "WL-500g premium v2" ;;	# ???
			"30_101_")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "0 1 2 3 5*"   "4 5" $1 "5" "Siemens" "SE505 v2" ;;
			 "0_bcm94710r4_100")	_$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  ""             ""    $1 "6" "Siemens" "SE505 v1" ;;						
			"30_bcm94710dev_42")	_$FUNC "vlan2" "br0" "eth2" "eth2" "vlan1" ""             ""    $1 "7" "Allnet"  "0277" ;;
			"30_bcm94710ap_44")	_$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  "0 1 2 3 4 5u" ""    $1 "8" "Dell"    "Truemobile 2300" ;;
			 "0_bcm94710dev_asusX")	_$FUNC "eth1"  "br0" "eth2" "eth2" "none"  ""             ""    $1 "9" "Asus"    "WL-HDD (Yakumo_Storage)" ;;
			"30_bcm94710dev_2")	_$FUNC "eth1"  "br0" "eth2" "eth2" "none"  ""             ""    $1 "A" "Linksys" "WAP v1.0" ;;
			"30_48e_00")		_$FUNC "vlan0" "br0" "eth1" "eth1" "vlan1" "0 1 2 3 5*"   "0 5" $1 "B" "Buffalo" "WHR-G125" ;;
			"30_bcm94710dev_asusX") _$FUNC "eth0"  "br0" "eth2" "eth2" "eth1"  ""             ""    $1 "C" "Asus"    "WL-500g deluxe" ;;
			*)
				[ "$1" = "get_model" ] && {
					echo "ROUTER_VENDOR='unknown';ROUTER_MODEL='unknown'"
					return
				}
				
				_log do $FUNC daemon debug "unknown vendor/model"
			;;
		esac
	
		return
	}

	_log do $FUNC daemon debug "vendor/model/no: '${9}' / '${10}' / '${8}'"

	case $8 in
		1|2|3)	# WRT-54-GL / G3.0 / G2.0
			# factory (G3.0)
			# et0macaddr=00:90:4C:60:00:2A
			# il0macaddr=00:90:4c:5f:00:2a
		
			NEW_MAC="$( _sanitizer do "$(grep ..:..:..:..:..:.. /dev/mtd/0ro | tail -n1)" mac lowercase )"
			_nvram set  lan_hwaddr "$NEW_MAC"							# +0 = lan
			_nvram set wifi_hwaddr "$( _profile mac_plus $(_profile mac_plus $NEW_MAC) )"	# +2 = wifi

			_nvram set  il0macaddr $(nvram get wifi_hwaddr)		# il0macaddr <= wifi_hwaddr 
			_nvram set  et0macaddr "$NEW_MAC"			# et0macaddr <=  lan_hwaddr
			
			[ -z "$(nvram get wan_hwaddr)" ] && {
				_nvram set  wan_hwaddr "$( _profile mac_plus $NEW_MAC )"			# +1 = wan
			}
		;;
		4)	# asus wl-500g premium v1
			#
			# et0macaddr=00:1d:60:46:97:09 (which is individual)
			# et1macaddr=40:10:18:00:00:2d (is default, and used by the ETHERNET_PHY = eth1)
			#
			# example of correct values for an router with original wifi-card (sadly, no relation between values)
			# wifi_hwaddr=00:1d:60:46:81:83
			#  lan_hwaddr=00:1d:60:46:97:09
			#
			# if wifi-card is changed, there is no need to set wifi_hwaddr,
			# but if wifi-card is original, then wifi_mac=lan_mac !!!	// we have to test this
			
			_log do $FUNC daemon debug "fixme! if wifi-card is original, you have to set wifi_hwaddr"	
			
			# _nvram set lan_hwaddr $(nvram get et0macaddr)
		;;
		8)	# dell2300				// fixme! idea: if wifi is up, apply ($WIFIMAC - 2) to LAN
			# factory-settings:
			# et0macaddr=00:90:4c:49:00:2c
			# et1macaddr=00:90:4c:4a:00:2c
			
			[ -n "$(nvram get wan_hwaddr)" ] && _nvram set wan_hwaddr		# its not possible to set wan_hwaddr!
			
			if [ "$( _sanitizer do "$(nvram get et1macaddr)" lowercase )" != "00:90:4c:4a:00:2c" ]; then
				[ "$(nvram get et1macaddr)" != "(nvram get lan_hwaddr)" ] && {
					_nvram set lan_hwaddr "$(nvram get et1macaddr)"
				}
			else
				# et0macaddr=...wifi?...doesnt matter, is automatically set correctly
				# et1macaddr=00:90:4b:39:7b:5e
				# lan_hwaddr=00:90:4b:39:7b:5e
			
				_log do $FUNC daemon alert "must be set manually: It is the mac on the back/downside in the middle, near barcode -2"
				_log do $FUNC daemon alert "use this commands: 'mymac=00:90:4b:xx:xx:xx ; nvram set et1macaddr=\$mymac'"
				_log do $FUNC daemon alert "and: 'nvram set lan_hwaddr=\$mymac ; nvram commit ; reboot'"
			fi
		;;
		9|C)
			# Asus WL-HDD / Yakumo Storage  + WL-500g deluxe
			# et0macaddr     =>  lan_hwaddr
			# et1macaddr + 2 => wifi_hwaddr = lan_hwaddr (2b + 2 =2d)

			NEW_MAC="$( _sanitizer do "$(sed -n '/..:..:..:..:..:../{p;q}' /dev/mtd/0ro)" mac lowercase )"
			_nvram set  lan_hwaddr "$NEW_MAC"
			_nvram set wifi_hwaddr "$( _profile mac_plus $(_profile mac_plus $NEW_MAC) )"	# +2

			_nvram set  et0macaddr "$NEW_MAC"			# et0macaddr <=  lan_hwaddr
			_nvram set  et1macaddr $(nvram get wifi_hwaddr)		# et1macaddr <= wifi_hwaddr

		;;
	esac

	local LIST="lan_ifnames lan_ifname wl0_ifname wifi_ifname wan_ifname vlan0ports vlan1ports" # + wan_device=wan_ifname?
	local CHANGE=""
	local ENTRY=""
	local VALUE=""
	local ARG_NUM=0
	
	for ENTRY in $LIST ; do {
		ARG_NUM=$(( ARG_NUM + 1 ))
		eval "VALUE=\"\$${ARG_NUM}\""			# get arg_1...2...n in $VAR
		_nvram set "$ENTRY" "$VALUE" || CHANGE="true"
	} done
	
	[ -n "$CHANGE" ] && return 1
}

_profile_mac_plus ()
{
	local MAC="$( _sanitizer do "$1" lowercase )"
	local MAC_LAST_BYTE="$( echo $MAC | cut -b 17 )"
	local MAC="$( echo $MAC | cut -b 1-16 )"

	MAC_LAST_BYTE="$( echo $MAC_LAST_BYTE | sed 'y/0123456789abcdef/zyxwvutsrqonmlkj/' | sed 'y/zyxwvutsrqonmlkj/123456789abcdef0/' )"

	[ "$MAC_LAST_BYTE" = "0" ] && {				# cf + 1 = d0 !
		MAC_LAST_BYTE="$( echo $MAC | cut -b 16 )"
		MAC_LAST_BYTE="$( echo $MAC_LAST_BYTE | sed 'y/0123456789abcdef/zyxwvutsrqonmlkj/' | sed 'y/zyxwvutsrqonmlkj/123456789abcdef0/' )"
		MAC="$( echo $MAC | cut -b 1-15 )"
		echo "${MAC}${MAC_LAST_BYTE}0"
		return
	}
	
	echo "${MAC}${MAC_LAST_BYTE}"
}
