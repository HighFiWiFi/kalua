_speedtest_do ()
{
	local FUNC="speedtest_do"
	local DIR="/tmp/STATS/SPEEDTEST"	# fixme! make use of 'trap'

	[ -d "$DIR" ] || mkdir -p "$DIR"

	local IP_LOCAL="${1:-$WIFIADR}"		# [ip4]
	local KEYWORD="${2:-gateway}"		# [ip4 = IP_TARGET] or keyword, e.g. neighs_wifi_onehop, gateway, inetgateway?
	local METHOD="${3:-tcpdownload}"	# keyword, e.g. tcpdownload, netperfTCP, netperfUDP
	local DURATION="${4:-10}"		# [seconds]
	local INITIATOR="${REMOTE_ADDR:-local}"

	_log do $FUNC daemon debug "$IP_LOCAL -> $KEYWORD method '$METHOD', duration $DURATION sec, initiated from $INITIATOR"

	case "$IP_LOCAL" in
		$WIFIADR|$LANADR|$WANADR) : ;;
		*)
			local URL="http://$IP_LOCAL/cgi-bin-tool_fff+?OPT=speedtest&ARGS=$IP_LOCAL+$KEYWORD+$METHOD+$DURATION"
			_log do $FUNC daemon debug "fetching '$URL'"
			wget -qO - "$URL"
			return
		;;
	esac

	local MAXCOST=7000	# fixme! hardcoded?
	local IP_LOCAL IP_TARGET LOAD_BEGIN LOAD_END UNIXTIME HUMANTIME METRIC_BEGIN METRIC_END OLSR_COST_BEGIN OLSR_COST_END SPEED DEVTYPE
	local PID_WGET PACK BYTES REST METHOD IP_LIST
	local RATE RATE_MIN RATE_MAX RATE_AVG RATE_SAMPLES
	local DURATION DURATION_REAL DURATION_COUNTER

	case "$METHOD" in
		*)
			METHOD="tcpdownload"		# fixme! here we must track 'rate' of device from which we download
		;;
	esac

	case "$KEYWORD" in
		neighs_wifi_onehop)
			IP_LIST="$( neigh | sed -n 's/^.* ~~1~~ \([0-9\.]*\).*/\1/p' )"
		;;
		gateway)
			_net local_inet_offer && {
				_log do $FUNC daemon info "no gatewaytest, because we _are_ the gateway 8-)"
				return
			}				

			IP_LIST="$( _sanitizer do "$( ip route list exact 0/0 )" ip4 )"
		;;
		inetgateway)
			IP_LIST="$( sed -n 's/^.* GW=\([0-9\.]*\).*/\1/p' /tmp/GATEWAY_CHECK_RECENT )"
		;;
		*)
			_sanitizer do "$KEYWORD" ip4 check || return
			IP_LIST="$KEYWORD"
		;;
	esac

	# fixme! METHOD not implemented yet
	# fixme! DIRECTION not implemented yet
	# fixme! onehop, but metric >1 && continue
	# fixme! calculate EFFECTIV_PROCENTUAL_THROUGHPUT -> 34 mbit rate_avg, but 207kb/s -> xy% from max

	for IP_TARGET in $IP_LIST; do {

		[ "$IP_LIST" != "$KEYWORD" ] && {
			_log do $FUNC daemon debug "$IP_LOCAL -> $IP_TARGET method '$METHOD', duration $DURATION sec, initiated from $INITIATOR"
		}

		iptables -I INPUT -p tcp --sport 80 -d $IP_LOCAL
		iptables -I OUTPUT -p tcp --dport 80 -d $IP_TARGET
	
		_stopwatch start speedtest_$$				############## START ###########

		wget -qO /dev/null "http://$IP_TARGET/cgi-bin-dev-zero.bin" &
		LOAD_BEGIN="$( _system load 1min )"
		PID_WGET="$( ps ax | fgrep "wget -qO /dev/null http://$IP_TARGET" | head -n1 | sed -n 's/^[ ]*\([0-9]*\).*/\1/p'  )"		# fixme! use one sed

		trap "kill $PID_WGET; return" SIGINT

		eval "$( neigh get_nlq $IP_TARGET speedtest )"		# LQ|NLQ|COST
		OLSR_COST_BEGIN=$COST

		UNIXTIME="$(  _system date unixtime )"
		HUMANTIME="$( _system date humanreadable )"
		METRIC_BEGIN="$( _net ip2metric $IP_TARGET )"
		DEVTYPE="$( _net dev_type $( _net ip2dev $IP_TARGET ))"

		while [ ${DURATION_COUNTER:=0} -lt $(( $DURATION / 2 )) ]; do {

			[ "$DEVTYPE" = "wifi" ] && {

				RATE="$( wl -i $WIFIDEV rate | cut -d' ' -f3 )"		# fixme! use _wifi()-abstraction
				case "${RATE:=0}" in
					5.5) RATE=5500 ;;
					  0) RATE=1000 ;;
					  *) RATE="${RATE}000" ;;			# rate is convert to [Kilobit]
				esac
				
				[ $RATE -gt ${RATE_MAX:-0}	] && RATE_MAX="$RATE"
				[ $RATE -lt ${RATE_MIN:-600000}	] && RATE_MIN="$RATE"
				RATE_AVG="$(( ${RATE_AVG:-0} + $RATE ))"
				RATE_SAMPLES="$(( ${RATE_SAMPLES:-0} + 1 ))"
				
				_log do $FUNC daemon debug "rate: $RATE"
			}

			sleep 1
			DURATION_COUNTER="$(( $DURATION_COUNTER + 1 ))"
		} done
		RATE_AVG="$(( ${RATE_AVG:-0} / ${RATE_SAMPLES:-1} ))"

		LOAD_END="$( _system load 1min )"
		METRIC_END="$( _net ip2metric $IP_TARGET )"
		kill $PID_WGET

		eval "$( neigh get_nlq $IP_TARGET speedtest )"		# LQ|NLQ|COST
		OLSR_COST_END=$COST
	
		DURATION_REAL="$( _stopwatch stop speedtest_$$ )"	############## END #############
		
		eval $( iptables -nxvL INPUT 2>/dev/null | head -n3 | tail -n1 | while read PACK BYTES REST; do echo "BYTES=$BYTES"; done )
		
		SPEED="$(( $BYTES / $DURATION_REAL / 10 ))"		# kilobytes / second ; 1 Kilobyte = 1000 Bytes

		echo "IP_LOCAL=$IP_LOCAL IP_TARGET=$IP_TARGET SPEED=$SPEED RATE_AVG=$RATE_AVG RATE_MIN=${RATE_MIN:-0} RATE_MAX=${RATE_MAX:-0} BYTES=$BYTES METHOD=$METHOD LOAD_BEGIN=$LOAD_BEGIN LOAD_END=$LOAD_END UNIXTIME=$UNIXTIME HUMANTIME=$HUMANTIME INITIATOR=$INITIATOR METRIC_BEGIN=$METRIC_BEGIN METRIC_END=$METRIC_END OLSR_COST_BEGIN=$OLSR_COST_BEGIN OLSR_COST_END=$OLSR_COST_BEGIN DURATION=${DURATION}000 DURATION_REAL=${DURATION_REAL}0 DEVTYPE=$DEVTYPE"

		iptables -D INPUT -p tcp --sport 80 -d $IP_LOCAL
		iptables -D OUTPUT -p tcp --dport 80 -d $IP_TARGET

		_log do $FUNC daemon info "$IP_LOCAL -> $IP_TARGET @ $SPEED Kilobytes/sec, method '$METHOD'"
	} done
}

_speedtest_get ()
{
	local MAC="$1"
	local METHOD="$2"
	local DIRECTION="$3"

	# MAC? IP?

	# /tmp/STATS/SPEEDTEST/$MAC/$METHOD1/$UP $DOWN
	
	:
}
