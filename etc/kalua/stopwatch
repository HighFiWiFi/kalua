_stopwatch_start ()
{
	local job="${1:-unset}"
	local file="/tmp/STOPWATCH_${job}_$$"
	local up rest

	read up rest </proc/uptime
	echo "${up%.*}${up#*.}" >$file
}

_stopwatch_seconds2humanreadable()
{
	local integer="$1"
	local humanreadable min sec hours

	min="$(( $integer / 60 ))"
	sec="$(( $integer % 60 ))"

	if [ $min -gt 60 ]; then
		hours="$(( $min / 60 ))"
		min="$(( $min % 60 ))"

		humanreadable="${hours}h ${min}min ${sec}sec"
	else
		humanreadable="${min}min ${sec}sec"
	fi

	echo "$humanreadable"
}

_stopwatch_stop ()		# OUT1: centyseconds = seconds/100
{
	local FUNC="stopwatch_stop"
	local CONTEXT="${1:-unset}"
	local KEYWORD="$2"				# e.g. quiet
	local object_count="$3"				# e.g. 32
	local object_type="$4"				# e.g. tickets

	local FILE="/tmp/STOPWATCH_${CONTEXT}_$$"
	local up rest DIFF humanreadable
	local START END OUT INTEGER REST message

	read up rest </proc/uptime

	[ ! -e "$FILE" ] && {
		_log do $FUNC daemon info "timefile '$FILE' not found - abort"
		return 1
	}

	read START <$FILE
	rm $FILE
	END="${up%.*}${up#*.}"

	OUT="$(( $END - $START ))"
	REST="$(( $OUT % 100 ))"
	[ $REST -lt 10 ] && REST="0$REST"
	INTEGER="$(( $OUT / 100 ))"

	[ $INTEGER -gt 60 ] && {
		humanreadable="$( _stopwatch seconds2humanreadable $INTEGER )"
		humanreadable=" (${humanreadable})"
	}

	[ -n "$object_type" -a -n "$object_count" ] && {
		message="$(( ${object_count}00 / $OUT )).$(( ${object_count}00 % $OUT ))"	# 32 tickets / 12.12sec 
		message=" ($message $object_type/sec)"						# 3200 / 1212 = 2.64
	}

	_log do $FUNC daemon info "task '$CONTEXT' lasts $INTEGER.$REST seconds${humanreadable}${message}"

	[ "$KEYWORD" != "quiet" ] && echo $OUT
}
