_links_firmware_url_get ()		# ARG1: stable|beta|testing|empty
{					#       stable|beta|testing <crc>
					#       version_installed
					#       version_current <stable|beta|testing>
	local COMMAND="$1"		#	tarball 
	local KEYWORD="$2"		#	olsr_whitelist
	
	local UPDATEMODE="$( _firmware updatemode )"	
	local BASE="$( nvram get fff_url_firmware )"		# http://intercity-vpn.de/firmware
	local MYKERNEL="$( uname -a | cut -d' ' -f3 )"		# 2.4.30
	local ARCHITECTURE="broadcom"				# fixme! better use mips + endianlittle/el...?

	[ -e "/tmp/PPPOE_NEEDED" ] && local OPT="_opt=PPPOE"

	local WIFI_VENDOR WIFI_MODEL WIFIDRIVER
	[ -z "$WIFI_VENDOR" ] && eval $( _wifi vendor_and_model )
	
	case "$KEYWORD" in
		stable|beta|testing)
			UPDATEMODE="$KEYWORD"
		;;
	esac

	case $WIFI_VENDOR in					# BROADCOM, BROADCOMFULL, B43, RT73, MADWIFI, NONE
		atheros)
			WIFI_DRIVER="MADWIFI"
		;;
		broadcom)					# fixme! send chipset, server must decide which driver fits
			if _wifi driver_version $WIFIDEV | grep -q wl-adv ; then
				WIFI_DRIVER="BROADCOMFULL"
			else
				WIFI_DRIVER="BROADCOM"	
			fi
		;;
		*)
			WIFIDRIVER="NONE"
		;;
	esac

	[ -z "$BASE" ] && BASE="http://intercity-vpn.de/firmware"

	case "$COMMAND" in
		olsr_whitelist)
			echo "$( nvram get fff_url_network )/whitelist/"
		;;
		tarball)
			echo -n "$BASE/$ARCHITECTURE/images/$UPDATEMODE/tarball.tgz"
		;;
		version_current)
			local GENERATED VERSION KERNEL MAINTAINER OUTPUT
			
			OUTPUT="$( _wget do "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | head -n1 )"
			[ -n "$OUTPUT" ] && eval $OUTPUT
			
			echo -n "${VERSION:=000000}"
		;;
		version_installed)
			echo -n "${FFF_PLUS_VERSION:=000000}"
		;;
		*)
			case "$COMMAND" in
				stable|beta|testing)
					UPDATEMODE="$COMMAND"
				;;
			esac
		
			local FILEWISH="linux=${MYKERNEL}_format=TRX_wifidriver=${WIFI_DRIVER}${OPT}.bin"
			
			case "$KEYWORD" in
				crc)
					local GENERATED VERSION KERNEL MAINTAINER CRC
		
					CRC="$( wget 2>/dev/null -qO - "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | grep "'$FILEWISH'" )"
					[ -n "$CRC" ] && CRC="$( echo "$CRC" | cut -d' ' -f2 )"
				
					echo -n "${CRC:=0}"
				;;
				*)
					echo -n "$BASE/$ARCHITECTURE/images/$UPDATEMODE/$FILEWISH"
				;;
			esac
		;;
	esac
}
