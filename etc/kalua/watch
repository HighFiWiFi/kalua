_watch_archivsize ()
{
	local FILE="$1"
	local MAX_LINES="$2"
	local TEMP="/tmp/watch_archivsize_temp_$$"
	
	tail -n $MAX_LINES "$FILE" >"$TEMP"
	mv "$TEMP"  "$FILE"
}

_watch_system_time ()		# firmware-build-date is newer than unixtime?
{				# firmware-build-date + 1 year is older than date? (yes, i have seen _many_ routers with date 2020/2037!) -> set time
	local NTP_TIME_OK=	# fallback 347681 = 2009'aug-30                         

	local UNIXTIME="$( _system date unixtime )"
	      UNIXTIME="${UNIXTIME:=0}"

	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 ))            -gt $UNIXTIME ] && NTP_TIME_OK="false"
	[ $(( ${FFF_PLUS_VERSION:=347681} * 3600 + 135000000)) -lt $UNIXTIME ] && NTP_TIME_OK="false"

	_ntp set is_unset && NTP_TIME_OK="false"
	
	[ "$NTP_TIME_OK" = "false" ] && {
		_ntp set force

		[ "$(( ${FFF_PLUS_VERSION:=347681} * 3600 ))" -gt "$( _system date unixtime )" ] && {
			_log do set_time daemon info "could'nt set time - trying poor mens timeserver - fixme!"
			# /www/cgi-bin-speed t          # fixme!
		}
	}
}

_watch_wifi_mode ()		# check e.g. adhoc in config but managed in real?
{
	local MODE_REAL="$( _wifi mode $WIFIDEV config )"
	local MODE_CONF="$( _wifi mode $WIFIDEV )"

	[ "$MODE_REAL" != "$MODE_CONF" ] && {
		_wifi phy_restart $WIFIDEV "compare_config_and_real_wifi_mode: diff, real/conf: '$MODE_REAL/$MODE_CONF'" alert
		return 1
	}
}

_watch_netserver ()
{
	[ -x /usr/bin/netserver ] && {
		pidof netserver >/dev/null || {
			_log do watch_netserver daemon info "netserver offline, restarting"
			/etc/init.d/S*netserver start
		}
	}
}

_watch_vpnc ()
{
	local PID
	
	PID="$( pidof vpnc )" && {                                                                                                                                              
		_log do vpnc_helper daemon info "petting PID '$PID' - fixme!"                                                                                                 
		# kill -SIGHUP "$PID"           # fixme! (howto reconnect?)                                                                                                   
	}              
}

_watch_hanging_command ()
{
	local COMMAND="$1"						# e.g. 'wget' or 'scp'
	local FUNC="watch_hanging_command"
	local COMMAND_PID="$( pidof $COMMAND | cut -d' ' -f1 )"		# any running process?
	
	[ -z "$COMMAND_PID" ] && {
		_log do $FUNC daemon debug "no running '$COMMAND'-process"
		return 0
	}
	
	local COMMAND_CMD="$( cat /proc/$COMMAND_PID/cmdline )"		# remember exact commandline
	local OLD_PID
	local OLD_CMD
	local FILE1="/tmp/maybe_hanging_${COMMAND}_process_id"
	local FILE2="/tmp/maybe_hanging_${COMMAND}_process_cmd"

	[ -e "$FILE1" ] && OLD_PID="$( cat $FILE1 )"
	[ -e "$FILE2" ] && OLD_CMD="$( cat $FILE2 )"

	_log do $FUNC daemon debug "found '$COMMAND'-process '$COMMAND_PID' / '$COMMAND_CMD'"

	if [ "$OLD_PID" = "$COMMAND_PID" ] && [ "$OLD_CMD" = "$COMMAND_CMD" ]; then

		_log do $FUNC daemon err "killing '$COMMAND_CMD'"
		kill $COMMAND_PID
		sleep 3
		
		[ -e "/proc/$COMMAND_PID" ] && {
			_log do $FUNC daemon crit "still hanging, killing hard"
			kill -9 $COMMAND_PID
			sleep 3
		
			[ -e "/proc/$COMMAND_PID" ] && {
				_system reboot_safe "$FUNC() still hanging '$COMMAND'"
				return
			}
		}
			
		_log do $FUNC daemon info "successfully killed '$COMMAND'-process"
		return
	fi

	_log do $FUNC daemon debug "remember for next check '$COMMAND_PID' / '$COMMAND_CMD'"
	echo >$FILE1 "$COMMAND_PID"
	echo >$FILE2 "$COMMAND_CMD"
}

_watch_hanging_netcat ()
{
	local FUNC="watch_hanging_netcat"
	local PID="$( pidof nc )"
	local OLD="/tmp/maybe_hanging_netcat_process_id"
	
	if [ -z "$PID" ]; then
		[ -e "$OLD" ] && rm $OLD
		return
	else
		if [ -e "$OLD" ]; then
			[ "$PID" = "$( cat "$OLD" )" ] && {
				_log do $FUNC daemon err "killing '$PID'"
				kill "$PID"
				rm "$OLD"
			}
		else
			echo "$PID" >"$OLD"
		fi
	fi
}

_watch_hanging_broadcom_wifi ()				# under unclear circumstances the "wifi"-program segfaults
{							# and there are after some time hanging 'wifi'-processes
	[ "$( _system pids_count wifi )" -gt 1 ] && {

		sleep 10
	
		[ "$( _system pids_count wifi )" -gt 1 ] && {
			_system reboot_safe "strange_wifi() several wifi-PIDs!"
		}
	}
}

_watch_hanging_xrelayd ()
{
	local FUNC="watch_hanging_xrelayd"
	
	_linklocal wifi_users $WIFIDEV >/dev/null && {
		_log do $FUNC daemon debug "no action, connected wifi-clients online"		# fixme! workaroung - check also LAN?
		return
	}

	[ "$( _system pids_count xrelayd )" -gt 1 ] && {		# can be the case, after too many simultaneously https-connections
	
		_log do $FUNC daemon info "trying to end some processes and restart daemon"
		killall xrelayd
		sleep 10
	
		if [ "$( _system pids_count xrelayd )" -gt 0 ]; then
	
			_log do $FUNC daemon info "still some processes around"
	
			for PID in $( pidof xrelayd ); do {
				kill -9 $PID
			} done
	
			if [ "$( _system pids_count xrelayd )" -gt 0 ]; then
				_system reboot_safe "can't end some xrelayd-processes"
			else
				/etc/init.d/S70secureadmin start
			fi
		else
			/etc/init.d/S70secureadmin start
		fi
	}
}

_watch_rrd_integrity ()
{
	touch /tmp/rrd_plausi_check					# needs some test
	for FILE in $(find /tmp/rrd -name *.rrd 2>/dev/null); do {
		[ /tmp/rrd_plausi_check -ot $FILE ] && {
			_log do rrd_plausi_check daemon alert "rrd-file is in future - reinit for '$FILE'"
			touch "$FILE"
		}
	} done
}

_watch_zombie_processes ()
{
	[ "$( ps | sed -n 's/^[^Z]*\(Z\)[^Z]*\[.*\].*/\1/p' | wc -l )" -gt 50 ] && {
		_system reboot_safe "more than 50 zombie processes!"
	}
}

_watch_flash_free_space ()
{
	[ $( _system flash_free ) -lt 150 ] && {
		[ ! -e /tmp/REPO_REMOVED ] && {
			_log do remove_repos_if_low_space daemon info "only $( _system flash_free ) kb free - removing files in /usr/lib/*pkg/lists/"

			for FILE in /usr/lib/*pkg/lists/* /www/backup_nvram_* /www/safed_syslog_fff+ /www/everlasting_syslog.txt; do {
				[ -e "$FILE" ] && {
					_log do remove_repos_if_low_space daemon info "only $( _system flash_free ) kb free - removing '$FILE' with $( _file size "$FILE" ) bytes"
					rm "$FILE"
				}
			} done
			touch /tmp/REPO_REMOVED
		}
		
		[ ! -e /tmp/SEND_ALIVE_FAILED ] && {		# fixme! (this means, data has'nt been send yet)
			rm /www/everlasting_syslog.txt		# content is already on server
		}
	}
}

_watch_dns_resolution ()	# only with existing dnsmasq and reachable internet-gateway
{
	local DNS_TESTSERVER="intercity-vpn.de"		# old was 'weimarnetz.de' -> take from fff_server_vpn_ip4 = 87.118.106.19 ?
	
	[ ! -x /etc/init.d/*dnsmasq ]		&& return 0
	_net inet_seems_stable			|| return 0

	local FUNC="watch_dns_resolution"
	
	pidof dnsmasq >/dev/null || {

		_log do $FUNC daemon error "restarting dnsmasq"

		pidof udhcpd >/dev/null && {			# otherwise the server-port cannot bound to new daemon

			_log do $FUNC daemon error "killing old DNS-server 'udhcpd'"	
			killall udhcpd
		}
		
		/etc/init.d/S*dnsmasq start
		/etc/init.d/S46fake_dns_server_fff+ remove_fake_dnsserver
		sleep 3
		
		_log do $FUNC daemon error "restarted dnsmasq, PID now '$( pidof dnsmasq )'"
	}
	
	nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {		# can we resolv a random address?

		_log do $FUNC daemon error "error in dns-resolution, sending SIGHUP to DNSmasq"
		kill -SIGHUP $( pidof dnsmasq | cut -d' ' -f1 )
		sleep 5
	
		nslookup "$( _system date unixtime ).$DNS_TESTSERVER" 2>/dev/null >/dev/null || {	# again: can we resolv a random address?

			_log do $FUNC daemon error "error in dns-resolution, restarting DNSmasq"
			/etc/init.d/S*dnsmasq restart
		}
	}
}

_watch_pppoe ()
{
	[ ! -e "/tmp/PPPOE_NEEDED" ]			&& return 0
	[ "$( uci get network.wan.proto )" = "pppoe" ]	|| return 0

	ip route list exact 0.0.0.0/0 dev ppp0 >/dev/null 2>/dev/null || {

		local FUNC="watch_pppoe"

		_log do $FUNC daemon err "no default route over ppp0 - restarting PPPoE"

		killall    pppoecd
		killall -9 pppoecd
		ifup wan
		sleep 15

		_log do $FUNC daemon err "restarted: '$( ip route list exact 0.0.0.0/0 dev ppp0 )'"
	}
}

_watch_webcam ()
{
	[ ! -e /tmp/WEBCAM ] && return
	
	pidof motion >/dev/null || {
		_log do webcam_watchdog daemon alert "restarting webcam"
		/etc/init.d/S90webcam_fff+ restart
	}
}

_watch_webserver ()
{
	local FUNC="watch_webserver"
	local SERVER

	if [ -e /usr/sbin/uhttpd ]; then
		SERVER="uhttpd"
	else
		SERVER="httpd"
	fi

	pidof $SERVER >/dev/null || {

		if pidof crond >/dev/null ; then
			_log do $FUNC daemon err "[ERR] webserver is not running - restarting"
	
			/etc/init.d/*$SERVER* start
			sleep 5
	
			_log do $FUNC daemon err "[OK] webserver PID now: '$( pidof $SERVER )'"
		else
			_log do $FUNC daemon debug "[OK] no crond - no restart"		# crondog will do it
		fi
	}
}

_watch_sshd_or_telnet ()
{
	pidof dropbear >/dev/null && return

	local FUNC="watch_sshd_or_telnet"

	pidof telnetd >/dev/null || {
	
		_log do $FUNC daemon err "dropbear nor telnetd not running - restarting"
		
		/etc/init.d/S*dropbear start
		if pidof dropbear >/dev/null; then
			
			_log do $FUNC daemon info "dropbear PID now: '$( pidof dropbear )'"
		else
			if telnetd; then
				_log do $FUNC daemon info "telnetd PID now: '$( pidof telnetd )'"
			else
				_log do $FUNC daemon err "dropbear nor telnetd not startable?"
			fi
		fi
	}
}

_watch_random_node_id ()	# check if nodenumber/id is from random pool
{
	local FUNC="watch_random_node_id"
	local URL WIFIMAC SSH_PUBKEY_FP DIRTY

	build_vars ()
	{
		local WIFIMAC="$( _sanitizer do "$( _net dev2mac $WIFIDEV )" hex )"
		local SSS_PUBKEY_FP_HEXONLY="$( _sanitizer do "$( _ssh key_public_fingerprint_get ) hex )"
		local SSH_PUBKEY_HASH="$( _file hash /etc/dropbear/dropbear_dss_host_key.pub )"
		local SSH_PUBKEY="$( _file convert_bin2hex /etc/dropbear/dropbear_dss_host_key.pub )"
		local SERVER_URL="$( uci get system.@monitoring[0].url )"

		echo "WIFIMAC=$WIFIMAC"
		echo "SSH_PUBKEY_FP=${SSS_PUBKEY_FP_HEXONLY}${SSH_PUBKEY_HASH}"	
		echo "URL='$SERVER_URL/registrator/?WIFIMAC=${WIFIMAC}&SSHPUBKEYFP=${SSH_PUBKEY_FP}&SSHPUBKEY=$SSH_PUBKEY'"
	}

	_ipsystem do | grep -q ^"NODE_NUMBER_RANDOM=true"					&& DIRTY=1
	[ "$( _ipsystem do $WIFIADR )" != "$( uci get system.@profile[0].nodenumber )" ]	&& DIRTY=1
	[ -z "$WIFIADR" ]									&& DIRTY=	# fixme!

	if [ "$DIRTY" = "1" ]; then
		eval "$( build_vars )"
		_log do $FUNC daemon info "detected ID from random pool - registering official ID from '$URL'"
	
 		[ -n "$SSH_PUBKEY_FP" ] && ID="$( _wget do "$URL" 10 )"		# fixme! no ssh  -> no ssh_pubkey_fingerprint!
 										# fixme! no wifi -> no wifimac -> no registration?
	 	_ipsystem do "${ID:-99999}" >/dev/null && {			# ipsystem() has a sanitizer built in, so don't worry 8-)
			_uci is_oldstyle && {
				_nvram set fff_node_number "$ID"
				/etc/init.d/S02check_interface_correctness_fff+ enforce_new_profile
	
				_system reboot_safe "replace_random_nodeID() new profile applied"
			}
		}

		_log do $FUNC daemon info "ID not clean: '$ID' - aborting"
	else
		if [ ! -e /tmp/REGISTRATED ] && [ "$( _system uptime min )" -gt 30 ]; then

			eval "$( build_vars )"

			[ -n "$SSH_PUBKEY_FP" ] && {
				URL="${URL}&NODE=$( uci get system.@profile[0].nodenumber )"
				ID="$( _wget do "$URL" 10 )"
			}

			if [ -n "$ID" ]; then		# fixme! OK = went fine ; REGENERATE_KEY = ...
				_log do registrator_petting daemon info "answer was '$ID' (question was: '$URL')"	
				touch /tmp/REGISTRATED
			else
				_log do registrator_petting daemon info "no answer (service '$URL' not running or no pubkey_fp?)"
			fi
		else
			[ -e /tmp/REGISTRATED ] && _log do registrator_petting daemon debug "is already lucky"
		fi
	fi
}

_watch_counter ()		# call: _watch counter "/tmp/mycounter" increment 1 max 10 || action
{
	local FILE="$1"
	local MODE="$2"		# increment|decrement|set
	local MODE_VALUE="$3"
	local OPTION="$4"	# max|min
	local OPTION_VALUE="$5"
	local VALUE

	read VALUE 2>/dev/null <"$FILE"

	case "$MODE" in
		increment) VALUE="$(( ${VALUE:-0} + $MODE_VALUE ))" ;;
		decrement) VALUE="$(( ${VALUE:-0} - $MODE_VALUE ))" ;;
		set) VALUE="$MODE_VALUE" ;;
		*) return ;;
	esac

	echo $VALUE >"$FILE"

	case "$OPTION" in
		max) [ $VALUE -ge $OPTION_VALUE ] && return 1 ;;
		min) [ $VALUE -le $OPTION_VALUE ] && return 1 ;;
	esac

	return 0
}

_watch_topusage_task ()
{
	local FUNC="watch_topusage_task"
	local WAIT="${1:-1}"
	local TEMPFILE="/tmp/top_$$"
	local PID CPU CPU_INT TASK TOPTASK FILESIZE
	local MAX_ALLOWED_PERCENT=70

	_watch counter "/tmp/counter_highload" increment 1 max 10 || reboot		# workaround: we can't see, which task causes e.g. high I/O-load

	top >$TEMPFILE &		# fixme! can lead to race conditions, we don't know exactly when page output is ready, especially under high load
	PID="$!"			# normally we can use 'top -b -n 1 &', but the busybox-top must have implemented this 8-(
	sleep $WAIT

	while [ -e "/proc/$PID" ]; do {
		kill $PID
		[ -e "/proc/$PID" ] && kill -9 $PID
	} done

	FILESIZE="$( _file size $TEMPFILE )"
#	[ "$FILESIZE" = "0" ] && {
#		_$FUNC "$(( $WAIT + 1 ))"	# or random_integer?
#		rm $TEMPFILE			# abort after 5x recursion?
#		return
#	}

	eval "$( sed -n 's/^[ ]*\([0-9]\{1,5\}\).* \([0-9]\{1,2\}\)\.\([0-9]\).*[0-9]\{1,2\}\.[0-9].* \(.*\)/PID=\1;CPU=\2.\3;CPU_INT=\2;TOPTASK="\4"/p' $TEMPFILE | head -n1 )"

	read TASK 2>/dev/null </proc/$PID/cmdline	# taskname is limited by TERM? e.g. "cron.evaluate_u" seems to be max length
	TASK="$( basename "$TASK" )"
	[ -z "$TASK" ] && TASK="$TOPTASK"

	_log do $FUNC daemon info "output: PID=$PID CPU=$CPU CPU_INT=$CPU_INT TASK=$TOPTASK -> TOPTASK=$TASK TEMPFILE=$TEMPFILE FILESIZE=${FILESIZE}bytes"
	rm $TEMPFILE

	case "$TASK" in
		cgi-bin-welcome*)
			_log do $FUNC daemon alert "killall $TASK"
			killall $TASK
		;;
	esac

	case "$TOPTASK" in
		syslogd)
			[ $CPU_INT -gt 10 ] && {
				_olsr daemon restart "$FUNC high load of $TOPTASK: $CPU"
			}
		;;
	esac

	[ "${CPU_INT:=0}" -gt $MAX_ALLOWED_PERCENT ] && {
		_log do $FUNC daemon alert "detected task '$TASK' with high cpu-usage ${CPU_INT}% > ${MAX_ALLOWED_PERCENT}% - trying to kill pid '$PID'"
		_watch hanging_command $TASK	# must be called 2 times
		_watch hanging_command $TASK
	}
}
