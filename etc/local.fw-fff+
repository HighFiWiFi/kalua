#!/bin/sh

# fixme! ipp2p als fallback fuers marking layer7

. /tmp/loader

ARG="$1"

[ "$ARG" = "start" ] && {
	[ ! -e "$SOFTWARE_FULLY_INSTALLED" ]	&& ARG="masq"
	[ -n "$READONLY" ]			&& ARG="masq"
	[ -n "$FAILSAFE" ]			&& ARG="masq"
	[ -e "/tmp/LOWMEM" ]			&& ARG="masq"
	[ -n "$( nvram get fff_nosplash )" ]	&& ARG="masq"

	# [ "$ARG" = "masq" ] && remove_adblock_list	// fixme!
}

func_packetfilter_startup ()
{
	_log do local_firewall daemon info "func_packetfilter_startup"
		
	fkt_definitions
	fkt_olsr_whitelist_variables
	fkt_all_chains_acceptance on
		
	func_masq
		
	fkt_scaleable_packetfilter_with_QoS
	fkt_control_olsr
	fkt_insert_walled_garden
	fkt_activate_splashpage

	fkt_free_all_users_which_dont_want_splash

	[ -n "$WANADR" ] && {
		_log do deny_possible_wan_olsr_over_internet daemon debug "denying incoming OLSR to WANDEV for alien-nets"
		$IPT -I INPUT -i $WANDEV -s ! 10.0.0.0/8 -p udp --dport 698 -j DROP	# fixme! (network+mask is a hack)
	}

	func_packetfilter_dhcp_ignore_specific_macs
	[ -e /tmp/USER_PACKETFILTER ] && {
		fkt_all_chains_acceptance off			# fixme!
	}
	func_packetfilter_count_rules
		
	_log do local_firewall daemon info "func_packetfilter_startup - ready"
}

case $ARG in
	close_doors)
		_log do local_firewall daemon info "func_packetfilter_startup - first full init ($( uptime ))"
		fkt_definitions
		fkt_all_chains_acceptance off
	;;
	start)
		if [ -e /tmp/BOOT ]; then
			scheduler -a start_local_packetfilter
			/usr/sbin/cron.select_best_antenna_fff+ fastcheck
		else
			func_packetfilter_startup
		fi
	;;
	call)
		func_packetfilter_startup
	;;
	masq)
		fkt_definitions
		func_masq		# includes portforwarding
		[ ! -e "$SOFTWARE_FULLY_INSTALLED" ] && {
			func_reject_traffic_from_nonlocal_hosts_to_local_webserver	
			# safes memory during software_install
		}
	;;
	reset_all_daily_user_counters)
		fkt_definitions
		fkt_reset_all_daily_user_counters
	;;
	reset_daily_counter)
		fkt_definitions
		fkt_reset_traffic_counter_for_mac $2 today
	;;
	showuser_traff)
		test "$4" = "randomwait" && sleep "$( _math random_integer 0 15	)"		# trying to avoid multiple http-requests during data-spreading
	
		fkt_definitions
		fkt_show_user_traff $3								# with ARG3 = spread, we blow out the data to $GW and $NEXTHOP
		
		test "$2" != "quiet" && grep "^NODE=local " $NETFILTER_COUNT | tail -n 1	# output to stdout
	;;
	live_traffic)
		UPDATE_INTERVAL=3	# seconds
		
		while true; do {
			TRAFF_TOTAL="$( fkt_get_traffic_for_mac $2 recent )"
			TRAFF_DIFF="$(( $TRAFF_TOTAL - ${TRAFF_OLD:=0} ))"
			TRAFF_LIVE="$(( $TRAFF_DIFF / $UPDATE_INTERVAL ))"		# bytes/sec
			TRAFF_OLD="$TRAFF_TOTAL"
			TRAFF_TOTAL_FORMATTED="$( echo $TRAFF_TOTAL | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta' )"
			
			reset
			echo -ne "end this madness with CTRL+C , showing traffic for MAC $2: \n\n"
			echo -ne "Bytes total: $TRAFF_TOTAL_FORMATTED \n"
			echo -ne "Bytes/sec  : $TRAFF_LIVE \n"
			
			sleep $UPDATE_INTERVAL
		} done
	;;
	adduser)
		[ -e /tmp/LOWMEM ] && exit
		
		fkt_list_user_macs | grep -i -q "$2" && {
			_log do adduser daemon debug "MAC '$2' already added - abort"
			exit
		}
		
		fkt_definitions
		func_activate_reserved_user_chain "$2" "$3" && exit
		
		fkt_add_user_with_mac_and_ip $2 $3 $4
	;;
	adduser_reserve)
		fkt_definitions
		fkt_add_user_with_mac_and_ip $2 $3 noarp reserve
		fkt_control_redirect_for_user_with_mac_and_ip splash $2 $3
		func_packetfilter_count_rules
	;;
	kickoverlimituser)
		fkt_definitions
		fkt_kick_all_users_which_are_over_limit
	;;
	kickalluser)
		fkt_definitions
		fkt_kick_all_nonfree_users
	;;
	olsr_whitelist_update)
		fkt_definitions
		fkt_olsr_whitelist_variables	
		fkt_olsr_whitelist_fetch
		fkt_all_chains_acceptance on
		fkt_olsr_whitelist_update
		fkt_all_chains_acceptance off
		sleep 15		
		fkt_olsr_whitelist_optimize
		
		test "$( fkt_olsr_whitelist_check_for_error )" = "true" && olsr_whitelist_set_inactive
	;;
	olsr_whitelist_optimize)
		fkt_definitions
		fkt_olsr_whitelist_variables
		fkt_olsr_whitelist_optimize
	;;
	stop)
		[ -e /tmp/USER_PACKETFILTER ] && rm /tmp/USER_PACKETFILTER	# mark unready
		_log do local_firewall daemon info "stopping - done"
	;;
	*)
		_log do local_firewall daemon info "output_help"
		echo "Usage: /etc/local.fw-fff+ option"
		echo ""
		echo "where option can be:"
		echo ""
		echo "start"
		echo "call"
		echo "stop"
		echo "masq"
		echo "close_doors"
		echo
		echo "reset_all_daily_user_counters"
		echo "reset_daily_counter"
		echo "showuser_traff [quiet,spread,randomwait]"
		echo "live_traffic [MAC]"
		echo "kickalluser"
		echo "kickoverlimituser"
		echo "adduser MAC IP [noarp]"
		echo "adduser_reserve MAC IP"
		echo "olsr_whitelist_update"
		echo "olsr_whitelist_optimize"
	;;
esac
