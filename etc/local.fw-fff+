#!/bin/sh
. /tmp/loader

ARG="$1"	# fixme! ipp2p als fallback fuers marking layer7

[ "$ARG" = "start" ] && {
	[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]		&& ARG="masq"
	[ -n "$READONLY" ]					&& ARG="masq"
	[ -n "$FAILSAFE" ]					&& ARG="masq"
	[ -e "/tmp/LOWMEM" ]					&& ARG="masq"
	[ "$( uci get system.@community[0].splash )" = "0" ]	&& ARG="masq"

	# [ "$ARG" = "masq" ] && remove_adblock_list	// fixme!
}

_help ()
{
	_log do help daemon info "local.fw-fff+ output - ARG: '$ARG'"
	
	cat <<EOF
Usage: /etc/local.fw-fff+ <option>

where option can be:

start | call | stop | masq | close_doors

reset_all_daily_user_counters
reset_daily_counter
showuser_traff [quiet,spread,randomwait]
traff <refreshtime_in_seconds>
live_traffic MAC
kickalluser
kickoverlimituser
adduser MAC IP [noarp]
adduser_reserve MAC IP
olsr_whitelist_update
olsr_whitelist_optimize
EOF
}

_startup ()
{
	_log do local_firewall daemon info "startup"
		
	_pfilter rules_accept_all on

	[ -n "$WANDEV" ] && {
		case "$( uci get network.wan.proto )" in
			dhcp|pppoe)
				local WAIT=120		# seconds
			
				while [ $WAIT -gt 0 ]; do {
					_log do "dhcp_pppoe_hook" daemon debug "wait for inet offer on WANDEV (${WAIT}s)"

					_net local_inet_offer >/dev/null && {
						/etc/init.d/S41build_static_netparam
						break
					}
					sleep 5
					WAIT=$(( $WAIT - 5 ))
				} done
				. /tmp/loader	# reread for newer values
			;;
		esac
	}

	_pfilter rules_olsr_ignore_ignored_neighs
	_pfilter rules_nat_install			# fixme! rules are installed 2 times
	_pfilter rules_install
	_pfilter rules_olsr_control
	_pfilter rules_walledgarden

	_pfilter user_splash_remove_autounsplashed
	_pfilter user_splash_remove dummy dummy do_pending_jobs

	_pfilter user_splash_add

	case "$( _net local_inet_offer )" in
		wan|pppoe)			# fixme! olsr-allow is a hack for EJBW-installation

			if [ "$( uci get firewall.@zone[1].name )" = "wan" -a "$( uci get firewall.@zone[1].input )" = "ACCEPT" ]; then
				_log do deny_possible_wan_olsr_over_internet daemon info "allowing OLSR over WANDEV"
			else
				_log do deny_possible_wan_olsr_over_internet daemon info "denying incoming OLSR to WANDEV for alien-nets"
				iptables -I INPUT -i $WANDEV -p udp --dport 698 -j DROP
			fi
		;;
	esac

	_pfilter rules_dhcp_ignore_specific_macs
	_pfilter rules_accept_all off
	_pfilter stats_rules_count

#	# fixme! throw away openwrt-firewall rules
#	while ! _ipt -t nat -nL PREROUTING | head -n3 | tail -n1 | grep -q ^olsr_in ; do {
#		_ipt -t nat -D PREROUTING 1
#	} done
		
	_log do local_firewall daemon info "startup ready"
}

case $ARG in
	close_doors)
		_log do local_firewall daemon info "startup - first full init ($( uptime ))"
		/usr/sbin/cron.check_inet_gw_fff+
		_pfilter rules_accept_all off
	;;
	start)
		if [ -e /tmp/BOOT ]; then
			_pfilter rules_nat_install
			_scheduler add "start_local_packetfilter"
			/usr/sbin/cron.select_best_antenna_fff+ fastcheck	# fixme! move to another place
		else
			_startup
		fi
	;;
	call)
		_startup
	;;
	masq)
		_pfilter rules_nat_install		# includes portforwarding
		[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ] && {
			_pfilter rules_webserver_deny_incoming_nonlocal	
			# safes memory during software_install
		}
	;;
	reset_all_daily_user_counters)
		_pfilter user_traffic_reset
	;;
	reset_daily_counter)
		_pfilter user_traffic_reset_single $2 today
	;;
	showuser_traff)
		test "$4" = "randomwait" && sleep "$( _math random_integer 0 15	)"		# trying to avoid multiple http-requests during data-spreading
	
		_pfilter stats_user_cast $3								# with ARG3 = spread, we blow out the data to $GW and $NEXTHOP
		
		test "$2" != "quiet" && grep "^NODE=local " /tmp/ARCHIV_TRAFFIC | tail -n 1	# output to stdout
	;;
	traff)
		while true; do {
			clear
			iptables -t mangle -nxvL PREROUTING
			echo
			iptables -t mangle -nxvL traff_users
			sleep "${2:-1}"
		} done
	;;
	live_traffic)
		UPDATE_INTERVAL=3	# seconds
		
		while true; do {
			TRAFF_TOTAL="$( _pfilter stats_user_traffic $2 recent )"
			TRAFF_DIFF="$(( $TRAFF_TOTAL - ${TRAFF_OLD:=0} ))"
			TRAFF_LIVE="$(( $TRAFF_DIFF / $UPDATE_INTERVAL ))"		# bytes/sec
			TRAFF_OLD="$TRAFF_TOTAL"
			TRAFF_TOTAL_FORMATTED="$( echo $TRAFF_TOTAL | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1\.\2/;ta' )"
			
			reset
			echo -ne "end this madness with CTRL+C , showing traffic for MAC $2: \n\n"
			echo -ne "Bytes total: $TRAFF_TOTAL_FORMATTED \n"
			echo -ne "Bytes/sec  : $TRAFF_LIVE \n"
			
			sleep $UPDATE_INTERVAL
		} done
	;;
	adduser)
		[ -e /tmp/LOWMEM ] && exit
		
		_pfilter user_list | grep -i -q "$2" && {
			_log do adduser daemon debug "MAC '$2' already added - abort"
			exit
		}
		
		_pfilter user_ruleset_activate "$2" "$3" && exit
		
		_pfilter user_add $2 $3 $4
	;;
	adduser_reserve)
		_pfilter user_add $2 $3 noarp reserve
		_pfilter user_splash_control splash $2 $3
		_pfilter stats_rules_count
	;;
	kickoverlimituser)
		_pfilter user_kick_overlimit
	;;
	kickalluser)
		_pfilter user_splash_add_for_nonautounsplashed
	;;
	olsr_whitelist_update)
		_pfilter rules_olsr_whitelist_fetch
		_pfilter rules_accept_all on
		_pfilter rules_olsr_whitelist_update
		_pfilter rules_accept_all off
		_pfilter rules_olsr_whitelist_optimize
		_pfilter rules_olsr_whitelist_errorcheck && _pfilter rules_olsr_whitelist_bypass
	;;
	olsr_whitelist_optimize)
		_pfilter rules_olsr_whitelist_optimize
	;;
	stop)
		_pfilter status mark_down
		_log do local_firewall daemon info "stopping - done"
	;;
	*)
		_help
	;;
esac
