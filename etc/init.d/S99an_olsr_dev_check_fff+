#!/bin/sh
. /tmp/loader

[ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ] && exit

fkt_patch_netparam ()
{
	local FUNC="patch_netparam"
	local MODE="$1"				# replace | restore
	local ORIG="/rom/usr/bin/netparam"
	local COPY="/usr/bin/netparam"

	[ "$MODE" = "restore" ] && {
		_log do $FUNC daemon info "restoring '$COPY' from '$ORIG' (or copy already made)"
		rm $COPY
		cp $ORIG $COPY
		return
	}
	
	_log do $FUNC daemon info "generating new '$COPY', simulating wifi-olsr-only device"
	
	rm $COPY
	echo -en "#!/bin/sh\n\ncat<<EOF\n"  >$COPY 	# intro of script
	$ORIG | grep -v ANOLSR		   >>$COPY	# original-output in script (without LAN/WAN-OLSR-statements)
	echo -en "\n# attention, look at $0 - this is\n# only a fakefile, original is here: \"$COPY\"\nEOF\n" >>$ORIG
	chmod +x $COPY
}

case $1 in
	call)
		neigh check4nonwifi || {
			fkt_patch_netparam replace
			_scheduler add "restart_olsr"
		}
	;;
	replace)
		fkt_patch_netparam replace
		_scheduler add "restart_olsr"		# fixme! give the reason
	;;
	recheck)
		OUT_OLSR="$( _olsr neighs )" && {
			_olsr neigh_check_for_nonwifi $OUT_OLSR && {
				_log do recheck daemon info "no need for recheck, there are non_wifi neighbours"
				exit
			}
		}
	
		fkt_patch_netparam restore
		
		_log do recheck daemon info "restart OLSRd using parameters of actual netparam-script"
		_olsr daemon restart "using parameters of actual netparam-script"
		
		_log do recheck daemon info "waiting 120 seconds"
		
		neigh check4nonwifi || {
			fkt_patch_netparam replace
			_scheduler add "restart_olsr"
		}
	;;
	start)
		_scheduler add "$0 call"	
	;;
	*)
		_log do output_help daemon info "printing"
		echo "Usage: $0 (call|replace|recheck)"
	;;
esac
