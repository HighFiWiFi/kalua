#!/bin/sh

# under yet unknown circumstances the init.d-boot_process
# can't be established, so we wait some minutes and if OLSR
# was'nt started (= no process_id) we:
# - enforce reformatting of jffs2-partition and reboot

/etc/kalua_init && . /tmp/loader

_telnetd_start ()		# during startup, login without password (!)
{
	local FUNC="telnetd_start"

	pidof telnetd >/dev/null && {
		_log do $FUNC daemon debug "already running"
		return
	}
	
	telnetd || {
		_log do $FUNC daemon debug "error"
		return 1
	}

	return 0
}

_telnetd_stop ()
{
	local FUNC="telnetd_stop"
	local PID="$( pidof telnetd )"
	
	[ -z "$PID" ] && {
		_log do $FUNC daemon debug "there is no telnetd?!"
		return 1
	}

	# tcp      6 7199 ESTABLISHED src=10.63.167.66 dst=10.63.167.65 sport=1448 dport=23 src=10.63.167.65 dst=10.63.167.66 sport=23 dport=1448 [ASSURED] use=1 mark=0 bytes=3211
	# fixme! ensure, that conn is _to_ local
	
	grep -q "^.* ESTABLISHED .* dport=23 " /proc/net/ip_conntrack && {
		_log do $FUNC daemon debug "error - somebody is logged in"
		return 1
	}
	
	kill $PID || {
		_log do $FUNC daemon debug "error - process $PID"
		return 1
	}
	
	_log do $FUNC daemon debug "success"
	return 0
}

while true; do {

	touch /tmp/DEBUG /tmp/BOOT		# logging on during boot-time

	if   insmod crondog ; then
		_log do activate_crondog daemon debug "went fine"
	else
		_log do activate_crondog daemon crit "error during insmod"
	fi

	[ ! -e /etc/shells ] && echo "/bin/ash"  >/etc/shells

	grep -q "^root:"   /etc/group  2>/dev/null || echo 'root:*:0:'     >>/etc/group
	grep -q "^nobody:" /etc/group  2>/dev/null || echo 'nobody:x:500:' >>/etc/group
	grep -q "^nobody:" /etc/passwd 2>/dev/null || echo 'nobody:$1$$enWsv2cbxPCrd0WeXUXtX0:500:500:Linux User,,,:/home/nobody:/bin/sh' >>/etc/passwd

	_telnetd_start && _log do telnetd_start daemon debug "success"

	[ -n "$FAILSAFE" ] && _log do check_failsafe daemon info "working in FAILSAFE-mode"
	[ -n "$READONLY" ] && _log do check_readonly daemon info "working in READONLY-mode"

	while ! pidof olsrd >/dev/null; do {
		[ -e /tmp/PROFILE_SET ] && {
			[ "$( _system_load 1min )" -gt 50 ] && {		# router does'nt hang? // fixme! also check >500?
				[ -e /dev/misc/crondog ] && {
					echo >/dev/misc/crondog
					COUNT=$(( $COUNT - 1 ))
				}
			}
		}
		COUNT=$(( $COUNT + 1 ))
		[ $COUNT -gt 60 ] && break	# 10 minutes should be enough, till olsrd gets started.
		sleep 10			# If this script fails, crondog reboots after ~600 seconds
	} done

	if  pidof olsrd >/dev/null ; then

		_log do pidof_olsrd daemon debug "OLSRd is up"

		if   pidof dropbear >/dev/null ; then
			_log do pidof_dropbear daemon debug "dropbear is up, trying to kill telnetd in 45 sec"
			sleep 45
			_telnetd_stop
		else
			_log do pidof_dropbear daemon debug "dropbear is NOT up - use telnet!"
		fi
	else
		_log do if_olsrd_not_up daemon debug "OLSRd is NOT up"
		
		if [ -z "$FAILSAFE" ] && [ -z "$READONLY" ]; then
			_nvram set ff_reset
			_nvram set commit			# this enforces reformatting of jffs2-partition -> plain firmware
			_safe_reboot "olsrd was not started"
		fi
			
		_log do if_failsafe_or_readonly daemon debug "OLSRd is NOT up"
	fi

	# fixme! when wireless-driver could'nt be loaded, then reformat jffs2
	# (pci-bus claims to have wireless onboard, but /proc doesnt know wireless and driver is onboard!)
	# if [ -n "$WIFI_VENDOR" ] && [ -z "$WIFI_DEVS" ] && reformat_jffs2

	rm /tmp/BOOT
	
	ls -l /www/*software_is_fully_installed* >/dev/null && {
		sleep 1200
		_log do exit_watchdog daemon debug "switching DEBUG-mode off, but can be manually startet with '>DEBUG'"
		rm /tmp/DEBUG
		exit
	}
		
	_log do exit_watchdog daemon debug "leaving DEBUG-mode on, software-install is not ready yet"	
	exit
		
} done &
