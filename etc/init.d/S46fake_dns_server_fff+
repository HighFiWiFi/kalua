#!/bin/sh

. /etc/variables_fff+
. /etc/functions_wifi_fff+
. /etc/functions_logging_fff+
. /etc/functions_profile_fff+
. /etc/functions_nvram_fff+

func_add_experimental_wifi_roaming ()
{
	local FUNC="add_experimental_wifi_roaming"

	ip address add $ROAMING dev $WIFIDEV label ${WIFIDEV}:roaming 2>/dev/null && {
		func_log $FUNC daemon debug "added experimental wifi-roaming-network: $ROAMING to ${WIFIDEV}:roaming"
		return 0
	}
	
	func_log $FUNC daemon debug "error - already set"
}

func_add_thight_netmask_to_wifi ()
{
	local FUNC="add_thight_netmask_to_wifi"
	local WIFI_DHCP_NETMASK="$( nvram get ff_wldhcp | sed -n 's#^[0-9\.]*/\([0-9]*\),.*#\1#p' )"
	
	[ -z "$WIFI_DHCP_NETMASK" ] && {
		func_log $FUNC daemon debug "no wifi-dhcp defined - abort"	
		return 1
	}
	
	ip address add $WIFIADR/$WIFI_DHCP_NETMASK dev $WIFIDEV label ${WIFIDEV}:mywifi 2>/dev/null && {
		func_log $FUNC daemon debug "added alias interface with wifi-ip: '$WIFIADR/$WIFI_DHCP_NETMASK dev $WIFIDEV'"
		return 0
	}
	
	func_log $FUNC daemon debug "error - already set"
}

func_apply_wifi_helper_if_only_roaming_network ()
{
	local FUNC="apply_wifi_helper_if_no_ip"

	[ -z "$WIFIDEV" ] && {
		func_log $FUNC daemon debug "no wifi - no helper 8-)"
		return 0
	}

	ip -oneline address show dev $WIFIDEV | head -n2 | tail -n1 | grep -q "$ROAMING" || {
		func_log $FUNC daemon debug "roaming network is not 1st ip - seems fine"
		return 0
	}

	func_log $FUNC daemon debug "roaming-ip is not 2nd (but 1st) ip on wifi-dev, applying helper"

	# fixme! works only with broadcom - maybe "func_nvset commit && func_safe_reboot" ???

	func_profile_set_wifi	  "IP=$ROAMING"
	func_profile_set_wifi_phy "DEFAULTS=true" "MRATE=1000000"
	func_profile_set_wifi_phy "MODE=master" "ESSID=help! I have $ROAMING" "CHANNEL=1"
		
	func_wifi_restart_wifi_phy $WIFIDEV
}

func_install_fake_dns_server_via_iptables ()
{
	# this starts an fake dnsserver,                         
	# if we can't install or haven't yet installed a dns-server      
	# all DNS-querys are NAT-ed and forwarded to an real-dns-server
	# sense: the client can use DHCP as usable

	local MODE="I"
	[ "$1" = "remove" ] && MODE="D"

	local FUNC="install_fake_dns_server_via_iptables"
	local DNS_SERVER="$( nvram get wan_dns | cut -d";" -f1 )"
	[ -z "$DNS_SERVER" ] && DNS_SERVER=141.1.1.1

	func_log $FUNC daemon debug "working"

	iptables -$MODE PREROUTING -t nat -p udp --dport 53 -s $LANNET/$LANPRE   -d $LANADR  -j DNAT --to-destination $DNS_SERVER
	iptables -$MODE PREROUTING -t nat -p udp --dport 53 -s $WIFINET/$WIFIPRE -d $WIFIADR -j DNAT --to-destination $DNS_SERVER
}

func_if_possible_set_private_ip_on_interface_with_ip () {

	# here we bind 192.168.1.1 to all interfaces (which are not yet in this state)
	# this is helpful in troubleshooting cases and is only active, if software-install fails (and during preinstall)
	# (to be precise: dnsmasq is'nt installed at all...)
	#
	# there is an theoretical problem with that behavior, so we must double check some things:
	# assume we have a privat 192.168.1.0/24 net on lan-site
	# which is not known to the router and the gateway or an important host (for another wired router) is also on 192.168.1.1 - peff!

	local            FUNC="if_possible_set_private_ip_on_interface_with_ip"
	local             DEV="$1"
	local            ADDR="$2"
	local FIRST_3_OKTETTS="$( echo $ADDR | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\.\).*/\1/' | sed 's/\./\\\./g' )"	# escaped dots
	local              GW="192.168.1.1"
	local      VIRTUAL_IP="192.168.1.2"
	local         NETMASK="30"
	local           RANGE="$( echo $GW | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\.\).*/\1/' | sed 's/\./\\\./g' )"		# escaped dots
	
	func_log $FUNC daemon debug "trying $DEV with address $ADDR"
	
	if [ "$FIRST_3_OKTETTS" != "$RANGE" ]; then
	
		func_log $FUNC daemon debug "no conflict: $FIRST_3_OKTETTS != $RANGE , adding virtual ip $VIRTUAL_IP/$NETMASK to $DEV"
		
		ip addr add $VIRTUAL_IP/$NETMASK dev $DEV label ${DEV}:0
		ping -c 1 $GW >/dev/null
		
		if [ "$?" -ne 0 ]; then											# no ping possible
			func_log $FUNC daemon debug "ok, leaving virtual ip for debug purposes"
		else													# ping was possible
			func_log $FUNC daemon debug "removing virtual ip, detected ${GW}er ip"
			ip addr del $VIRTUAL_IP/$NETMASK dev $DEV label ${DEV}:0
		fi
	else
		func_log $FUNC daemon debug "do nothing, conflict: $FIRST_3_OKTETTS = $RANGE"
	fi
}

. /tmp/NETPARAM

[ "$1" = "remove_fake_dnsserver" ] && {
	func_install_fake_dns_server_via_iptables remove
	exit
}

func_add_experimental_wifi_roaming
func_add_thight_netmask_to_wifi
func_apply_wifi_helper_if_only_roaming_network

[ ! -e /etc/init.d/*dnsmasq ] && {
	func_install_fake_dns_server_via_iptables
}
func_log install_fake_dns_server_via_iptables daemon debug "found installed dnsmasq - do nothing"

[ ! -e $SOFTWARE_FULLY_INSTALLED ] && {		# fixme! sideeffects with olsr_plausi_check (same route is doubled)
	# func_if_possible_set_private_ip_on_interface_with_ip $LANDEV  $LANADR
	# func_if_possible_set_private_ip_on_interface_with_ip $WANDEV  $WANADR
	# func_if_possible_set_private_ip_on_interface_with_ip $WIFIDEV $WIFIADR
	func_log if_possible_set_private_ip_on_interface_with_ip daemon debug "temporarily deactivated"
}
func_log if_possible_set_private_ip_on_interface_with_ip daemon debug "software fully installed - do nothing"
