#!/bin/sh

. /etc/functions_base_fff+ && func_need profile wifi

eval $( _wifi vendor_and_model_pci )		# $WIFI_VENDOR|WIFI_MODEL
eval $( func_profile_remap_devs get_model)	# $ROUTER_VENDOR|ROUTER_MODEL

[ -n "$1" ] && {	# depricated!
	[ "$1" != "start" ] && echo "HW='$ROUTER_VENDOR $ROUTER_MODEL ($WIFI_VENDOR $WIFI_MODEL)';USB='';IDE='';MINIPCI=''"
	
	[ "$1" = "show_hardware" ] && exit
	[ -n "$FAILSAFE" ]         && exit
	[ -n "$READONLY" ]         && exit
}

func_need vars_old old nvram log profile_user mac2profile

RAMSIZE="$(_system ram size)"
FLASHSIZE="$( _system flash_size )"
FLASHFREE="$( _system flash_free )"					# [kByte]
[ -z "$( echo $FLASHFREE | sed '/[^0-9]/d')" ] && FLASHFREE=1		# fixme! use sanitizer
[ -z "$( echo $FLASHSIZE | sed '/[^0-9]/d')" ] && FLASHSIZE=1		# fixme! use sanitizer

_log do hw_info_router daemon debug "VENDOR/MODEL: '$ROUTER_VENDOR'/'$ROUTER_MODEL'"
_log do hw_info_mem    daemon debug "RAM/FLASH/FLASHFREE: $RAMSIZE/$FLASHSIZE/$FLASHFREE ($(( $FLASHFREE * 100 / $FLASHSIZE ))% free)"
_log do hw_info_wifi   daemon debug "VENDOR/MODEL: '$WIFI_VENDOR'/'$WIFI_MODEL'"

MAC="$( ip -o link show | sed -e '/^.*: lo: </d' -ne 's/^.*link\/ether \(..:..:..:..:..:..\).*/\1/p;q' )"
_log do "get_first_ethernet_mac_address" daemon debug "is '$MAC'"

_net local_inet_offer >/dev/null		# fixme! just a test

DSSFILE="/etc/dropbear/dropbear_dss_host_key"			# if no dropbear is in firmware and we install it,
DSSKEY="$( nvram get ff_dsskey )"				# the key in nvram is not respected
TOOL="/rom/www/cgi-bin/freifunk-upload"
if [ ! -e $DSSFILE ] || [ "${#DSSKEY}" -le 256 ] || [ "$DSSKEY" != "$( $TOOL -b2a <$DSSFILE )" ]; then

	mkdir -p etc/dropbear		# key in nvram is more important, than (maybe new generated) keyfile
	if [ "${#DSSKEY}" -ge 256 ]; then
		_log do setup_dropbear_keys daemon info "keyfile differs from keys in nvram - restoring keys from nvram"
		echo -n $DSSKEY | $TOOL -a2b >$DSSFILE
		chmod 0600 $DSSFILE                    
	else
		_log do setup_dropbear_keys daemon info "keyfile differs from keys in nvram - generating new keys"
		
		if [ -e /usr/bin/dropbearkey ]; then
			[ -e $DSSFILE ] && {
				_log do setup_dropbear_keys daemon info "$DSSFILE already exists - why? deleting it!"
				rm $DSSFILE
			}
			dropbearkey -t dss -f $DSSFILE
			_nvram set ff_dsskey $( $TOOL -b2a <$DSSFILE )
			_nvram set commit
		else
			_log do setup_dropbear_keys daemon info "SSH-DSS-key does not exist (yet) - abort"
		fi
	fi

	[ "$(func_uptime min)" -gt 5 ] && {
		dropbear || _log do setup_dropbear_keys daemon info "starting daemon failed"
	}
else
	_log do setup_dropbear_keys daemon debug "SSH-DSS-key seems to be correct"

	[ "$( func_filesize "${DSSFILE}.pub" )" = "0" ] && rm "${DSSFILE}.pub"
	[ -e /usr/bin/dropbearkey ] && [ ! -e "${DSSFILE}.pub" ] && {
		dropbearkey -y -f "$DSSFILE" | grep ^ssh- >"${DSSFILE}.pub"
		chmod 0600 "${DSSFILE}.pub"
	}
	[ -z "$( nvram get ff_dsskey_pub )" ] && {
		_nvram set ff_dsskey_pub $( $TOOL -b2a <"${DSSFILE}.pub" )
	}
fi

PROFILE="$(func_profile_get $MAC)" && {
	_log do "profile_get" daemon debug "profile set ('$PROFILE'), only applying interface-check"
	func_profile_remap_devs
	[ "$1" != "enforce_new_profile" ] && exit
}

func_profile_set_config "$PROFILE"

[ "$1" = "enforce_new_profile" ] && _system reboot_safe "new profile was enforced"
