FUNC_LINKS=1

func_links_get_url_firmware ()		# ARG1: stable|beta|testing|empty
{					#       stable|beta|testing <crc>
	func_need log wifi		#       version_installed
					#       version_current <stable|beta|testing>
	local COMMAND="$1"		#	tarball 
	local UPDATEMODE_WISH="$2"
	local UPDATEMODE="$( func_links_get_firmware_update_mode )"	
	local BASE="$( nvram get fff_url_firmware )"		# http://intercity-vpn.de/firmware
	local MYKERNEL="$( uname -a | cut -d' ' -f3 )"		# 2.4.30
	local ARCHITECTURE="broadcom"				# fixme! better use mips + endianlittle/el...?

	[ -e "$PPPOE" ] && local OPT="_opt=PPPOE"

	local WIFI_VENDOR WIFI_MODEL WIFIDRIVER
	[ -z "$WIFI_VENDOR" ] && eval $( func_wifi_get_hardware_pci )
	[ -z "$WIFI_VENDOR" ] && eval $( func_wifi_get_hardware_usb )
	
	case $WIFI_VENDOR in					# BROADCOM, BROADCOMFULL, B43, RT73, MADWIFI, NONE
		atheros)
			WIFI_DRIVER="MADWIFI"
		;;
		broadcom)
			WIFI_DRIVER="BROADCOM"
		;;
		*)
			WIFIDRIVER="NONE"
		;;
	esac

	[ -z "$BASE" ] && BASE="http://intercity-vpn.de/firmware"

	case $COMMAND in
		tarball)
			echo -n "$BASE/$ARCHITECTURE/images/$UPDATEMODE/tarball.tgz"
		;;
		version_current)
			local GENERATED VERSION KERNEL MAINTAINER OUTPUT
			
			case $UPDATEMODE_WISH in
				stable|beta|testing)
					UPDATEMODE="$UPDATEMODE_WISH"
				;;
			esac
			
			OUTPUT="$( wget -qO - "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | head -n1 )"
			[ -n "$OUTPUT" ] && eval $OUTPUT
			
			echo -n "${VERSION:=000000}"
		;;
		version_installed)
			echo -n "${FFF_PLUS_VERSION:=000000}"
		;;
		*)
			case $1 in
				stable|beta|testing)
					UPDATEMODE="$1"
				;;
			esac
		
			local FILEWISH="linux=${MYKERNEL}_format=TRX_wifidriver=${WIFI_DRIVER}${OPT}.bin"
			
			case $2 in
				crc)
					local GENERATED VERSION KERNEL MAINTAINER CRC
		
					CRC="$( wget -qO - "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | grep "'$FILEWISH'" )"
					[ -n "$CRC" ] && CRC="$( echo "$CRC" | cut -d' ' -f2 )"
				
					echo -n "${CRC:=0}"
				;;
				*)
					echo -n "$BASE/$ARCHITECTURE/images/$UPDATEMODE/$FILEWISH"
				;;
			esac
		;;
	esac
}

func_links_get_firmware_update_mode ()
{
	local MODE="$( nvram get fff_autofwupdate )"

	case $MODE in
		0|stable|beta|testing)
			echo -n "$MODE"
		;;
		*)
			echo -n "stable"
		;;
	esac
}

