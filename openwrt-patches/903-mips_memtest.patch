--- linux-3.10.9/arch/mips/kernel/setup.c	2013-08-21 00:40:47.000000000 +0200
+++ linux-3.10.9.new/arch/mips/kernel/setup.c	2013-09-11 13:25:14.677098495 +0200
@@ -80,9 +80,25 @@ static struct resource data_resource = {
 
 static void *detect_magic __initdata = detect_memory_region;
 
-void __init add_memory_region(phys_t start, phys_t size, long type)
+static void __init _add_memory_region(phys_t start, phys_t size, long type)
 {
 	int x = boot_mem_map.nr_map;
+
+	if (size == 0) return;
+
+	if (boot_mem_map.nr_map == BOOT_MEM_MAP_MAX) {
+		pr_err("Ooops! Too many entries in the memory map!\n");
+		return;
+	}
+
+	boot_mem_map.map[x].addr = start;
+	boot_mem_map.map[x].size = size;
+	boot_mem_map.map[x].type = type;
+	boot_mem_map.nr_map++;
+}
+
+void __init add_memory_region(phys_t start, phys_t size, long type)
+{
 	int i;
 
 	/* Sanity check */
@@ -114,15 +130,7 @@ void __init add_memory_region(phys_t sta
 		return;
 	}
 
-	if (boot_mem_map.nr_map == BOOT_MEM_MAP_MAX) {
-		pr_err("Ooops! Too many entries in the memory map!\n");
-		return;
-	}
-
-	boot_mem_map.map[x].addr = start;
-	boot_mem_map.map[x].size = size;
-	boot_mem_map.map[x].type = type;
-	boot_mem_map.nr_map++;
+	_add_memory_region(start, size, type);
 }
 
 void __init detect_memory_region(phys_t start, phys_t sz_min, phys_t sz_max)
@@ -144,6 +152,82 @@ void __init detect_memory_region(phys_t
 	add_memory_region(start, size, BOOT_MEM_RAM);
 }
 
+static void __init test_memory_regions(void)
+{
+	unsigned char pattern[] = {
+		0x00,
+		0xff,
+		0x55,
+		0xaa,
+		0x11,
+		0x22,
+		0x44,
+		0x88,
+		0x33,
+		0x66,
+		0x99,
+		0xcc,
+		0x77,
+		0xbb,
+		0xdd,
+		0xee,
+	};
+	int p;
+	phys_t c;
+	volatile unsigned char *test;
+	phys_t bad;
+	int i;
+
+	printk(KERN_NOTICE "Doing RAM test...\n");
+
+	for(p = 0; p < sizeof(pattern) / sizeof(pattern[0]); p++) {
+		for (i = 0; i < boot_mem_map.nr_map; i++) {
+			bad = 0;
+
+			if (boot_mem_map.map[i].type != BOOT_MEM_RAM)
+				continue;
+
+			for (c = 0; c < boot_mem_map.map[i].size; c++) {
+				test = (unsigned char *) (PAGE_OFFSET + boot_mem_map.map[i].addr);
+
+				if(((phys_t) &test[c] >= (phys_t) &_text) && ((phys_t) &test[c] < (phys_t) &_end))
+					continue;
+
+				test[c] = pattern[p];
+			}
+
+			for (c = 0; c < boot_mem_map.map[i].size; c++) {
+				test = (unsigned char *) (PAGE_OFFSET + boot_mem_map.map[i].addr);
+
+				if(((phys_t) &test[c] >= (phys_t) &_text) && ((phys_t) &test[c] < (phys_t) &_end))
+					continue;
+
+				if(test[c] != pattern[p]) {
+					bad++;
+				}
+				else if(bad > 0) {
+					printk(KERN_WARNING "Bad RAM at address 0x%llx, size 0x%llx\n", (unsigned long long) boot_mem_map.map[i].addr + c - bad, (unsigned long long) bad);
+
+					_add_memory_region(boot_mem_map.map[i].addr + c - bad, bad, BOOT_MEM_RESERVED);
+					_add_memory_region(boot_mem_map.map[i].addr + c, boot_mem_map.map[i].size - c, boot_mem_map.map[i].type);
+					boot_mem_map.map[i].size = c - bad;
+
+					bad = 0;
+				}
+			}
+
+			if(bad > 0) {
+				printk(KERN_WARNING "Bad RAM at address 0x%llx, size 0x%llx\n", (unsigned long long) boot_mem_map.map[i].addr + c - bad, (unsigned long long) bad);
+
+				_add_memory_region(boot_mem_map.map[i].addr + c - bad, bad, BOOT_MEM_RESERVED);
+				boot_mem_map.map[i].size = c - bad;
+
+				bad = 0;
+			}
+		};
+	}
+}
+
 static void __init print_memory_map(void)
 {
 	int i;
@@ -599,6 +683,8 @@ static void __init arch_mem_init(char **
 		print_memory_map();
 	}
 
+	test_memory_regions();
+
 	bootmem_init();
 #ifdef CONFIG_PROC_VMCORE
 	if (setup_elfcorehdr && setup_elfcorehdr_size) {
