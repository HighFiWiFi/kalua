Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.c
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_ht.c	2015-02-24 16:56:22.265621807 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.c	2015-02-24 16:56:22.261621726 +0100
@@ -54,6 +54,9 @@
 
 #define AVG_PKT_SIZE	1200
 
+/* Spatial stream error threshold in [%] */
+#define STREAM_ERROR_THRES 50
+
 /* Number of bits for an average sized packet */
 #define MCS_NBITS (AVG_PKT_SIZE << 3)
 
@@ -587,7 +590,7 @@
 	struct rhapsody_mcs_group_data *rg;
 	struct rhapsody_rate_stats *rrs;
 	int group, i, j;
-	u16 tmp_mcs_tp_rate[MAX_THR_RATES], tmp_group_tp_rate[MAX_THR_RATES];
+	u16 tmp_mcs_tp_rate[MAX_THR_RATES];
 	u16 tmp_cck_tp_rate[MAX_THR_RATES], index;
 
 	if (ri->ampdu_packets > 0) {
@@ -615,10 +618,6 @@
 
 		ri->sample_count++;
 
-		/* (re)Initialize group rate indexes */
-		for(j = 0; j < MAX_THR_RATES; j++)
-			tmp_group_tp_rate[j] = group;
-
 		for (i = 0; i < MCS_GROUP_RATES; i++) {
 			if (!(rg->supported & BIT(i)))
 				continue;
@@ -641,16 +640,9 @@
 							       tmp_cck_tp_rate);
 			}
 
-			/* Find max throughput rate set within a group */
-			rhapsody_ht_sort_best_tp_rates(ri, index,
-						       tmp_group_tp_rate);
-
 			/* Find max probability rate per group and global */
 			rhapsody_ht_set_best_prob_rate(ri, index);
 		}
-
-		memcpy(rg->max_group_tp_rate, tmp_group_tp_rate,
-		       sizeof(rg->max_group_tp_rate));
 	}
 
 	/* Assign new rate set per sta */
@@ -717,27 +709,71 @@
 	}
 }
 
+/*
+ * Downgrading is done for max_prob_rate. When possible it first switches
+ * from SGI to LGI, second lower HT40 to HT20 and then reduces the
+ * number of streams for max_prob_rate.
+ */
 static void
-rhapsody_downgrade_rate(struct rhapsody_ht_sta *ri, u16 *idx, bool primary)
+rhapsody_ht_downgrade_rate(struct rhapsody_priv *mp, struct rhapsody_ht_sta *ri)
 {
-	int group, orig_group;
+	int cur_group, cur_idx, cur_flags, cur_streams;
+	int tmp_group, tmp_flags, tmp_streams;
 
-	orig_group = group = *idx / MCS_GROUP_RATES;
-	while (group > 0) {
-		group--;
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	if (mp->fixed_rate_idx != -1)
+		return;
+#endif
 
-		if (!ri->groups[group].supported)
-			continue;
+	tmp_group = cur_group = ri->max_prob_rate / MCS_GROUP_RATES;
+	cur_idx = ri->max_prob_rate % MCS_GROUP_RATES;
+	cur_flags = rhapsody_mcs_groups[cur_group].flags;
+	cur_streams = rhapsody_mcs_groups[cur_group].streams;
+
+	/* Ignore CCK group and lowest single stream rate */
+	if ((cur_group == RHAPSODY_CCK_GROUP) ||
+	    (cur_idx == 0 && cur_streams == 1))
+		return;
+
+	while (tmp_group > 0) {
+		tmp_group--;
+		tmp_flags = rhapsody_mcs_groups[tmp_group].flags;
+		tmp_streams = rhapsody_mcs_groups[tmp_group].streams;
 
-		if (rhapsody_mcs_groups[group].streams >
-		    rhapsody_mcs_groups[orig_group].streams)
+		if (!ri->groups[tmp_group].supported)
 			continue;
 
-		if (primary)
-			*idx = ri->groups[group].max_group_tp_rate[0];
-		else
-			*idx = ri->groups[group].max_group_tp_rate[1];
-		break;
+		/* if possible switch from SGI to LGI */
+		if ((cur_flags & IEEE80211_TX_RC_SHORT_GI) &&
+		    !(tmp_flags & IEEE80211_TX_RC_SHORT_GI) &&
+		    ((cur_flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
+		    == (tmp_flags & IEEE80211_TX_RC_40_MHZ_WIDTH)) &&
+		    (cur_streams == tmp_streams)) {
+			printk(KERN_ERR "Downgrade max_prob_rate from SGI rate %i ->to LGI rate %i\n", ri->max_prob_rate, tmp_group * MCS_GROUP_RATES + cur_idx);
+			ri->max_prob_rate = tmp_group * MCS_GROUP_RATES	+
+									cur_idx;
+			break;
+		}
+
+		/* if possible switch from HT40 to HT20 */
+		if ((cur_flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
+		    !(tmp_flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
+		    (cur_streams == tmp_streams)) {
+			printk(KERN_ERR "Downgrade max_prob_rate from HT40 rate %i -> to HT20 rate %i\n", ri->max_prob_rate, tmp_group * MCS_GROUP_RATES + cur_idx);
+			ri->max_prob_rate = tmp_group * MCS_GROUP_RATES +
+									cur_idx;
+			break;
+		}
+
+		/* if possible reduce number of used streams by 1*/
+		if ((cur_streams > 1) &&
+		    !(tmp_flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
+		    !(tmp_flags & IEEE80211_TX_RC_SHORT_GI)) {
+			printk(KERN_ERR "Downgrade max_prob_rate by STREAMS %i from index %i to new index %i \n", cur_streams, ri->max_prob_rate, tmp_group * MCS_GROUP_RATES + cur_idx);
+			ri->max_prob_rate = tmp_group * MCS_GROUP_RATES +
+									cur_idx;
+			break;
+		}
 	}
 }
 
@@ -772,7 +808,7 @@
 	struct rhapsody_ht_sta_priv *rsp = priv_sta;
 	struct rhapsody_ht_sta *ri = &rsp->ht;
 	struct ieee80211_tx_rate *ar = info->status.rates;
-	struct rhapsody_rate_stats *rate, *rate2;
+	struct rhapsody_rate_stats *rate;
 	struct rhapsody_priv *rp = priv;
 	bool last, update = false;
 	int i;
@@ -818,23 +854,23 @@
 	}
 
 	/*
-	 * check for sudden death of spatial multiplexing,
-	 * downgrade to a lower number of streams if necessary.
+	* Check for sudden death of spatial multiplexing by counting
+	* spatial stream errors. If the ratio of block ack length         
+	* to AMPDU length is smaller than STREAM_ERROR_THRES in % a stream
+	* error occurred. If the number of consecutive stream errors is
+	* greater than 3 downgrade max_prob_rate to increase robustness.
 	 */
-	rate = rhapsody_get_ratestats(ri, ri->max_tp_rate[0]);
-	if (rate->attempts > 30 &&
-	    RHAPSODY_FRAC(rate->success, rate->attempts) <
-	    RHAPSODY_FRAC(20, 100)) {
-		rhapsody_downgrade_rate(ri, &ri->max_tp_rate[0], true);
-		update = true;
-	}
-
-	rate2 = rhapsody_get_ratestats(ri, ri->max_tp_rate[1]);
-	if (rate2->attempts > 30 &&
-	    RHAPSODY_FRAC(rate2->success, rate2->attempts) <
-	    RHAPSODY_FRAC(20, 100)) {
-		rhapsody_downgrade_rate(ri, &ri->max_tp_rate[1], false);
-		update = true;
+	if ((info->status.ampdu_len > 1) &&
+	    (RHAPSODY_FRAC(info->status.ampdu_ack_len, info->status.ampdu_len) <
+	    RHAPSODY_FRAC(STREAM_ERROR_THRES, 100))) {
+		ri->stream_errors++;
+		if (ri->stream_errors > 3) {
+			rhapsody_ht_downgrade_rate(rp, ri);
+			update = true;
+			ri->stream_errors = 0;
+		}
+	} else {
+		ri->stream_errors = 0;
 	}
 
 	if (time_after(jiffies, ri->last_stats_update +
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.h
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_ht.h	2015-02-24 16:56:22.265621807 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.h	2015-02-24 16:56:22.261621726 +0100
@@ -90,8 +90,7 @@
 	/* bitfield of supported MCS rates of this group */
 	u16 supported;
 
-	/* sorted rate set within a MCS group*/
-	u16 max_group_tp_rate[MAX_THR_RATES];
+	/* max probability rate within a MCS group*/
 	u16 max_group_prob_rate;
 
 	/* MCS rate statistics */
@@ -124,6 +123,7 @@
 
 	/* tx flags to add for frames for this sta */
 	u32 tx_flags;
+	u8 stream_errors;
 
 	u8 sample_wait;
 	u8 sample_tries;
