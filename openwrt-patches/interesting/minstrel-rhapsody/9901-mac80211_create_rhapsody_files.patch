Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.c	2015-02-13 16:10:07.000000000 +0100
@@ -0,0 +1,754 @@
+/*
+ * Copyright (C) 2015 Thomas Huehn <thomas@inet.tu-berlin.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Based on minstrel.c:
+ *   Copyright (C) 2008-20014 Felix Fietkau <nbd@openwrt.org>
+ *   Sponsored by OpenWRT.org
+ *
+ * Based on minstrel.c:
+ *   Copyright (C) 2005-2007 Derek Smithies <derek@indranet.co.nz>
+ *   Sponsored by Indranet Technologies Ltd
+ *
+ * Based on sample.c:
+ *   Copyright (c) 2005 John Bicket
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions
+ *   are met:
+ *   1. Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer,
+ *      without modification.
+ *   2. Redistributions in binary form must reproduce at minimum a disclaimer
+ *      similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any
+ *      redistribution must be conditioned upon including a substantially
+ *      similar Disclaimer requirement for further binary redistribution.
+ *   3. Neither the names of the above-listed copyright holders nor the names
+ *      of any contributors may be used to endorse or promote products derived
+ *      from this software without specific prior written permission.
+ *
+ *   Alternatively, this software may be distributed under the terms of the
+ *   GNU General Public License ("GPL") version 2 as published by the Free
+ *   Software Foundation.
+ *
+ *   NO WARRANTY
+ *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *   LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY
+ *   AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ *   THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,
+ *   OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+ *   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ *   THE POSSIBILITY OF SUCH DAMAGES.
+ */
+#include <linux/netdevice.h>
+#include <linux/types.h>
+#include <linux/skbuff.h>
+#include <linux/debugfs.h>
+#include <linux/random.h>
+#include <linux/ieee80211.h>
+#include <linux/slab.h>
+#include <net/mac80211.h>
+#include "rate.h"
+#include "rc80211_rhapsody.h"
+
+#define SAMPLE_TBL(_ri, _idx, _col) \
+		_ri->sample_table[(_idx * SAMPLE_COLUMNS) + _col]
+
+/* convert mac80211 rate index to local array index */
+static inline int
+rix_to_ndx(struct rhapsody_sta_info *ri, int rix)
+{
+	int i = rix;
+	for (i = rix; i >= 0; i--)
+		if (ri->r[i].rix == rix)
+			break;
+	return i;
+}
+
+/* return current EMWA throughput */
+int rhapsody_get_tp_avg(struct rhapsody_rate *rr)
+{
+	int tp_avg, usecs;
+
+	usecs = rr->perfect_tx_time;
+	if (!usecs)
+		usecs = 1000000;
+
+	/* reset thr. below 10% success */
+	if (rr->stats.prob_ewma < RHAPSODY_FRAC(10, 100))
+		tp_avg = 0;
+	else
+		tp_avg = RHAPSODY_TRUNC(rr->stats.prob_ewma * (100000 / usecs));
+
+	return tp_avg;
+}
+
+/* return max. potential lossless throughput */
+int rhapsody_get_tp_max(struct rhapsody_rate *rr)
+{
+	int tp_max, usecs;
+
+	usecs = rr->perfect_tx_time;
+	if (!usecs)
+		usecs = 1000000;
+
+	tp_max = 100000 / usecs;
+
+	return tp_max;
+}
+
+/* find & sort topmost throughput rates */
+static inline void
+rhapsody_sort_best_tp_rates(struct rhapsody_sta_info *ri, int i, u8 *tp_list)
+{
+	int j = MAX_THR_RATES;
+
+	while (j > 0 && (rhapsody_get_tp_avg(&ri->r[i]) >
+				rhapsody_get_tp_avg(&ri->r[tp_list[j - 1]])))
+		j--;
+	if (j < MAX_THR_RATES - 1)
+		memmove(&tp_list[j + 1], &tp_list[j], MAX_THR_RATES - (j + 1));
+	if (j < MAX_THR_RATES)
+		tp_list[j] = i;
+}
+
+static void
+rhapsody_set_rate(struct rhapsody_sta_info *ri, struct ieee80211_sta_rates *ratetbl,
+		  int offset, int idx)
+{
+	struct rhapsody_rate *r = &ri->r[idx];
+
+	ratetbl->rate[offset].idx = r->rix;
+	ratetbl->rate[offset].count = r->adjusted_retry_count;
+	ratetbl->rate[offset].count_cts = r->retry_count_cts;
+	ratetbl->rate[offset].count_rts = r->stats.retry_count_rtscts;
+}
+
+static void
+rhapsody_update_rates(struct rhapsody_priv *rp, struct rhapsody_sta_info *ri)
+{
+	struct ieee80211_sta_rates *ratetbl;
+	int i = 0;
+
+	ratetbl = kzalloc(sizeof(*ratetbl), GFP_ATOMIC);
+	if (!ratetbl)
+		return;
+
+	/* Start with max_tp_rate */
+	rhapsody_set_rate(ri, ratetbl, i++, ri->max_tp_rate[0]);
+
+	if (rp->hw->max_rates >= 3) {
+		/* At least 3 tx rates supported, use max_tp_rate2 next */
+		rhapsody_set_rate(ri, ratetbl, i++, ri->max_tp_rate[1]);
+	}
+
+	if (rp->hw->max_rates >= 2) {
+		/* At least 2 tx rates supported, use max_prob_rate next */
+		rhapsody_set_rate(ri, ratetbl, i++, ri->max_prob_rate);
+	}
+
+	/* Use lowest rate last */
+	ratetbl->rate[i].idx = ri->lowest_rix;
+	ratetbl->rate[i].count = rp->max_retry;
+	ratetbl->rate[i].count_cts = rp->max_retry;
+	ratetbl->rate[i].count_rts = rp->max_retry;
+
+	rate_control_set_rates(rp->hw, ri->sta, ratetbl);
+}
+
+/*
+* Recalculate statistics and counters of a given rate
+*/
+void
+rhapsody_calc_rate_stats(struct rhapsody_rate_stats *rrs)
+{
+	if (unlikely(rrs->attempts > 0)) {
+		rrs->sample_skipped = 0;
+		rrs->cur_prob = RHAPSODY_FRAC(rrs->success, rrs->attempts);
+		if (unlikely(!rrs->att_hist)) {
+			rrs->prob_ewma = rrs->cur_prob;
+		} else {
+			/* update exponential weighted moving variance */
+			rrs->prob_ewmsd = rhapsody_ewmsd(rrs->prob_ewmsd,
+							 rrs->cur_prob,
+							 rrs->prob_ewma,
+							 EWMA_LEVEL);
+
+			/*update exponential weighted moving avarage */
+			rrs->prob_ewma = rhapsody_ewma(rrs->prob_ewma,
+						       rrs->cur_prob,
+						       EWMA_LEVEL);
+		}
+		rrs->att_hist += rrs->attempts;
+		rrs->succ_hist += rrs->success;
+	} else {
+		rrs->sample_skipped++;
+	}
+
+	rrs->last_success = rrs->success;
+	rrs->last_attempts = rrs->attempts;
+	rrs->success = 0;
+	rrs->attempts = 0;
+}
+
+static void
+rhapsody_update_stats(struct rhapsody_priv *rp, struct rhapsody_sta_info *ri)
+{
+	u8 tmp_tp_rate[MAX_THR_RATES];
+	u8 tmp_prob_rate = 0;
+	int i, tmp_cur_tp, tmp_prob_tp;
+
+	for (i = 0; i < MAX_THR_RATES; i++)
+	    tmp_tp_rate[i] = 0;
+
+	for (i = 0; i < ri->n_rates; i++) {
+		struct rhapsody_rate *rr = &ri->r[i];
+		struct rhapsody_rate_stats *rrs = &ri->r[i].stats;
+
+		/* Update statistics of success probability per rate */
+		rhapsody_calc_rate_stats(rrs);
+
+		/* Sample less often below the 10% chance of success.
+		 * Sample less often above the 95% chance of success. */
+		if (rrs->prob_ewma > RHAPSODY_FRAC(95, 100) ||
+		    rrs->prob_ewma < RHAPSODY_FRAC(10, 100)) {
+			rr->adjusted_retry_count = rrs->retry_count >> 1;
+			if (rr->adjusted_retry_count > 2)
+				rr->adjusted_retry_count = 2;
+			rr->sample_limit = 4;
+		} else {
+			rr->sample_limit = -1;
+			rr->adjusted_retry_count = rrs->retry_count;
+		}
+		if (!rr->adjusted_retry_count)
+			rr->adjusted_retry_count = 2;
+
+		rhapsody_sort_best_tp_rates(ri, i, tmp_tp_rate);
+
+		/* To determine the most robust rate (max_prob_rate) used at
+		 * 3rd mmr stage we distinct between two cases:
+		 * (1) if any success probabilitiy >= 95%, out of those rates
+		 * choose the maximum throughput rate as max_prob_rate
+		 * (2) if all success probabilities < 95%, the rate with
+		 * highest success probability is chosen as max_prob_rate */
+		if (rrs->prob_ewma >= RHAPSODY_FRAC(95, 100)) {
+			tmp_cur_tp = rhapsody_get_tp_avg(rr);
+			tmp_prob_tp = rhapsody_get_tp_avg(&ri->r[tmp_prob_rate]);
+			if (tmp_cur_tp >= tmp_prob_tp)
+				tmp_prob_rate = i;
+		} else {
+			if (rrs->prob_ewma >= ri->r[tmp_prob_rate].stats.prob_ewma)
+				tmp_prob_rate = i;
+		}
+	}
+
+	/* Assign the new rate set */
+	memcpy(ri->max_tp_rate, tmp_tp_rate, sizeof(ri->max_tp_rate));
+	ri->max_prob_rate = tmp_prob_rate;
+
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	/* use fixed index if set */
+	if (rp->fixed_rate_idx != -1) {
+		ri->max_tp_rate[0] = rp->fixed_rate_idx;
+		ri->max_tp_rate[1] = rp->fixed_rate_idx;
+		ri->max_prob_rate = rp->fixed_rate_idx;
+	}
+#endif
+
+	/* Reset update timer */
+	ri->last_stats_update = jiffies;
+
+	rhapsody_update_rates(rp, ri);
+}
+
+static void
+rhapsody_tx_status(void *priv, struct ieee80211_supported_band *sband,
+		   struct ieee80211_sta *sta, void *priv_sta,
+		   struct ieee80211_tx_info *info)
+{
+	struct rhapsody_priv *rp = priv;
+	struct rhapsody_sta_info *ri = priv_sta;
+	struct ieee80211_tx_rate *ar = info->status.rates;
+	int i, ndx;
+	int success;
+
+	success = !!(info->flags & IEEE80211_TX_STAT_ACK);
+
+	for (i = 0; i < IEEE80211_TX_MAX_RATES; i++) {
+		if (ar[i].idx < 0)
+			break;
+
+		ndx = rix_to_ndx(ri, ar[i].idx);
+		if (ndx < 0)
+			continue;
+
+		ri->r[ndx].stats.attempts += ar[i].count;
+
+		if ((i != IEEE80211_TX_MAX_RATES - 1) && (ar[i + 1].idx < 0))
+			ri->r[ndx].stats.success += success;
+	}
+
+	if ((info->flags & IEEE80211_TX_CTL_RATE_CTRL_PROBE) && (i >= 0))
+		ri->sample_packets++;
+
+	if (ri->sample_deferred > 0)
+		ri->sample_deferred--;
+
+	if (time_after(jiffies, ri->last_stats_update +
+				(rp->update_interval * HZ) / 1000))
+		rhapsody_update_stats(rp, ri);
+}
+
+
+static inline unsigned int
+rhapsody_get_retry_count(struct rhapsody_rate *rr,
+			 struct ieee80211_tx_info *info)
+{
+	unsigned int retry = rr->adjusted_retry_count;
+
+	if (info->control.use_rts)
+		retry = max(2U, min(rr->stats.retry_count_rtscts, retry));
+	else if (info->control.use_cts_prot)
+		retry = max(2U, min(rr->retry_count_cts, retry));
+	return retry;
+}
+
+
+static int
+rhapsody_get_next_sample(struct rhapsody_sta_info *ri)
+{
+	unsigned int sample_ndx;
+	sample_ndx = SAMPLE_TBL(ri, ri->sample_row, ri->sample_column);
+	ri->sample_row++;
+	if ((int) ri->sample_row >= ri->n_rates) {
+		ri->sample_row = 0;
+		ri->sample_column++;
+		if (ri->sample_column >= SAMPLE_COLUMNS)
+			ri->sample_column = 0;
+	}
+	return sample_ndx;
+}
+
+static void
+rhapsody_get_rate(void *priv, struct ieee80211_sta *sta,
+		  void *priv_sta, struct ieee80211_tx_rate_control *txrc)
+{
+	struct sk_buff *skb = txrc->skb;
+	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
+	struct rhapsody_sta_info *ri = priv_sta;
+	struct rhapsody_priv *rp = priv;
+	struct ieee80211_tx_rate *rate = &info->control.rates[0];
+	struct rhapsody_rate *rsr, *rr;
+	unsigned int ndx;
+	bool mrr_capable;
+	bool prev_sample;
+	int delta;
+	int sampling_ratio;
+
+	/* management/no-ack frames do not use rate control */
+	if (rate_control_send_low(sta, priv_sta, txrc))
+		return;
+
+	/* check multi-rate-retry capabilities & adjust lookaround_rate */
+	mrr_capable = rp->has_mrr &&
+		      !txrc->rts &&
+		      !txrc->bss_conf->use_cts_prot;
+	if (mrr_capable)
+		sampling_ratio = rp->lookaround_rate_mrr;
+	else
+		sampling_ratio = rp->lookaround_rate;
+
+	/* increase sum packet counter */
+	ri->total_packets++;
+
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	if (rp->fixed_rate_idx != -1)
+		return;
+#endif
+
+	delta = (ri->total_packets * sampling_ratio / 100) -
+			(ri->sample_packets + ri->sample_deferred / 2);
+
+	/* delta < 0: no sampling required */
+	prev_sample = ri->prev_sample;
+	ri->prev_sample = false;
+	if (delta < 0 || (!mrr_capable && prev_sample))
+		return;
+
+	if (ri->total_packets >= 10000) {
+		ri->sample_deferred = 0;
+		ri->sample_packets = 0;
+		ri->total_packets = 0;
+	} else if (delta > ri->n_rates * 2) {
+		/* With multi-rate retry, not every planned sample
+		 * attempt actually gets used, due to the way the retry
+		 * chain is set up - [max_tp,sample,prob,lowest] for
+		 * sample_rate < max_tp.
+		 *
+		 * If there's too much sampling backlog and the link
+		 * starts getting worse, rhapsody would start bursting
+		 * out lots of sampling frames, which would result
+		 * in a large throughput loss. */
+		ri->sample_packets += (delta - ri->n_rates * 2);
+	}
+
+	/* get next random rate sample */
+	ndx = rhapsody_get_next_sample(ri);
+	rsr = &ri->r[ndx];
+	rr = &ri->r[ri->max_tp_rate[0]];
+
+	/* Decide if direct ( 1st mrr stage) or indirect (2nd mrr stage)
+	 * rate sampling method should be used.
+	 * Respect such rates that are not sampled for 20 interations.
+	 */
+	if (mrr_capable &&
+	    rsr->perfect_tx_time > rr->perfect_tx_time &&
+	    rsr->stats.sample_skipped < 20) {
+		/* Only use IEEE80211_TX_CTL_RATE_CTRL_PROBE to mark
+		 * packets that have the sampling rate deferred to the
+		 * second MRR stage. Increase the sample counter only
+		 * if the deferred sample rate was actually used.
+		 * Use the sample_deferred counter to make sure that
+		 * the sampling is not done in large bursts */
+		info->flags |= IEEE80211_TX_CTL_RATE_CTRL_PROBE;
+		rate++;
+		ri->sample_deferred++;
+	} else {
+		if (!rsr->sample_limit != 0)
+			return;
+
+		ri->sample_packets++;
+		if (rsr->sample_limit > 0)
+			rsr->sample_limit--;
+	}
+
+	/* If we're not using MRR and the sampling rate already
+	 * has a probability of >95%, we shouldn't be attempting
+	 * to use it, as this only wastes precious airtime */
+	if (!mrr_capable &&
+	   (ri->r[ndx].stats.prob_ewma > RHAPSODY_FRAC(95, 100)))
+		return;
+
+	ri->prev_sample = true;
+
+	rate->idx = ri->r[ndx].rix;
+	rate->count = rhapsody_get_retry_count(&ri->r[ndx], info);
+}
+
+
+static void
+calc_rate_durations(enum ieee80211_band band,
+		    struct rhapsody_rate *d,
+		    struct ieee80211_rate *rate,
+		    struct cfg80211_chan_def *chandef)
+{
+	int erp = !!(rate->flags & IEEE80211_RATE_ERP_G);
+	int shift = ieee80211_chandef_get_shift(chandef);
+
+	d->perfect_tx_time = ieee80211_frame_duration(band, 1200,
+			DIV_ROUND_UP(rate->bitrate, 1 << shift), erp, 1,
+			shift);
+	d->ack_time = ieee80211_frame_duration(band, 10,
+			DIV_ROUND_UP(rate->bitrate, 1 << shift), erp, 1,
+			shift);
+}
+
+static void
+init_sample_table(struct rhapsody_sta_info *ri)
+{
+	unsigned int i, col, new_idx;
+	u8 rnd[8];
+
+	ri->sample_column = 0;
+	ri->sample_row = 0;
+	memset(ri->sample_table, 0xff, SAMPLE_COLUMNS * ri->n_rates);
+
+	for (col = 0; col < SAMPLE_COLUMNS; col++) {
+		prandom_bytes(rnd, sizeof(rnd));
+		for (i = 0; i < ri->n_rates; i++) {
+			new_idx = (i + rnd[i & 7]) % ri->n_rates;
+			while (SAMPLE_TBL(ri, new_idx, col) != 0xff)
+				new_idx = (new_idx + 1) % ri->n_rates;
+
+			SAMPLE_TBL(ri, new_idx, col) = i;
+		}
+	}
+}
+
+static void
+rhapsody_rate_init(void *priv, struct ieee80211_supported_band *sband,
+		   struct cfg80211_chan_def *chandef,
+		   struct ieee80211_sta *sta, void *priv_sta)
+{
+	struct rhapsody_sta_info *ri = priv_sta;
+	struct rhapsody_priv *rp = priv;
+	struct ieee80211_rate *ctl_rate;
+	unsigned int i, n = 0;
+	unsigned int t_slot = 9; /* FIXME: get real slot time */
+	u32 rate_flags;
+
+	ri->sta = sta;
+	ri->lowest_rix = rate_lowest_index(sband, sta);
+	ctl_rate = &sband->bitrates[ri->lowest_rix];
+	ri->sp_ack_dur = ieee80211_frame_duration(sband->band, 10,
+				ctl_rate->bitrate,
+				!!(ctl_rate->flags & IEEE80211_RATE_ERP_G), 1,
+				ieee80211_chandef_get_shift(chandef));
+
+	rate_flags = ieee80211_chandef_rate_flags(&rp->hw->conf.chandef);
+	memset(ri->max_tp_rate, 0, sizeof(ri->max_tp_rate));
+	ri->max_prob_rate = 0;
+
+	for (i = 0; i < sband->n_bitrates; i++) {
+		struct rhapsody_rate *rr = &ri->r[n];
+		struct rhapsody_rate_stats *rrs = &ri->r[n].stats;
+		unsigned int tx_time = 0, tx_time_cts = 0, tx_time_rtscts = 0;
+		unsigned int tx_time_single;
+		unsigned int cw = rp->cw_min;
+		int shift;
+
+		if (!rate_supported(sta, sband->band, i))
+			continue;
+		if ((rate_flags & sband->bitrates[i].flags) != rate_flags)
+			continue;
+
+		n++;
+		memset(rr, 0, sizeof(*rr));
+		memset(rrs, 0, sizeof(*rrs));
+
+		rr->rix = i;
+		shift = ieee80211_chandef_get_shift(chandef);
+		rr->bitrate = DIV_ROUND_UP(sband->bitrates[i].bitrate,
+					   (1 << shift) * 5);
+		calc_rate_durations(sband->band, rr, &sband->bitrates[i],
+				    chandef);
+
+		/* calculate maximum number of retransmissions before
+		 * fallback (based on maximum segment size) */
+		rr->sample_limit = -1;
+		rrs->retry_count = 1;
+		rr->retry_count_cts = 1;
+		rrs->retry_count_rtscts = 1;
+		tx_time = rr->perfect_tx_time + ri->sp_ack_dur;
+		do {
+			/* add one retransmission */
+			tx_time_single = rr->ack_time + rr->perfect_tx_time;
+
+			/* contention window */
+			tx_time_single += (t_slot * cw) >> 1;
+			cw = min((cw << 1) | 1, rp->cw_max);
+
+			tx_time += tx_time_single;
+			tx_time_cts += tx_time_single + ri->sp_ack_dur;
+			tx_time_rtscts += tx_time_single + 2 * ri->sp_ack_dur;
+			if ((tx_time_cts < rp->segment_size) &&
+				(rr->retry_count_cts < rp->max_retry))
+				rr->retry_count_cts++;
+			if ((tx_time_rtscts < rp->segment_size) &&
+				(rrs->retry_count_rtscts < rp->max_retry))
+				rrs->retry_count_rtscts++;
+		} while ((tx_time < rp->segment_size) &&
+				(++rr->stats.retry_count < rp->max_retry));
+		rr->adjusted_retry_count = rrs->retry_count;
+		if (!(sband->bitrates[i].flags & IEEE80211_RATE_ERP_G))
+			rr->retry_count_cts = rrs->retry_count;
+	}
+
+	for (i = n; i < sband->n_bitrates; i++) {
+		struct rhapsody_rate *rr = &ri->r[i];
+		rr->rix = -1;
+	}
+
+	ri->n_rates = n;
+	ri->last_stats_update = jiffies;
+
+	init_sample_table(ri);
+	rhapsody_update_rates(rp, ri);
+}
+
+static void *
+rhapsody_alloc_sta(void *priv, struct ieee80211_sta *sta, gfp_t gfp)
+{
+	struct ieee80211_supported_band *sband;
+	struct rhapsody_sta_info *ri;
+	struct rhapsody_priv *rp = priv;
+	struct ieee80211_hw *hw = rp->hw;
+	int max_rates = 0;
+	int i;
+
+	ri = kzalloc(sizeof(struct rhapsody_sta_info), gfp);
+	if (!ri)
+		return NULL;
+
+	for (i = 0; i < IEEE80211_NUM_BANDS; i++) {
+		sband = hw->wiphy->bands[i];
+		if (sband && sband->n_bitrates > max_rates)
+			max_rates = sband->n_bitrates;
+	}
+
+	ri->r = kzalloc(sizeof(struct rhapsody_rate) * max_rates, gfp);
+	if (!ri->r)
+		goto error;
+
+	ri->sample_table = kmalloc(SAMPLE_COLUMNS * max_rates, gfp);
+	if (!ri->sample_table)
+		goto error1;
+
+	ri->last_stats_update = jiffies;
+	return ri;
+
+error1:
+	kfree(ri->r);
+error:
+	kfree(ri);
+	return NULL;
+}
+
+static void
+rhapsody_free_sta(void *priv, struct ieee80211_sta *sta, void *priv_sta)
+{
+	struct rhapsody_sta_info *ri = priv_sta;
+
+	kfree(ri->sample_table);
+	kfree(ri->r);
+	kfree(ri);
+}
+
+static void
+rhapsody_init_cck_rates(struct rhapsody_priv *rp)
+{
+	static const int bitrates[4] = { 10, 20, 55, 110 };
+	struct ieee80211_supported_band *sband;
+	u32 rate_flags = ieee80211_chandef_rate_flags(&rp->hw->conf.chandef);
+	int i, j;
+
+	sband = rp->hw->wiphy->bands[IEEE80211_BAND_2GHZ];
+	if (!sband)
+		return;
+
+	for (i = 0, j = 0; i < sband->n_bitrates; i++) {
+		struct ieee80211_rate *rate = &sband->bitrates[i];
+
+		if (rate->flags & IEEE80211_RATE_ERP_G)
+			continue;
+
+		if ((rate_flags & sband->bitrates[i].flags) != rate_flags)
+			continue;
+
+		for (j = 0; j < ARRAY_SIZE(bitrates); j++) {
+			if (rate->bitrate != bitrates[j])
+				continue;
+
+			rp->cck_rates[j] = i;
+			break;
+		}
+	}
+}
+
+static void *
+rhapsody_alloc(struct ieee80211_hw *hw, struct dentry *debugfsdir)
+{
+	struct rhapsody_priv *rp;
+
+	rp = kzalloc(sizeof(struct rhapsody_priv), GFP_ATOMIC);
+	if (!rp)
+		return NULL;
+
+	/* contention window settings
+	 * Just an approximation. Using the per-queue values would complicate
+	 * the calculations and is probably unnecessary */
+	rp->cw_min = 15;
+	rp->cw_max = 1023;
+
+	/* number of packets (in %) to use for sampling other rates
+	 * sample less often for non-mrr packets, because the overhead
+	 * is much higher than with mrr */
+	rp->lookaround_rate = 5;
+	rp->lookaround_rate_mrr = 10;
+
+	/* maximum time that the hw is allowed to stay in one MRR segment */
+	rp->segment_size = 6000;
+
+	if (hw->max_rate_tries > 0)
+		rp->max_retry = hw->max_rate_tries;
+	else
+		/* safe default, does not necessarily have to match hw properties */
+		rp->max_retry = 7;
+
+	if (hw->max_rates >= 4)
+		rp->has_mrr = true;
+
+	rp->hw = hw;
+	rp->update_interval = 100;
+
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	rp->fixed_rate_idx = (u32) -1;
+	rp->dbg_fixed_rate = debugfs_create_u32("fixed_rate_idx",
+			S_IRUGO | S_IWUGO, debugfsdir, &rp->fixed_rate_idx);
+#endif
+
+	rhapsody_init_cck_rates(rp);
+
+	return rp;
+}
+
+static void
+rhapsody_free(void *priv)
+{
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	debugfs_remove(((struct rhapsody_priv *)priv)->dbg_fixed_rate);
+#endif
+	kfree(priv);
+}
+
+static u32 rhapsody_get_expected_throughput(void *priv_sta)
+{
+	struct rhapsody_sta_info *ri = priv_sta;
+	int idx = ri->max_tp_rate[0];
+	int tmp_cur_tp;
+
+	/* convert pkt per sec in kbps (1200 is the average pkt size used for
+	 * computing cur_tp
+	 */
+	tmp_cur_tp = rhapsody_get_tp_avg(&ri->r[idx]);
+	tmp_cur_tp = tmp_cur_tp * 1200 * 8 / 1024;
+
+	return tmp_cur_tp;
+}
+
+const struct rate_control_ops mac80211_rhapsody = {
+	.name = "rhapsody",
+	.tx_status_noskb = rhapsody_tx_status,
+	.get_rate = rhapsody_get_rate,
+	.rate_init = rhapsody_rate_init,
+	.alloc = rhapsody_alloc,
+	.free = rhapsody_free,
+	.alloc_sta = rhapsody_alloc_sta,
+	.free_sta = rhapsody_free_sta,
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	.add_sta_debugfs = rhapsody_add_sta_debugfs,
+	.remove_sta_debugfs = rhapsody_remove_sta_debugfs,
+#endif
+	.get_expected_throughput = rhapsody_get_expected_throughput,
+};
+
+int __init
+rc80211_rhapsody_init(void)
+{
+	return ieee80211_rate_control_register(&mac80211_rhapsody);
+}
+
+void
+rc80211_rhapsody_exit(void)
+{
+	ieee80211_rate_control_unregister(&mac80211_rhapsody);
+}
+
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.h	2015-02-13 16:10:07.000000000 +0100
@@ -0,0 +1,213 @@
+/*
+ * Copyright (C) 2015 Thomas Huehn <thomas@inet.tu-berlin.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Based on minstrel.h:
+ *   Copyright (C) 2008-20014 Felix Fietkau <nbd@openwrt.org>
+ *   Sponsored by OpenWRT.org
+ *
+ * Based on minstrel.c:
+ *   Copyright (C) 2005-2007 Derek Smithies <derek@indranet.co.nz>
+ *   Sponsored by Indranet Technologies Ltd
+ *
+ * Based on sample.c:
+ *   Copyright (c) 2005 John Bicket
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions
+ *   are met:
+ *   1. Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer,
+ *      without modification.
+ *   2. Redistributions in binary form must reproduce at minimum a disclaimer
+ *      similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any
+ *      redistribution must be conditioned upon including a substantially
+ *      similar Disclaimer requirement for further binary redistribution.
+ *   3. Neither the names of the above-listed copyright holders nor the names
+ *      of any contributors may be used to endorse or promote products derived
+ *      from this software without specific prior written permission.
+ *
+ *   Alternatively, this software may be distributed under the terms of the
+ *   GNU General Public License ("GPL") version 2 as published by the Free
+ *   Software Foundation.
+ *
+ *   NO WARRANTY
+ *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *   LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY
+ *   AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ *   THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,
+ *   OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+ *   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ *   THE POSSIBILITY OF SUCH DAMAGES.
+ */
+
+#ifndef __RC_RHAPSODY_H
+#define __RC_RHAPSODY_H
+
+#define EWMA_LEVEL	96	/* ewma weighting factor [/EWMA_DIV] */
+#define EWMA_DIV	128
+#define SAMPLE_COLUMNS	10	/* number of columns in sample table */
+
+/* scaled fraction values */
+#define RHAPSODY_SCALE  16
+#define RHAPSODY_FRAC(val, div) (((val) << RHAPSODY_SCALE) / div)
+#define RHAPSODY_TRUNC(val) ((val) >> RHAPSODY_SCALE)
+
+/* number of highest throughput rates to consider*/
+#define MAX_THR_RATES 4
+
+/*
+ * Perform EWMA (Exponentially Weighted Moving Average) calculation
+ */
+static inline int
+rhapsody_ewma(int old, int new, int weight)
+{
+	int diff, incr;
+
+	diff = new - old;
+	incr = (EWMA_DIV - weight) * diff / EWMA_DIV;
+
+	return old + incr;
+}
+
+/*
+ * Perform EWMSD (Exponentially Weighted Moving Standard Deviation) calculation
+ */
+static inline int
+rhapsody_ewmsd(int old_ewmsd, int cur_prob, int prob_ewma, int weight)
+{
+	int diff, incr, tmp_var;
+
+	/* calculate exponential weighted moving variance */
+	diff = RHAPSODY_TRUNC((cur_prob - prob_ewma) * 1000000);
+	incr = (EWMA_DIV - weight) * diff / EWMA_DIV;
+	tmp_var = old_ewmsd * old_ewmsd;
+	tmp_var = weight * (tmp_var + diff * incr / 1000000) / EWMA_DIV;
+
+	/* return standard deviation */
+	return (u16) int_sqrt(tmp_var);
+}
+
+struct rhapsody_rate_stats {
+	/* current / last sampling period attempts/success counters */
+	unsigned int attempts, last_attempts;
+	unsigned int success, last_success;
+
+	/* total attempts/success counters */
+	u64 att_hist, succ_hist;
+
+	/* statistis of packet delivery probability
+	 *  cur_prob  - current prob within last update intervall
+	 *  prob_ewma - exponential weighted moving average of prob
+	 *  prob_ewmsd - exp. weighted moving standard deviation of prob */
+	unsigned int cur_prob;
+	unsigned int prob_ewma;
+	u16 prob_ewmsd;
+
+	/* maximum retry counts */
+	unsigned int retry_count;
+	unsigned int retry_count_rtscts;
+
+	u8 sample_skipped;
+	bool retry_updated;
+};
+
+struct rhapsody_rate {
+	int bitrate;
+	int rix;
+
+	unsigned int perfect_tx_time;
+	unsigned int ack_time;
+
+	int sample_limit;
+	unsigned int retry_count_cts;
+	unsigned int adjusted_retry_count;
+
+	struct rhapsody_rate_stats stats;
+};
+
+struct rhapsody_sta_info {
+	struct ieee80211_sta *sta;
+
+	unsigned long last_stats_update;
+	unsigned int sp_ack_dur;
+	unsigned int rate_avg;
+
+	unsigned int lowest_rix;
+
+	u8 max_tp_rate[MAX_THR_RATES];
+	u8 max_prob_rate;
+	unsigned int total_packets;
+	unsigned int sample_packets;
+	int sample_deferred;
+
+	unsigned int sample_row;
+	unsigned int sample_column;
+
+	int n_rates;
+	struct rhapsody_rate *r;
+	bool prev_sample;
+
+	/* sampling table */
+	u8 *sample_table;
+
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	struct dentry *dbg_stats;
+	struct dentry *dbg_stats_csv;
+#endif
+};
+
+struct rhapsody_priv {
+	struct ieee80211_hw *hw;
+	bool has_mrr;
+	unsigned int cw_min;
+	unsigned int cw_max;
+	unsigned int max_retry;
+	unsigned int segment_size;
+	unsigned int update_interval;
+	unsigned int lookaround_rate;
+	unsigned int lookaround_rate_mrr;
+
+	u8 cck_rates[4];
+
+#ifdef CPTCFG_MAC80211_DEBUGFS
+	/*
+	 * enable fixed rate processing per RC
+	 *   - write static index to debugfs:ieee80211/phyX/rc/fixed_rate_idx
+	 *   - write -1 to enable RC processing again
+	 *   - setting will be applied on next update
+	 */
+	u32 fixed_rate_idx;
+	struct dentry *dbg_fixed_rate;
+#endif
+};
+
+struct rhapsody_debugfs_info {
+	size_t len;
+	char buf[];
+};
+
+extern const struct rate_control_ops mac80211_rhapsody;
+void rhapsody_add_sta_debugfs(void *priv, void *priv_sta, struct dentry *dir);
+void rhapsody_remove_sta_debugfs(void *priv, void *priv_sta);
+
+/* Recalculate success probabilities and counters for a given rate using EWMA */
+void rhapsody_calc_rate_stats(struct rhapsody_rate_stats *rrs);
+int rhapsody_get_tp_avg(struct rhapsody_rate *rr);
+int rhapsody_get_tp_max(struct rhapsody_rate *rr);
+
+/* debugfs */
+int rhapsody_stats_open(struct inode *inode, struct file *file);
+int rhapsody_stats_csv_open(struct inode *inode, struct file *file);
+ssize_t rhapsody_stats_read(struct file *file, char __user *buf, size_t len, loff_t *ppos);
+int rhapsody_stats_release(struct inode *inode, struct file *file);
+
+#endif
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_debugfs.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_debugfs.c	2015-02-13 16:12:21.335074636 +0100
@@ -0,0 +1,243 @@
+/*
+ * Copyright (C) 2015 Thomas Huehn <thomas@inet.tu-berlin.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Based on minstrel_debugfs.c:
+ *   Copyright (C) 2008-20014 Felix Fietkau <nbd@openwrt.org>
+ *    Sponsored by OpenWRT.org
+ *
+ * Based on minstrel.c:
+ *   Copyright (C) 2005-2007 Derek Smithies <derek@indranet.co.nz>
+ *   Sponsored by Indranet Technologies Ltd
+ *
+ * Based on sample.c:
+ *   Copyright (c) 2005 John Bicket
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions
+ *   are met:
+ *   1. Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer,
+ *      without modification.
+ *   2. Redistributions in binary form must reproduce at minimum a disclaimer
+ *      similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any
+ *      redistribution must be conditioned upon including a substantially
+ *      similar Disclaimer requirement for further binary redistribution.
+ *   3. Neither the names of the above-listed copyright holders nor the names
+ *      of any contributors may be used to endorse or promote products derived
+ *      from this software without specific prior written permission.
+ *
+ *   Alternatively, this software may be distributed under the terms of the
+ *   GNU General Public License ("GPL") version 2 as published by the Free
+ *   Software Foundation.
+ *
+ *   NO WARRANTY
+ *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ *   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ *   LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY
+ *   AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
+ *   THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,
+ *   OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+ *   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ *   THE POSSIBILITY OF SUCH DAMAGES.
+ */
+#include <linux/netdevice.h>
+#include <linux/types.h>
+#include <linux/skbuff.h>
+#include <linux/debugfs.h>
+#include <linux/ieee80211.h>
+#include <linux/slab.h>
+#include <linux/export.h>
+#include <net/mac80211.h>
+#include "rc80211_rhapsody.h"
+
+ssize_t
+rhapsody_stats_read(struct file *file, char __user *buf, size_t len, loff_t *ppos)
+{
+	struct rhapsody_debugfs_info *rs;
+
+	rs = file->private_data;
+	return simple_read_from_buffer(buf, len, ppos, rs->buf, rs->len);
+}
+
+int
+rhapsody_stats_release(struct inode *inode, struct file *file)
+{
+	kfree(file->private_data);
+	return 0;
+}
+
+int
+rhapsody_stats_open(struct inode *inode, struct file *file)
+{
+	struct rhapsody_sta_info *ri = inode->i_private;
+	struct rhapsody_debugfs_info *rs;
+	unsigned int i, tp_max, tp_avg, prob, eprob;
+	char *p;
+
+	rs = kmalloc(2048, GFP_KERNEL);
+	if (!rs)
+		return -ENOMEM;
+
+	file->private_data = rs;
+	p = rs->buf;
+	p += sprintf(p, "\n");
+	p += sprintf(p, "best   __________rate_________    ______"
+			"statistics______    ________last_______    "
+			"______sum-of________\n");
+	p += sprintf(p, "rate  [name idx airtime max_tp]  [ ø(tp) ø(prob) "
+			"sd(prob)]  [prob.|retry|suc|att]  "
+			"[#success | #attempts]\n");
+
+	for (i = 0; i < ri->n_rates; i++) {
+		struct rhapsody_rate *rr = &ri->r[i];
+		struct rhapsody_rate_stats *rrs = &ri->r[i].stats;
+
+		*(p++) = (i == ri->max_tp_rate[0]) ? 'A' : ' ';
+		*(p++) = (i == ri->max_tp_rate[1]) ? 'B' : ' ';
+		*(p++) = (i == ri->max_tp_rate[2]) ? 'C' : ' ';
+		*(p++) = (i == ri->max_tp_rate[3]) ? 'D' : ' ';
+		*(p++) = (i == ri->max_prob_rate) ? 'P' : ' ';
+
+		p += sprintf(p, " %3u%s ", rr->bitrate / 2,
+				(rr->bitrate & 1 ? ".5" : "  "));
+		p += sprintf(p, "%3u  ", i);
+		p += sprintf(p, "%6u ", rr->perfect_tx_time);
+
+		tp_max = rhapsody_get_tp_max(rr);
+		tp_avg = rhapsody_get_tp_avg(rr);
+		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
+		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
+
+		p += sprintf(p, "%4u.%1u   %4u.%1u   %3u.%1u    %3u.%1u"
+				"     %3u.%1u %3u   %3u %-3u   "
+				"%9llu   %-9llu\n",
+				tp_max / 10, tp_max % 10,
+				tp_avg / 10, tp_avg % 10,
+				eprob / 10, eprob % 10,
+				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
+				prob / 10, prob % 10,
+				rrs->retry_count,
+				rrs->last_success,
+				rrs->last_attempts,
+				(unsigned long long)rrs->succ_hist,
+				(unsigned long long)rrs->att_hist);
+	}
+	p += sprintf(p, "\nTotal packet count::    ideal %d      "
+			"lookaround %d\n\n",
+			ri->total_packets - ri->sample_packets,
+			ri->sample_packets);
+	rs->len = p - rs->buf;
+
+	WARN_ON(rs->len + sizeof(*rs) > 2048);
+
+	return 0;
+}
+
+static const struct file_operations rhapsody_stat_fops = {
+	.owner = THIS_MODULE,
+	.open = rhapsody_stats_open,
+	.read = rhapsody_stats_read,
+	.release = rhapsody_stats_release,
+	.llseek = default_llseek,
+};
+
+int
+rhapsody_stats_csv_open(struct inode *inode, struct file *file)
+{
+	struct rhapsody_sta_info *ri = inode->i_private;
+	struct rhapsody_debugfs_info *rs;
+	struct timeval tv;
+	unsigned int i, tp_max, tp_avg, prob, eprob;
+	char *p;
+
+	rs = kmalloc(2048, GFP_KERNEL);
+	if (!rs)
+		return -ENOMEM;
+
+	file->private_data = rs;
+	p = rs->buf;
+
+	do_gettimeofday(&tv);
+
+	for (i = 0; i < ri->n_rates; i++) {
+		struct rhapsody_rate *rr = &ri->r[i];
+		struct rhapsody_rate_stats *rrs = &ri->r[i].stats;
+
+		p += sprintf(p, "%ld.%.6ld,", tv.tv_sec, tv.tv_usec);
+		p += sprintf(p, "%s" ,((i == ri->max_tp_rate[0]) ? "A," : ","));
+		p += sprintf(p, "%s" ,((i == ri->max_tp_rate[1]) ? "B," : ","));
+		p += sprintf(p, "%s" ,((i == ri->max_tp_rate[2]) ? "C," : ","));
+		p += sprintf(p, "%s" ,((i == ri->max_tp_rate[3]) ? "D," : ","));
+		p += sprintf(p, "%s" ,((i == ri->max_prob_rate) ? "P," : ","));
+
+		p += sprintf(p, "%u%s", rr->bitrate / 2,
+				(rr->bitrate & 1 ? ".5," : ","));
+		p += sprintf(p, "%u,", i);
+		p += sprintf(p, "%u,",rr->perfect_tx_time);
+
+		tp_max = rhapsody_get_tp_max(rr);
+		tp_avg = rhapsody_get_tp_avg(rr);
+		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
+		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
+
+		p += sprintf(p, "%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u,%u,%u,"
+				"%llu,%llu,%d,%d\n",
+				tp_max / 10, tp_max % 10,
+				tp_avg / 10, tp_avg % 10,
+				eprob / 10, eprob % 10,
+				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
+				prob / 10, prob % 10,
+				rrs->retry_count,
+				rrs->last_success,
+				rrs->last_attempts,
+				(unsigned long long)rrs->succ_hist,
+				(unsigned long long)rrs->att_hist,
+				ri->total_packets - ri->sample_packets,
+				ri->sample_packets);
+
+	}
+	rs->len = p - rs->buf;
+
+	WARN_ON(rs->len + sizeof(*rs) > 2048);
+
+	return 0;
+}
+
+static const struct file_operations rhapsody_stat_csv_fops = {
+	.owner = THIS_MODULE,
+	.open = rhapsody_stats_csv_open,
+	.read = rhapsody_stats_read,
+	.release = rhapsody_stats_release,
+	.llseek = default_llseek,
+};
+
+void
+rhapsody_add_sta_debugfs(void *priv, void *priv_sta, struct dentry *dir)
+{
+	struct rhapsody_sta_info *ri = priv_sta;
+
+	ri->dbg_stats = debugfs_create_file("rhapsody_stats", S_IRUGO, dir, ri,
+			&rhapsody_stat_fops);
+
+	ri->dbg_stats_csv = debugfs_create_file("rhapsody_stats_csv", S_IRUGO, dir,
+			ri, &rhapsody_stat_csv_fops);
+}
+
+void
+rhapsody_remove_sta_debugfs(void *priv, void *priv_sta)
+{
+	struct rhapsody_sta_info *ri = priv_sta;
+
+	debugfs_remove(ri->dbg_stats);
+
+	debugfs_remove(ri->dbg_stats_csv);
+}
+
