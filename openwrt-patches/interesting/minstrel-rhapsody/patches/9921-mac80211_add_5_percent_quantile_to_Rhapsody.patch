Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.c
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody.c	2015-02-13 01:47:40.288918576 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.c	2015-02-13 01:47:40.288918576 +0100
@@ -105,6 +105,42 @@
 	return tp_max;
 }
 
+/* return the 5%-Quantile of throughput:
+ * the true value of throughput is with a probability of ~95%
+ * above the calculated bound: ø(thr) - 2*σ(thr) */
+int rhapsody_get_tp_5_percent_quantile(struct rhapsody_rate *rr)
+{
+	int tp_sd, tp_avg, usecs;
+
+	usecs = rr->perfect_tx_time;
+	if (!usecs)
+		usecs = 1000000;
+
+	tp_sd = rr->stats.prob_ewmsd * rhapsody_get_tp_max(rr) / 1000;
+	tp_avg = rhapsody_get_tp_avg(rr);
+
+	if (tp_avg > 2 * tp_sd)
+		return (tp_avg - 2 * tp_sd);
+	else
+		return 0;
+}
+
+/* return the 5%-Quantile of probability:
+ * the true value of sucess prob is with a probability of ~95%
+ * above the calculated bound: ø(prob) - 2*σ(prob) */
+int rhapsody_get_prob_5_percent_quantile(struct rhapsody_rate *rr)
+{
+	int prob_ewma, prob_sd;
+
+	prob_ewma = RHAPSODY_TRUNC(rr->stats.prob_ewma * 1000);
+	prob_sd = rr->stats.prob_ewmsd;
+
+	if (prob_ewma > 2 * prob_sd)
+		return (prob_ewma - 2 * prob_sd);
+	else
+		return 0;
+}
+
 /* find & sort topmost throughput rates */
 static inline void
 rhapsody_sort_best_tp_rates(struct rhapsody_sta_info *ri, int i, u8 *tp_list)
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_debugfs.c
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_debugfs.c	2015-02-13 01:47:40.288918576 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_debugfs.c	2015-02-13 01:47:40.288918576 +0100
@@ -79,7 +79,7 @@
 {
 	struct rhapsody_sta_info *ri = inode->i_private;
 	struct rhapsody_debugfs_info *rs;
-	unsigned int i, tp_max, tp_avg, prob, eprob;
+	unsigned int i, tp_max, tp_avg, tp_5_percent_q, prob, eprob;
 	char *p;
 
 	rs = kmalloc(2048, GFP_KERNEL);
@@ -89,11 +89,11 @@
 	file->private_data = rs;
 	p = rs->buf;
 	p += sprintf(p, "\n");
-	p += sprintf(p, "best   __________rate_________    ______"
-			"statistics______    ________last_______    "
+	p += sprintf(p, "best   __________rate_________    ___________"
+			"statistics__________    ________last_______    "
 			"______sum-of________\n");
-	p += sprintf(p, "rate  [name idx airtime max_tp]  [ ø(tp) ø(prob) "
-			"sd(prob)]  [prob.|retry|suc|att]  "
+	p += sprintf(p, "rate  [name idx airtime max_tp]  [ ø(tp) 5\%%_Q(tp) "
+			"ø(prob) sd(prob)]  [prob.|retry|suc|att]  "
 			"[#success | #attempts]\n");
 
 	for (i = 0; i < ri->n_rates; i++) {
@@ -113,14 +113,16 @@
 
 		tp_max = rhapsody_get_tp_max(rr);
 		tp_avg = rhapsody_get_tp_avg(rr);
+		tp_5_percent_q = rhapsody_get_tp_5_percent_quantile(rr);
 		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
 		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
 
-		p += sprintf(p, "%4u.%1u   %4u.%1u   %3u.%1u    %3u.%1u"
-				"     %3u.%1u %3u   %3u %-3u   "
+		p += sprintf(p, "%4u.%1u   %4u.%1u   %4u.%1u   %3u.%1u    "
+				"%3u.%1u     %3u.%1u %3u   %3u %-3u   "
 				"%9llu   %-9llu\n",
 				tp_max / 10, tp_max % 10,
 				tp_avg / 10, tp_avg % 10,
+				tp_5_percent_q / 10, tp_5_percent_q % 10,
 				eprob / 10, eprob % 10,
 				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
 				prob / 10, prob % 10,
@@ -155,7 +157,7 @@
 	struct rhapsody_sta_info *ri = inode->i_private;
 	struct rhapsody_debugfs_info *rs;
 	struct timeval tv;
-	unsigned int i, tp_max, tp_avg, prob, eprob;
+	unsigned int i, tp_max, tp_avg, tp_5_percent_q, prob, eprob;
 	char *p;
 
 	rs = kmalloc(2048, GFP_KERNEL);
@@ -185,13 +187,15 @@
 
 		tp_max = rhapsody_get_tp_max(rr);
 		tp_avg = rhapsody_get_tp_avg(rr);
+		tp_5_percent_q = rhapsody_get_tp_5_percent_quantile(rr);
 		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
 		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
 
-		p += sprintf(p, "%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u,%u,%u,"
+		p += sprintf(p, "%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u,%u,%u,"
 				"%llu,%llu,%d,%d\n",
 				tp_max / 10, tp_max % 10,
 				tp_avg / 10, tp_avg % 10,
+				tp_5_percent_q / 10, tp_5_percent_q % 10,
 				eprob / 10, eprob % 10,
 				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
 				prob / 10, prob % 10,
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.c
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_ht.c	2015-02-13 01:47:40.288918576 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.c	2015-02-13 01:53:17.715762916 +0100
@@ -402,6 +402,41 @@
 	return tp_max;
 }
 
+/* return the 5%-Quantile of probability:
+ * the true value of probability lies with a probability of ~95%
+ * above the calculated bound: ø(prob) - 2*σ(prob) */
+static int
+rhapsody_ht_get_prob_5_percent_quantile(struct rhapsody_ht_sta *ri, int group,
+					int rate)
+{
+	struct rhapsody_rate_stats *rrs;
+	int prob_ewma, prob_sd;
+
+	rrs = &ri->groups[group].rates[rate];
+	prob_ewma = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
+	prob_sd = rrs->prob_ewmsd;
+
+	if (prob_ewma > 2 * prob_sd)
+		return (prob_ewma - 2 * prob_sd);
+	else
+		return 0;
+}
+
+/* return the 5%-Quantile of throughput:
+ * the true value of throughput is with a probability of ~95%
+ * above the calculated bound: ø(thr) - 2*σ(thr) */
+int
+rhapsody_ht_get_tp_5_percent_quantile(struct rhapsody_ht_sta *ri, int group,
+				      int rate)
+{
+	int tp_max, prob_5_percent_q;
+
+	tp_max = rhapsody_ht_get_tp_max(ri, group, rate);
+	prob_5_percent_q = rhapsody_ht_get_prob_5_percent_quantile(ri, group,
+								   rate);
+
+	return (tp_max * prob_5_percent_q / 1000);
+}
 
 /*
  * Find & sort topmost throughput rates
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht_debugfs.c
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_ht_debugfs.c	2015-02-13 01:47:40.288918576 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht_debugfs.c	2015-02-13 01:47:40.288918576 +0100
@@ -54,7 +54,7 @@
 rhapsody_ht_stats_dump(struct rhapsody_ht_sta *ri, int i, char *p)
 {
 	const struct mcs_group *mg;
-	unsigned int j, tp_max, tp_avg, prob, eprob, tx_time;
+	unsigned int j, tp_max, tp_avg, tp_5_percent_q, prob, eprob, tx_time;
 	char htmode = '2';
 	char gimode = 'L';
 	u32 gflags;
@@ -118,14 +118,16 @@
 
 		tp_max = rhapsody_ht_get_tp_max(ri, i, j);
 		tp_avg = rhapsody_ht_get_tp_avg(ri, i, j);
+		tp_5_percent_q = rhapsody_ht_get_tp_5_percent_quantile(ri, i, j);
 		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
 		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
 
-		p += sprintf(p, "%4u.%1u   %4u.%1u   %3u.%1u    %3u.%1u"
-				"     %3u.%1u %3u   %3u %-3u   "
+		p += sprintf(p, "%4u.%1u   %4u.%1u   %4u.%1u   %3u.%1u    "
+				"%3u.%1u     %3u.%1u %3u   %3u %-3u   "
 				"%9llu   %-9llu\n",
 				tp_max / 10, tp_max % 10,
 				tp_avg / 10, tp_avg % 10,
+				tp_5_percent_q / 10, tp_5_percent_q % 10,
 				eprob / 10, eprob % 10,
 				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
 				prob / 10, prob % 10,
@@ -165,11 +167,11 @@
 
 	p += sprintf(p, "\n");
 	p += sprintf(p, "              best   ____________rate__________    "
-			"______statistics______    ________last_______    "
-			"______sum-of________\n");
+			"___________statistics__________    ________last"
+			"_______    ______sum-of________\n");
 	p += sprintf(p, "mode guard #  rate  [name   idx airtime  max_tp]  "
-			"[ ø(tp) ø(prob) sd(prob)]  [prob.|retry|suc|att]  [#success | "
-			"#attempts]\n");
+			"[ ø(tp) 5\%%_Q(tp) ø(prob) sd(prob)]  [prob.|retry|"
+			"suc|att]  [#success | #attempts]\n");
 
 	p = rhapsody_ht_stats_dump(ri, RHAPSODY_CCK_GROUP, p);
 	for (i = 0; i < RHAPSODY_CCK_GROUP; i++)
@@ -203,7 +205,7 @@
 			    struct timeval tv)
 {
 	const struct mcs_group *mg;
-	unsigned int j, tp_max, tp_avg, prob, eprob, tx_time;
+	unsigned int j, tp_max, tp_avg, tp_5_percent_q, prob, eprob, tx_time;
 	char htmode = '2';
 	char gimode = 'L';
 	u32 gflags;
@@ -266,13 +268,15 @@
 
 		tp_max = rhapsody_ht_get_tp_max(ri, i, j);
 		tp_avg = rhapsody_ht_get_tp_avg(ri, i, j);
+		tp_5_percent_q = rhapsody_ht_get_tp_5_percent_quantile(ri, i, j);
 		prob = RHAPSODY_TRUNC(rrs->cur_prob * 1000);
 		eprob = RHAPSODY_TRUNC(rrs->prob_ewma * 1000);
 
-		p += sprintf(p, "%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u,%u,"
+		p += sprintf(p, "%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u.%u,%u,%u,"
 				"%u,%llu,%llu,",
 				tp_max / 10, tp_max % 10,
 				tp_avg / 10, tp_avg % 10,
+				tp_5_percent_q / 10, tp_5_percent_q % 10,
 				eprob / 10, eprob % 10,
 				rrs->prob_ewmsd / 10, rrs->prob_ewmsd % 10,
 				prob / 10, prob % 10,
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.h
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody_ht.h	2015-02-13 01:47:40.288918576 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody_ht.h	2015-02-13 01:47:40.288918576 +0100
@@ -158,5 +158,7 @@
 void rhapsody_ht_remove_sta_debugfs(void *priv, void *priv_sta);
 int rhapsody_ht_get_tp_avg(struct rhapsody_ht_sta *ri, int group, int rate);
 int rhapsody_ht_get_tp_max(struct rhapsody_ht_sta *ri, int group, int rate);
+int rhapsody_ht_get_tp_5_percent_quantile(struct rhapsody_ht_sta *ri, int group,
+					  int rate);
 
 #endif
Index: compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.h
===================================================================
--- compat-wireless-2014-11-04.orig/net/mac80211/rc80211_rhapsody.h	2015-02-13 01:47:40.236917520 +0100
+++ compat-wireless-2014-11-04/net/mac80211/rc80211_rhapsody.h	2015-02-13 01:49:56.951691327 +0100
@@ -203,6 +203,7 @@
 void rhapsody_calc_rate_stats(struct rhapsody_rate_stats *rrs);
 int rhapsody_get_tp_avg(struct rhapsody_rate *rr);
 int rhapsody_get_tp_max(struct rhapsody_rate *rr);
+int rhapsody_get_tp_5_percent_quantile(struct rhapsody_rate *rr);
 
 /* debugfs */
 int rhapsody_stats_open(struct inode *inode, struct file *file);
