#!/bin/sh
. /tmp/loader

[ -e "/tmp/LOCKFILE_APPLY" ] && {
	_log do apply_profile daemon info "[OK] no scheduler action"
	exit 0
}

ERR=1
while getopts "S:a:A:rlpfOPHU" FLAG; do {
	ERR=0

	case $FLAG in
		S)
			# MINUTE = 00...59
			# HOUR   = 00...23
			eval $( date '+MINUTE=%M; HOUR=%H; WEEKDAY=%A; DAYOFMONTH=%e;' )

			echo >>$SCHEDULER '_watch monitoring'
			echo >>$SCHEDULER '_watch coredump'
			echo >>$SCHEDULER '_wifi watch_phy_problems'

			case "$OPTARG" in
				minimal)
					case "$MINUTE" in
						00|15|30|45)
							echo >>$SCHEDULER '/etc/init.d/S69watch_olsrd_fff+'

							case "$MINUTE" in
								00)
									case "$HOUR" in
										04)
											echo >>$SCHEDULER '_firmware update_pmu'
										;;
									esac
								;;
							esac

							echo >>$SCHEDULER '_watch hanging_command usual_suspects'
						;;
					esac
				;;
				lazy)
					_watch autorun
				;;
				newstyle)
					# only compat-layer
					. /usr/sbin/cron.taskplanner.default
				;;
			esac
		;;
		a)
			echo >>$SCHEDULER "$OPTARG"
		;;
		r)
			[ -e /tmp/SEND_ALIVE_FAILED ] && {				# fixme! this is a hack
				echo >>$SCHEDULER_IMPORTANT '/etc/init.d/S69watch_olsrd_fff+'
			}
		;;
		l)
			_scheduler queue_list
		;;
		P)
			case "$( uci -q get network.@gatewaycheck[0].mode )" in
				ping|1)
					SERVER_IP="8.8.8.8"
					LOSS="$( ping -q -c 1 $SERVER_IP | sed -n 's/^.* received, \([0-9]*\)%.*/\1/p' )"
					[ "${LOSS:-222}" -gt 0 ] && _log pingtest daemon info "[ERR] packetloss is ${LOSS}% to IP $SERVER_IP"
				;;
			esac
		;;
		p)
			_scheduler queue_purge
		;;
		O)
			case "$CONFIG_PROFILE" in
				schoeneck*|boltenhagendh*|apphalle*)
					# this means, no wired clients or we must speak batman on ethernet too
					olsr_unneeded()
					{
						pidof bat_events >/dev/null || return 1
						$( _system uptime min ) -gt 30 || return 1
						batctl gateways | grep -q "MBit" || return 1

						test -e "/tmp/OLSR_HNA_SLAVE_PINGTEST" && return 0
						test -e "/tmp/service_olsrd_nowatching" || return 0

						return 1
					}

					olsr_unneeded && {
						_log do schoeneck_noolsr daemon info "olsr_unneeded() ok"
						rm "/tmp/OLSR_HNA_SLAVE_PINGTEST"
						touch "/tmp/service_olsrd_nowatching"
						_olsr daemon stop "batman_active_now"
						_net local_inet_offer >/dev/null || ip route add default via 192.168.2.1
					}
				;;
			esac

			if pidof olsrd >/dev/null ; then
				_olsr build_tables

				_olsr restarts_are_suspicious_often && {
					_system reboot_safe "[ERR] olsr restarts > normality"
				}

				[ "$( uci -q get olsrd.@meta[0].hnaslave )" = "1" ] && {
					case "$CONFIG_PROFILE" in
						hotello*|dhsylt*|limona*|boltenhagendh*)
						;;
						*)
							/usr/sbin/cron.olsr-hna-slave
						;;
					esac
				}

				case "$NODENUMBER-$CONFIG_PROFILE" in
					99-liszt28*)
						IP='10.63.2.25'

						set -- $( fgrep "$IP" "/tmp/OLSR/ALL" | head -n1 )
						case "$6" in
							# ETX-value
							'0.100'|1.*|2.*|3.*)
								echo "0" >"/tmp/check_$IP"
							;;
							*)
								if _watch counter "/tmp/check_$IP" increment 1 max 20 ; then
									_log do "check_$IP" daemon info "bad value: $6"
								else
									_log do "check_$IP" daemon alert "bad value: $6 - rebooting"
									/sbin/reboot
								fi
							;;
						esac
					;;
				esac
			else
				if [ -e "/tmp/service_olsrd_nowatching" ]; then
					[ -e "/tmp/OLSR_HNA_SLAVE_PINGTEST" ] && {
						read IP <"/tmp/OLSR_HNA_SLAVE_PINGTEST"
						ping -qc 1 $IP >/dev/null || {
							ip route del default
							rm "/tmp/service_olsrd_nowatching"	# fire olsr
							rm "/tmp/OLSR_HNA_SLAVE_PINGTEST"
						}
					}
				else
					_olsr daemon start "no running daemon"
				fi
			fi
		;;
		*)
			ERR=1
		;;
	esac
} done

if [ "$ERR" = "1" ]; then
	_scheduler print_usage && exit 1
else
	true
fi
