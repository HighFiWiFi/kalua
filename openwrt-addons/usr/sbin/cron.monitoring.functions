heartbeat_minimal_send()
{
	local file_url="/tmp/MONITORING_HEARTBEAT_URL"
	local file_archiv="/tmp/ARCHIV_MONITORING"
	local mac url

	[ -e "$file_archiv" ] || return 1

	[ -e "$file_url" ] || {
		mac="$( _sanitizer do "$( _net dev2mac ${WIFIDEV:-$LANDEV} )" hex )"
		url="$( uci -q get system.@monitoring[0].url )/meshrdf/?refresh=true&mac=$mac"
		echo "$url" >"$file_url"
	}

	read url <"$file_url"
	url="${url}&up=$( _system uptime hours )"

	_wget do "$url" 30 >/dev/null && echo "$url" >"$file_archiv"
}

data_count_tasks()	# each 4 hours
{
	local file
	local kernel=0
	local user=0

	for file in /proc/[0-9]*/cmdline; do {
		read line <"$file"
		if [ -n "$line" ]; then
			user=$(( $user + 1 ))
		else
			kernel=$(( $kernel + 1 ))
		fi
	} done

	echo "p0 $kernel"
	echo "p1 $user"
}

data_count_kmodules()
{
	echo -n "m0 "
	sed -n '$=' /proc/modules
}

data_time()
{
	echo -n "d0 "
	_system date unixtime
}

data_node()
{
	echo -n "n0 "
	uci get system.@profile[0].nodenumber
}



#for NAME in count_tasks time node; do {
#	data_$NAME
#} done
# >>/tmp/URL.dirty

# urlencode ALLES in einem rutsch!
#url_encode /tmp/URL.dirty >/tmp/URL.dirty2

# ab hier: zusammenbauen: normal oder json

#while read LINE; do {
#	echo -n "wort1=rest&"		# via brace expansion: word1 = bis zum ersten "+"
#} done <"/tmp/URL.dirty2" >"/tmp/URL.dirty3"
