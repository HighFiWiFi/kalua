#!/bin/sh

# rrdtool fetch /tmp/datafile.rrd AVERAGE

rrd_setup()
{
	local file="/tmp/datafile.rrd"
	local interval=60			# [sec]
	local maxwait=$(( $interval * 2 ))	# [sec] writes 'unknown' into database after this time
	local countertype="DERIVE"		# or COUNTER or ABSOLUTE (each update new values)
	local minmax="U:U"			# allow all values, do not limit min or max

	if [ -e "$file" ]; then
		rm "$file"
	else
		_log do setup daemon info "initial setup of $file"
	fi

	# DS = Data Source

	rrdtool create "$file" \
		DS:upload_packets:${countertype}:${maxwait}:${minmax} \
		DS:upload_bytes:${countertype}:${maxwait}:${minmax} \
		DS:download_packets:${countertype}:${maxwait}:${minmax} \
		DS:download_bytes:${countertype}:${maxwait}:${minmax} \
		DS:wifi_stations:GAUGE:${maxwait}:${minmax} \
		DS:different_users:GAUGE:${maxwait}:${minmax} \
		DS:tcp:GAUGE:${maxwait}:${minmax} \
		DS:udp:GAUGE:${maxwait}:${minmax} \
		--step $interval \
		RRA:AVERAGE:0.5:1:1440
#		RRA:AVERAGE:0.5:4:3600 \
#		RRA:AVERAGE:0.5:24:3600
}

rrd_update()
{
	local funcname="rrd_update"
	local file="/tmp/datafile.rrd"
	local up_packets up_bytes
	local down_packets down_bytes
	local mac stations=0
	local users=0
	local line udp=0 tcp=0

	[ -e "$file" ] || rrd_setup

	set -- $( iptables -nxvL FORWARD 2 )
	up_packets="-$(( $1 * 350 ))"		# upscale
	up_bytes=-$2
	set -- $( iptables -nxvL FORWARD 1 )
	down_packets=$(( $1 * 350 ))
	down_bytes=$2

	for mac in /sys/kernel/debug/ieee80211/phy0/netdev:$WIFIDEV/stations/*; do stations=$(( $stations + 1 )); done
	for mac in /tmp/vds_user_*; do users=$(( $users + 1 )); done

	while read line; do {
		case "$line" in
			*" tcp"*)
				tcp=$(( $tcp + 1 ))
			;;
			*)
				# this is not correct
				udp=$(( $udp + 1 ))
			;;
		esac
	} done <"/proc/net/nf_conntrack"

#	logger "up: $up_packets/$up_bytes down: $down_packets/$down_bytes stations: $stations users: $users conn-tcp/udp: $tcp/$udp"

	# upscale, so we can see it in graph (fixme! use CDEF-expression)
	stations=$(( stations * 100000 ))	# 5 station = at 500k/s traffic-level
	users=$(( $users * 10000 ))		# 200 user = at 2 MB/s traffic-level
	tcp=$(( $tcp * 1000 ))
	udp=$(( $udp * 1000 ))

	rrdtool update "$file" N:${up_packets}:${up_bytes}:${down_packets}:${down_bytes}:${stations}:${users}:${tcp}:${udp} || {
		_log do rrd_update daemon info "error $?"
	}
}

rrd_show()
{
	local duration="${1:-$( _system uptime min )min}"	# e.g. 15min, 4h
	local webfile="/www/traffic.png"
	local output="/tmp/graph.png"
	local file="${2:-/tmp/datafile.rrd}"
	local context="traffic"
	local date="$( _system date humanreadable nice )"
	local label="bytes/sec & users/stations (1 = 100k) & TCP/UDP-conntrack (1000 = 1M)"	# Y-axis
	local location="$( _weblogin metadata_locationname )"
	local alpha="44"

	#ff0085 = pink
	#fc7713 = orange
	#5b6104 = forestgreen
	#a1a600 = lightgreen
	#d20000 = red
	#312221 = darkgrey
	#ffb900 = yellow
	#004fc2 = blue
	#00bea0 = cyan

	local color1="#ff0000"		# upload_packets
	local color2="#0000ff${alpha}"	# upload_bytes
	local color3="#ccdd00"		# download_packets
	local color4="#00ffdd${alpha}"	# download_bytes
	local color5="#00ffaa"		# wifi_stations (connected)
	local color6="#00bbee"		# users_overall (login ok and valid)
	local color7="#4400bb"		# tcp
	local color8="#2211ff"		# udp

#	logger -s "duration = $duration"

	# supress output of image-size
	rrdtool >/dev/null graph "$output" \
		--imgformat PNG --width 900 --height 600 \
		--start -${duration} \
		--vertical-label "${label}" \
		--title "$location: forwarded WAN-traffic $WANDEV host $HOSTNAME - time: $date (-$duration)" \
		--watermark "Advanced kalua-framework by bittorf wireless ))" \
		DEF:upload_packets=${file}:upload_packets:AVERAGE \
		DEF:upload_bytes=${file}:upload_bytes:AVERAGE \
		DEF:download_packets=${file}:download_packets:AVERAGE \
		DEF:download_bytes=${file}:download_bytes:AVERAGE \
		DEF:wifi_stations=${file}:wifi_stations:AVERAGE \
		DEF:different_users=${file}:different_users:AVERAGE \
		DEF:tcp=${file}:tcp:AVERAGE \
		DEF:udp=${file}:udp:AVERAGE \
		LINE1:upload_packets${color1}:"upload [packets]" \
		AREA:upload_bytes${color2}:"upload [bytes]" \
		LINE1:download_packets${color3}:"download [packets]" \
		AREA:download_bytes${color4}:"download [bytes]" \
		LINE2:wifi_stations${color5}:"wifi_stations" \
		LINE2:different_users${color6}:"users_logged_in" \
		LINE1:tcp${color7}:"TCP" \
		LINE1:udp${color8}:"UDP" || {
			logger -s "error during rrdtool graph ..."
			return 1
		}

	[ -h "$webfile" ] || ln -s "$output" "$webfile"
#	logger -s "wrote: '$output', look at http://$LANADR/$( basename "$webfile" )"

	return 0
}

rrd_upload()
{
	local funcname="rrd_upload"
	local duration="$1"
	local file="/tmp/graph.png"
	local date="$( _system date humanreadable | sed 's/:/./g' )"
	local dest="$( uci get system.@vds[0].server )../media/traffic_${HOSTNAME}_${date}.png"
	local try=30

	rrd_show "$duration" || return 1

	. /tmp/loader
	while [ $try -gt 0 ]; do {
		_log do $funcname daemon info "uploading '$file' to '$dest'"
		scp -i /etc/dropbear/dropbear_dss_host_key "$file" "$dest" && break
		sleep $try
		try=$(( $try - 1 ))
	} done
}
