#!/bin/sh
. /tmp/loader

# fixme! Idee: - es wird direkt eine Seite erzeugt, die man sich direkt ausdrucken kann mit allen
#              - technischen Daten fuer diesen Router und freies Feld fuer das Passwort

if [ -z "$1" ]; then		# call from httpd
	eval $( _http query_string_sanitize )

	[ "$REQUEST_METHOD" = "POST" ] && {			# do this, if submit-button was pressed
								# (POST-method) - GET arguments are passed too(!)
		[ -n "$FORM_LATITUDE" ] && [ -n "$FORM_LONGITUDE" ] && {
			_log do setting_gps user info "LATITUDE='$FORM_LATITUDE' LONGITUDE='$FORM_LONGITUDE'"
			_nvram set ff_adm_latlon "$FORM_LATITUDE;$FORM_LONGITUDE"
			_nvram set commit "changed ff_adm_latlon"
			echo >>$SCHEDULER '_olsr daemon restart scheduler_controlled'
		}

		[ -n "$IPWIZARD" ] && {
			eval "$( _ipsystem do $IPWIZARD )"
		}

		[ -n "$TFTP_HARDWARE" ] && {
			_tool htmlout_head
			fkt_print_tftp_flashing
			_tool htmlout_foot
			exit
		}
	}
else				# call from shell
	OPT="$1"	
fi

case "$OPT" in
	ip2mac)
		_http header_mimetype_output text/plain

		_net ip2mac "$HTTP_HOST"
	;;
	sms)
		_http header_mimetype_output text/plain

		case "$CONFIG_PROFILE" in
			ejbw*)
				[ "$REMOTE_ADDR" = "192.168.111.21" ] || MESSAGE=
			;;
			*)
				MESSAGE=
			;;
		esac

		if [ -n "$MESSAGE" ]; then
			_sms send "$NUMBER" "$MESSAGE"
			echo "ok"
		else
			echo "forbidden"
		fi
	;;
	download)
		mkdir -p '/tmp/STATS'
		_http header_mimetype_output "application/octet-stream" "testdownload_from_${HOSTNAME}_to_${REMOTE_ADDR}.bin"
		_stopwatch start "download_${REMOTE_ADDR}"

		if dd if=/dev/zero bs=128k count=40 2>&- ; then
			_stopwatch stop "download_${REMOTE_ADDR}" quiet,speed 5243 kilobytes >"/tmp/STATS/download_${REMOTE_ADDR}"
		else
			_stopwatch stop "download_${REMOTE_ADDR}" quiet,speed 0 "aborted_download:rc$?"
		fi
	;;
	download_results)
		_http header_mimetype_output "text/plain"

		if [ -e "/tmp/STATS/download_${REMOTE_ADDR}" ]; then
			cat "/tmp/STATS/download_${REMOTE_ADDR}" | cut -d'.' -f1
		else
			echo "?"
		fi
	;;
	minstrel)
		echo -en "Content-type: text/plain\n\n"

		case "$REMOTE_ADDR" in
			127.0.0.1|$WIFIADR|$LANADR|$WANADR)
				REMOTE_ADDR="$( ip route list exact 0.0.0.0/0 )"
				REMOTE_ADDR="$( _sanitizer do "$REMOTE_ADDR" ip4 )"
			;;
		esac

		NEXTHOP="$( traceroute -n "$REMOTE_ADDR" -m 1 -q 1 -w 10 | tail -n1 )"
		NEXTHOP="$( _sanitizer do "$NEXTHOP" ip4 )"
		[ -z "$NEXTHOP" ] && {
			NEXTHOP="$( ip route list exact 0.0.0.0/0 )"
			NEXTHOP="$( _sanitizer do "$NEXTHOP" ip4 )"
		}

		# minstrel-trace: execute on gateway:
		# ip=10.63.48.1; while :; do case "$ip" in $LANADR|$WIFIADR|$WANADR) break ;; esac; O="$( _tool remote "$ip" minstrel )"; echo "$ip: $O"; eval $O; done >/tmp/T;cat /tmp/T; rm /tmp/T

		_wifi minstrel "$NEXTHOP"
	;;
	startshell)
		_http header_mimetype_output "text/plain"

		if [ -n "$LOWMEM" ]; then
			/etc/init.d/dropbear restart || {
				echo >>$SCHEDULER_IMPORTANT '_watch sshd_or_telnet force'
				pidof dropbear >/dev/null || {
					echo >>$SCHEDULER_IMPORTANT '_watch sshd_or_telnet force'
					_watch sshd_or_telnet force
				}
			}
		else
			_watch sshd_or_telnet force
			echo "# pidof dropbear: '$( pidof dropbear )'"
			echo "# pidof telnetd: '$( pidof telnetd )'"
		fi
	;;
	scan_summary)
		_tool htmlout_head
		_tool htmlout_$OPT
	;;
	print_everlog)
		_tool htmlout_head
		[ ! -e /www/everlasting_syslog.txt ] && {
			echo "Bisher sind keine wichtigen Systemmeldungen angefallen.<br>"
			exit
		}
		echo "<pre>"
		cat /www/everlasting_syslog.txt
		echo "</pre>"
	;;
	neigh)
		_tool htmlout_head
		func_print_neigh
	;;
	adblock_table)
		_tool htmlout_head
		func_print_adblock_table
	;;
	mac2ip_table)
		_tool htmlout_head
		func_print_mac2ip_table
	;;
	wifi_on_or_off)
		_tool htmlout_head
		func_wifi_on_or_off
	;;
	apply_profile)
		_tool htmlout_head
		echo >>$SCHEDULER '/etc/init.d/apply_profile.code'
	;;
	fwupdate)
		_tool htmlout_head
		func_print_update_help
	;;
	fwupdatecheck)
		_tool htmlout_head
		_tool fwupdatecheck
	;;
	tftp)
		_tool htmlout_head
		fkt_print_tftp_help
	;;
	wikistartpic)
		_tool htmlout_head
		fkt_grab_startpic_from_wiki
	;;
	killallwget)
		_tool htmlout_head
		fkt_killall_wget
	;;
	wifimac)
		_tool htmlout_head
		_net dev2mac "${WIFIDEV:-${LANDEV:-$WANDEV}}"
	;;
	time)
		_tool htmlout_head
		fkt_print_time
	;;
	version)
		_tool htmlout_head
		fkt_print_version
	;;
	notebookconf)
		_tool htmlout_head
		fkt_print_html_notebook_conf
	;;
	netfilterolsr)
		_tool htmlout_head
		fkt_print_html_netfilter_olsr
	;;
	netfilter)
		_tool htmlout_head
		fkt_print_html_netfilter
	;;
	speedarchiv)
		_tool htmlout_head
		fkt_print_html_speedarchiv
	;;
	speedtest)
		_tool htmlout_head
		_log do speedtest daemon info "do $ARGS (from $REMOTE_ADDR)"
		_speedtest do $ARGS
	;;
	tracearchiv)
		_tool htmlout_head
		fkt_print_html_tracearchiv
	;;
	servicearchiv)
		_tool htmlout_head
		fkt_print_html_servicearchiv
	;;
	node_data_archiv)
		_tool htmlout_head
		fkt_print_html_node_data_archiv
	;;
	sysinfo)
		_tool htmlout_head
		fkt_print_html_sysinfo
	;;
	syslog)
		_tool htmlout_head
		fkt_print_html_syslog
	;;
	tracetest)
		_tool htmlout_head
		fkt_print_html_internet_trace
	;;
	traceremote)
		_tool htmlout_head
		fkt_print_html_trace_to_remote
	;;
	telnet)
		_tool htmlout_head
		fkt_start_or_end_telnetd
	;;
	accounting)
		_tool htmlout_head
		fkt_print_accounting
	;;
	reboot)
		_tool htmlout_head
		fkt_print_link_to_reboot
	;;
	accounting_gen_cache)
		fkt_print_accounting generate_cache >/tmp/cached_fkt_print_accounting
	;;
	*)
		GUI=1
		_tool htmlout_head
		_tool htmlout_selectbox
	;;
esac

_tool htmlout_foot
