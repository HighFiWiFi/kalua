#!/bin/sh

_system_crashreboot()
{
	local funcname="system_crashreboot"
	local reason_long="$1"
	local unixtime file reason

	# beeing simple: dont invoke log()
	/bin/echo "parent: $0 $funcname() reason: '$reason_long'" >/dev/console

	case "$reason_long" in
		[0-9a-zA-Z])
			reason="$reason_long"	# one char/digit
		;;
		*)
			# dont change layout here, because in
			# /etc/init.d/generate_kalua_loader: reason_long()
			# we grep this function
			case "$reason_long" in
				nightly_reboot)	reason=0 ;;
				switch_error)	reason=1 ;;
				network_hangs)	reason=2 ;;
				overload)	reason=3 ;;
				olsrd_missing)  reason=4 ;;
				conntrack_full) reason=5 ;;
				flappy_ether)	reason=6 ;;
				flappy_olsr)	reason=7 ;;
				old_lockfile)	reason=8 ;;
				over_uptime)	reason=A ;;
				ubus_hangs)	reason=B ;;
				underload)	reason=C ;;
				cron_died)	reason=D ;;
				ssid_change)	reason=E ;;
				uhttpd_zombie)	reason=F ;;
				kmodules_tidyup)  reason=G ;;
				watchdog_disable) reason=H ;;
				patching_failed)  reason=I ;;
				sysupgrade_start) reason=J ;;
				download_failed)  reason=K ;;
				olsr_no_netifd)   reason=L ;;
				wrong_neighhash)  reason=M ;;
				apply_settings)	reason=N ;;
				applied_nodeid)	reason=O ;;
				procd_overload)	reason=P ;;
				bad_link)	reason=Q ;;
				wifimac_safed)	reason=R ;;
				task_hangs)	reason=S ;;
				apply_profile)	reason=T ;;
				err_wifialloc)	reason=U ;;
				kernel_unaligned_access) reason=V ;;
				page_alloc_fail) reason=W ;;
				BUG_bad_page)    reason=X ;;
				recursive_fault) reason=Y ;;
				wifi_txdma)      reason=Z ;;
				webcam_pic2small) reason=a ;;
				procfs_broken)    reason=b ;;
				hanging_wifi)     reason=c ;;
				khubd_blocked)    reason=d ;;
				lanping)	  reason=e ;;
				wanping)	  reason=f ;;
				ubus_dead)	  reason=g ;;
				netifd_overload)  reason=h ;;
				''|manual)
					reason=9
					reason_long='manual'
				;;
				*)
					reason=${#reason_long}		# hello   = 5
					reason=$(( 123 - $reason ))	# 123 - 5 = 118
					# 122 = z / 97 = a		# 118     = v
					reason="$( printf \\$(printf '%03o' $reason) )"
				;;
			esac
		;;
	esac

	# must include 'ux', this is our grep-pattern during bootup/restore time
	unixtime="$( /bin/date +%s )"
	file="/tmp/ux${reason},$(( $unixtime + 30 )),.sh"
	touch "$file" || _watch space_tmpfs

	# crashlog has this line, we use comma-separator
	# max 15 chars: reason/unixtime/separator = 3+10+2 = 15
	# CPU: 0 PID: 23018 Comm: ux0,1381076626, Not tainted 3.10.15 #5
	#			  ^^^^^^^^^^^^^^^ this is our filename

	[ -e '/www/CRASHLOG_WORKS' ] || echo "$funcname() reason: $reason_long =$reason" >>'/www/everlasting_syslog.txt'

	# fixme, use internal commands for "sleep"?
	# ~10 sec: i=100000; while let i=$i-1; do :; done
	echo >"$file" '#!/bin/sh'	# does not work when used in with cat?!
	cat >>"$file" <<EOF
( sync ) &
/bin/sleep 10
echo 'c' >/proc/sysrq-trigger
/bin/sleep 10
/sbin/reboot -f
EOF

	/bin/chmod +x "$file" && "$file"

	# last try
	echo 'c' >/proc/sysrq-trigger
	/sbin/reboot -f
}

_system_maintenance_window_active()
{
	case "$( date +%H )" in
		02|03|04)
			return 0
		;;
	esac

	test -e /tmp/MAINTENANCE
}

_system_architecture()
{
	local file='/tmp/system_architecture'
	local arch DISTRIB_TARGET

	[ -e "$file" ] || {
		# e.g. Architecture: ramips_24kec
		arch="$( _software package_status kernel | grep ^'Architecture:' )"
		arch="${arch#*: }"
		arch="${arch%%_*}"

		if [ -n "$arch" ]; then
			echo "$arch" >"$file"
		else
			# DISTRIB_TARGET='ar71xx/generic'
			# DISTRIB_TARGET='brcm47xx/generic'
			# DISTRIB_TARGET="rb532/generic"
			# DISTRIB_TARGET="ramips/generic"
			eval $( grep ^'DISTRIB_TARGET=' '/etc/openwrt_release' )
			arch="$DISTRIB_TARGET"
			arch="${arch%%/*}"

			echo "$arch" >"$file"
		fi
	}

	cat "$file"
}

_system_get_first_pid ()	# pidof returns an arbitrary sorted list, so we have to sort to get the lowest
{
	local processname="$1"
	local list_pids="$( pidof $processname )"
	local pid
	local max_pid=32767	# -> /proc/sys/kernel/pid_max -1 on kernel >= 2.5
	local min_pid=$max_pid

	for pid in $list_pids; do {
		[ $pid -lt $min_pid ] && {
			min_pid=$pid	
		}
	} done

	[ "$max_pid" = "$min_pid" ] || echo $min_pid
}

_system_globbing ()
{
	local STATE="$1"	# list conditions: 'set +o'
	
	case "$STATE" in
		off)
			set -f
		;;
		*)
			set +f
		;;
	esac
}

_system_version()	# fixme! use /etc/openwrt_version | /etc/openwrt_release
{
	local option="$1"				# e.g. "short"
	local file="/etc/freifunk-release"

	if [ -e "$file" ]; then
		case "$option" in
			short)
				head -n1 "$file"			# e.g. '1.6.37'
			;;
			*)
				grep ^Kit: "$file"			# e.g. 'fff_plus-26c3-000-12Feb2010-08uhr48'
			;;
		esac
	else
		if   [ -e '/etc/openwrt_version' ]; then
			case "$option" in
				short)
				;;
				*)
					echo -n 'git'
				;;
			esac

			cut -b2- '/etc/openwrt_version'			# e.g. '12345'

			return 0
		elif [ -e "/rom/etc/banner" ]; then
			file="/rom/etc/banner"
		else
			file="/etc/banner"
			[ -e "$file" ] || {
				echo '0'
				return 0
			}
		fi

		case "$option" in
			short)
				sed -n 's/^.*, r\([0-9]*\)[^0-9]*/\1/p' "$file"		# e.g. '24300'
			;;
			*)
				sed -n 's/^.*, r\([0-9]*\)[^0-9]*/git\1/p' "$file"	# e.g. 'git24300'	// fixme!
			;;
		esac
	fi
}

_system_reboot_safe()				# fixme! maybe shutting down services like vpn, olsrd?
{						# fixme! safe vds-data? rrd-data?
	local FUNC="system_reboot_safe"
	local REASON="$1"
	local LOCKFILE="/tmp/SAFE_REBOOT_SCHEDULED"
	local uptime

	_linklocal wifi_users "$WIFIDEV" >/dev/null && {
		_log do $FUNC daemon info "waiting till all wifi-clients disconnect, rescheduling myself"
		echo >>$SCHEDULER "_system reboot_safe '$1'"
		return
	}

	[ -e  "$LOCKFILE" ] && return
	touch "$LOCKFILE"

	_mail stash_for_later_resend

	cron.monitoring send_alive_message no_antenna_test	# maybe the last feedback can be helpful

	uptime=$( _system uptime sec )
	if [ $uptime -gt 85771 -a $uptime -lt 86775 -a "$reason" = 'nightly_reboot' ]; then
		# scheduled each 24h = 86400
		:
	else
		_log do $FUNC daemon alert "scheduling reboot - reason: '$REASON'"
	fi

	tail -n1 '/tmp/ARCHIV_MONITORING' | grep -q ^'#' || {			# found comment at fileend
		_log do $FUNC daemon info "send_alive_message was unsuccessful, backing up '/tmp/ARCHIV_MONITORING'"		
		local LINENUMBER_LAST_SUCCESS="$( grep -n "^#" /tmp/ARCHIV_MONITORING | tail -n1 | cut -d':' -f1 )"
		sed -n "$(( $LINENUMBER_LAST_SUCCESS + 1 )),\$p" /tmp/ARCHIV_MONITORING >/www/backup_archiv_node_data
	}

	if [ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then			# fixme! check free flash space?
		_log do $FUNC daemon info "safing syslog to '/www/SYSLOG_SAFED'"
		grep -v "kern.err olsrd" /var/log/messages >/www/SYSLOG_SAFED		# we don't need the "add route/del route" errors
	else
		[ "$REASON" = "nightly" ] || {
			_log do $FUNC daemon info "safing last 100 lines of syslog to '/www/SYSLOG_SAFED'"
			grep -v "kern.err olsrd" /var/log/messages | tail -n 100 >/www/SYSLOG_SAFED
		}
	fi	

	_log do $FUNC daemon info "flash free: '$( _system flash_free )', rebooting in 10 sec"

	[ "$( uci get network.wan.proto )" = "dhcp" ] && {
		ifup wan	# renew lease, so we will have it again after reboot?
	}

	_system crashreboot "$REASON"
}

_system_load()			# load without comma, e.g. 1.00 = 100 or 12.89 = 1289 or 0.05 = 5
{
	local time="${1:-1min}"
	local format="$2"	# e.g. quiet OR full OR <empty>
	local cpuload decimals nop out oldIFS

	case "$time" in
		'1min')
			oldIFS="$IFS"; IFS='. '; read cpuload decimals nop </proc/loadavg; IFS="$oldIFS"
		;;
		'5min')
			oldIFS="$IFS"; IFS='. '; read cpuload decimals cpuload decimals nop </proc/loadavg; IFS="$oldIFS"
		;;
		'15min')
			oldIFS="$IFS"; IFS='. '; read cpuload decimals cpuload decimals cpuload decimals nop </proc/loadavg; IFS="$oldIFS"
		;;
	esac

	case "$format" in
		full)
			out="${cpuload}.${decimals}"
		;;
		*)
			out="${cpuload}${decimals}"
			out="${out#0}"				# cut off leading zero's
			out="${out#0}"

			LOAD="$out"
		;;
	esac

	[ "$format" = 'quiet' ] || echo "${out:-100}"
}

_system_disc_free()
{
	local disc="$1"		# e.g. /tmp
	local unit="$2"		# defaults to [kilobytes]

	local line="$( df | grep " $disc"$ )"
	set ${line:-0 0 0 0}

	case "$unit" in
		percent)
			local percent_used="${5%[%]*}"		# 89% -> 89
			echo $(( 100 - ${percent_used:-0} ))
		;;
		bytes)
			echo $(( $4 * 1024 ))
		;;
		kilobytes|*)
			echo "$4"
		;;
	esac
}

_system_flash_free()
{
	local unit="$1"

	if grep -sq '/overlay' '/proc/mounts'; then
		_system disc_free '/overlay' $unit
	else
		_system disc_free '/' $unit
	fi
}

_system_flash_size()	# [kByte]
{
	local name hexsize line size=0

	while read line; do {
		set -- $line		# mtd3: 003c0000 00010000 "rootfs_data"
		name="$4"		# e.g. "rootfs_data"
		name="${name%\"}"
		name="${name#\"*}"	# strip trailing/leading "
		hexsize="0x$2"

		# todo: wap20: cfe + linux + nvram
		case "$name" in
			'RedBoot'|'u-boot'|'boardconfig'|'FIS directory'|'art'|'RedBoot config'|'kernel'|'rootfs')
				size=$(( $size + $hexsize ))
			;;
		esac
	} done <'/proc/mtd'

	echo "$(( $size / 1024 ))"
}

_system_uptime()		# OUT1 = string
{				# ARG1 = string: plain|centisec|sec|min|hour|days|humanreadable
	local FORMAT="$1"
	local OPTION="$2"
	local UPTIME FLOAT NOP oldifs

	local oldifs="$IFS"
	IFS='. '
	read UPTIME FLOAT NOP </proc/uptime		# reads integer = seconds
	IFS="$oldifs"

	case "$FORMAT" in
		humanreadable)
			UPTIME="$( _stopwatch seconds2humanreadable $UPTIME )"
		;;
		sec)
			:
		;;
		min)
			UPTIME=$(( $UPTIME / 60 ))
		;;
		h|hour|hours)
			UPTIME=$(( $UPTIME / 3600 ))
		;;
		days)
			UPTIME=$(( $UPTIME / 86400 ))
		;;
		centisec|centi)
			UPTIME="${UPTIME}${FLOAT}"
		;;
		plain)
			UPTIME="$UPTIME.$FLOAT"
		;;
	esac
	
	echo "${OPTION}$UPTIME"
}

_system_date()				# fixme! set a fixed path for the binary?
{					# fixme! make a new class _date()?
	local FORMAT="$1"

	case "$FORMAT" in
		humanreadable)
			case "$2" in
				short)
					_sanitizer do "$( date +%Y%b%d )" lowercase		# 2008oct12
				;;
				nice)
					date "+%d.%b'%y-%H:%M"					# 06.May'08-18:10
				;;
				*)
					_sanitizer do "$( date +%Y%b%d_%H:%M )" lowercase	# 2008oct12_20:25
				;;
			esac
		;;
		full)
			date						# Mon Sep 28 09:08:04 CEST 2009
		;;
		unixtime)
			date +%s					# 1254121912
		;;
		mail)							# Wed, 7 May 2008 16:04:59 +0200
			
			echo "$( date +%a ), $( date +%e | sed 's/ //' ) $( date "+%b %Y %X %z" | sed 's/-0/+0/' )"
		;;
		unixtime2date)
			date -d @$2
		;;
		2unixtime)
			local DATE="$2"		# output of 'date', e.g. "Tue Mar  9 11:07:44 CET 2010"
						# fixme! uname -a: "5 Mon Apr 11 11:24:07 CEST 2011"
						# fixme! uname -a: "1 So 4. Okt 13:34:39 CEST 2009"

			local WEEKDAY MONTH DAY TIME ZONE YEAR HOUR MIN SEC UNIXTIME oldifs

			read WEEKDAY MONTH DAY TIME ZONE YEAR <<EOF
$DATE
EOF
			[ -z "$YEAR" ] && YEAR="$ZONE"		# ls -le '$file'

			case "$MONTH" in
				Jan|jan) MONTH="01" ;;
				Feb|feb) MONTH="02" ;;
				Mar|mar) MONTH="03" ;;
				Apr|apr) MONTH="04" ;;
				May|may) MONTH="05" ;;
				Jun|jun) MONTH="06" ;;
				Jul|jul) MONTH="07" ;;
				Aug|aug) MONTH="08" ;;
				Sep|sep) MONTH="09" ;;
				Oct|oct) MONTH="10" ;;
				Nov|nov) MONTH="11" ;;
				Dec|dec) MONTH="12" ;;
			esac

			case "$DAY" in
				[1-9]) DAY="0$DAY" ;;
			esac

			oldifs="$IFS"
			IFS=":"
			read HOUR MIN SEC <<EOF
$TIME
EOF
			IFS="$oldifs"

			date --date "${YEAR}-${MONTH}-${DAY} ${HOUR}:${MIN}:${SEC}" +%s
		;;
		evalable)
			date "+DATE=\"%b %d %H:%M:%S\""
		;;
		*)
			date "+%b %d %H:%M:%S"				# Sep 28 09:01:54
		;;
	esac
}

_system_pids_count ()
{
	local PROCESS_NAME="$1"		# e.g. 'wifi' or 'xrelayd'
	local N=0			#      pidof wifi: '5736 5779 6314 6317 6499'
	local PID

	for PID in $( pidof "$PROCESS_NAME" ); do N=$(( $N + 1 )); done
	echo $N
}

_system_ram_free()		# [bytes]
{
	local option="$1"	# eval-hack OR flush
	local mem line

	[ "$option" = "flush" ] && {
		option=

		[ -e "/proc/sys/vm/drop_caches" ] && {
			sync
			echo 3 > /proc/sys/vm/drop_caches
		}
	}

	while read line; do {
		case "$line" in
			'MemFree:'*)
				set -- $line
				mem=$2
			;;
			'Buffers:'*)
				set -- $line
				mem=$(( ($mem + $2) * 1024 ))
				break
			;;
		esac
	} done </proc/meminfo

	echo "${option}${mem}"
}

_system_ram_size()		# [kBytes]
{
	local option="$1"	# e.g. is_lowram
	local mem line
	local lowram_border="16384"

	while read line; do {
		case "$line" in
			MemTotal:*)
				set $line

				case "$option" in
					is_lowram)
						test $2 -le $lowram_border
					;;
					*)
						echo "$2"
					;;
				esac

				return
			;;
		esac
	} done </proc/meminfo
}

_system_flash_mounted_readonly ()	# SENS: check if data-partition is mounted read-only (failsafe or firmware-update-mode)
{
	local FUNC="flash_mounted_readonly"
	local LINE

	mount | while read LINE; do {
	
		set $LINE
	
		[ "${5}${6}" = "mini_fo(ro)" ] && {
			_log do $FUNC daemon info "data-partition mounted read-only"
			return 0
		}
	} done
	
	return 1
}
