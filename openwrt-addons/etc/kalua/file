#!/bin/sh

_file_time()
{
	local file="$1"
	local option="$2"	# unixstamp|humanreadable

	if [ -e "$file" ]; then
		case "$option" in
			'unix'*)
				date +%s -r "$file"
			;;
			'human'*)
				_system date unixtime2date "$( date +%s -r "$file" )"
			;;
		esac
	else
		echo '0'
	fi
}

_file_age()
{
	local file="$1"
	local option="$2"
	local unixtime_file=$( _file time "$file" unixstamp )
	local age=$(( $( _system date unixtime ) - $unixtime_file ))	# [seconds]

	case "$option" in
		humanreadable)
			_stopwatch seconds2humanreadable "$age"
		;;
		humanreadable_verbose)
			if [ $age -gt 1800 ]; then
				echo "$( _stopwatch seconds2humanreadable "$age" ) @ $( _system date unixtime2date "$unixtime_file" )"
			else
				_stopwatch seconds2humanreadable "$age"
			fi
		;;
		sec|*)
			echo "$age"
		;;
	esac
}

_file_insert_at()
{
	local regex="$1"	# e.g. ^mystring
	local file_include="$2"
	local file_work="$3"

	# http://stackoverflow.com/questions/3784672/inserting-text-from-a-file-to-the-beginning-of-another-file-bash
	sed -i -e "2{x;G};/${regex}/{r${file_include}" -e 'd}' "$file_work"
}

_file_convert_bin2hex ()	# using hexdump, to output eachs byte hex-representation
{				# and throw away thrash + linebreaks
	local file="$1"
	local line

	hexdump -C "$file" |
	 sed -n 's/^[0-9a-f]*\([0-9a-f ]*\)|.*/\1/p' |
	  sed -e 's/ //g' |
	   while read line; do {
		echo -n "$line"
	   } done
}

_file_convert_hex2bin ()
{
	local file="$1"

	if [ -e /www/cgi-bin/freifunk-upload ]; then

		/www/cgi-bin/freifunk-upload -a2b <"$file"
	else
		local hexbyte

		while read -n 2 hexbyte; do {
			printf "\\$( printf "%o" 0x$hexbyte )"
		} done <$file
	fi
}

_file_size()			# fixme! use 'stat' if possible
{				# hint: scraping 'ls -la' is dirty, but much faster than 'wc -c <$file'
	local file="$1"
	local unit="$2"
	local size

	# root@box:~ ls -l /etc/init.d/myfile
	# -rwxr-xr-x    1 1000     1000            0 Jan  3 16:50 /etc/init.d/myfile

	set -- $( ls -la "$file" 2>/dev/null || echo O O O O x O )
	size="$5"

	[ "$size" = 'x' ] && return 1	# file does not exist

	case "$unit" in
		kb)
			size=$(( size / 1024 ))
		;;
	esac

	echo "$size"
}

_file_lines()
{
	local file="$1"

	if [ -e "$file" ]; then
		wc -l <"$file"
	else
		echo '0'
	fi
}

_file_hash()
{
	local file="$1"

	md5sum "$file" 2>/dev/null | cut -d' ' -f1
}

_file_discusage()		# [bytes]
{
	local dir="$1"		# if empty -> pwd
	local i=0		# byte-counter

	eval "$( ls -lR "${dir:-$( pwd )}" | sed -n '/^-/s/^[^0-9]*[0-9]*[a-zA-Z ]*\([0-9]*\).*/i=$(( $i + \1 ));/p' )"
	echo $i
}
