_db_lock()
{
	local funcname="db_lock"
	local mode="$1"			# now|free
	local context="${2:-unset}"
	local file="/tmp/$funcname"

	case "$mode" in
		free)
			rm "$file"
		;;
		now)
			while [ -e "$file" ]; do {
				read reason <"$file"
				_log do $funcname daemon info "db is locked, task '$context' must wait for '${reason:-unknown_reason}'"
				sleep 5
			} done

			echo "$context" >"$file"
		;;
	esac
}

_db_purge()
{
	local funcname="db_purge"
	local obj

	_db lock now "$funcname"

	for obj in "/tmp/DB" "/www/cgi-bin/db_backup.tgz"; do {
		_log do $funcname daemon info "[OK] removing '$obj'"
		rm -fR "$obj"
	} done

	_db lock free "$funcname"
}

_db_backup()		# fixme! automatically call this after <prio> changes
{
	local funcname="db_backup"
	local file="/www/cgi-bin/db_backup.tgz"
	local file_temp="/tmp/db_backup.tgz.temp.$$"
	local dir="/tmp/DB"
	local errorcode=0
	local s1 s2 s3

	[ -d "$dir" ] || return 0
	[ -e "$dir/USER/login/meta_index" ] || return 0
	[ $( _file size "$dir/USER/login/meta_index" ) -eq 0 ] && return 0

	_db lock now "$funcname"

	if tar czf "$file_temp" "$dir" 2>/dev/null ; then
		_log do $funcname daemon info "[OK] wrote $( _file size "$file_temp" ) bytes to $file_temp"

		local filesize_new="$( _file size "$file_temp" )"
		local filesize_old="$( _file size "$file" )"
		local percentual_change="$( _math percentual_change "$filesize_old" "$filesize_new" )"
		local shrinktext="[ERR] archiv-size shrinks $filesize_old -> $filesize_new = ${percentual_change}%"

		[ $percentual_change -lt 0 ] && {
			_log do $funcname daemon alert "$shrinktext"
		}

		if [ $percentual_change -lt -5 ]; then
			_log do $funcname daemon sms "$shrinktext - abort"
			errorcode=1
		else
			s1=$( _file size "$file_temp" )

			if mv "$file_temp" "${file}.safewrite"; then
				sync
				s2=$( _file size "${file}.safewrite" )

				if [ $s1 -eq $s2 ]; then
					_log do $funcname daemon info "[OK] moved $file_temp -> $file.safewrite (sizechange: ${percentual_change}%)"

					if mv "${file}" "${file}.old"; then
						if mv "${file}.safewrite" "${file}"; then
							sync
							s2=$( _file size "${file}" )

							if [ $s1 -eq $s2 ]; then
								_log do $funcname daemon info "[OK] moved ${file}.safewrite -> ${file}"
							else
								_log do $funcname daemon sms "[ERR] moved ${file}.safewrite -> ${file}"
								errorcode=1
							fi
						else
							_log do $funcname daemon sms "[ERR] moving ${file}.safewrite -> ${file}"
							errorcode=1
						fi
					else
						_log do $funcname daemon sms "[ERR] moving ${file} -> ${file}.old"
						errorcode=1
					fi
				else
					_log do $funcname daemon sms "[ERR] moving $file_temp -> $file.safewrite free: $( _system flash_free )"
					errorcode=1
				fi
			else
				_log do $funcname daemon sms "[ERR] moving $file_temp -> $file free: $( _system flash_free )"
				errorcode=1
			fi
		fi
	else
		_log do $funcname daemon sms "[ERR] while working on $file_temp - disk full? free: $( _system disc_free "/tmp" )"
		errorcode=1
	fi

	_db lock free "$funcname"

	return $errorcode
}

_db_restore()		# is called during boot: see /etc/init.d/S70prepare_fff+
{
	local funcname="db_restore"
	local file="/www/cgi-bin/db_backup.tgz"

	_db lock now "$funcname"

	if [ -e "$file" ]; then

		if [ $( _file size "$file" ) -lt 300 ]; then
			_log do $funcname daemon info "refusing to unarc '$file', seems too small"
		else
			_log do $funcname daemon info "removing dir /tmp/DB, unarc of '$file'"
			rm -fR /tmp/DB

			if tar -C / -xzf "$file" ; then
				_log do $funcname daemon info "[OK]"
			else
				_log do $funcname daemon alert "[ERR] untar of '$file' went wrong - rescheduling"
				_scheduler add "_db restore" force
			fi
		fi
	else
		_log do $funcname daemon info "[ERR] '$file' not found"
	fi

	_db lock free "$funcname"
}

_db_hash()
{
	local hash="$( echo -n "$1" | md5sum )"
	echo "${hash%% *}"
}

_db_user()			# poormens_db: each line has: ID=<integer>;A="";B="";C="";D="";...;   	# autocreated is ID = linenumber = index
{
	local FUNC="db_user"

	local TABLE="$1"
	local ACTION="$2"
	local ID="$3"		# is set to 'autoid' when action is 'add'
	local OPTION="$4"
	local OPTION2="$5"

#	_log do $FUNC daemon info "$FUNC \"$1\" \"$2\" \"$3\" \"$4\" \"$5\" \"$6\" \"$7\" \"$8\" \"$9\" \"${10}\" \"${11}\" \"${12}\" \"${13}\" \"${14}\""

	local FIXME="$5$6$7$8$9${10}${11}${12}${13}${14}"
	local OBJ= ELEMENTS= REWRITE_VARS= SHORT_VAR= N= LIST= VALUE= FILL=

	case "$TABLE" in
		profile) ELEMENTS="NAME COMMENT AUTOGENERATE TIME_MODEL MAX_TIME MAX_TRAFFIC MAX_SPEED_UP MAX_SPEED_DOWN LANDING_URL COST CURRENCY" ;;
		login)   ELEMENTS="PROFILE_ID COMMENT USERNAME PASSWORD DEVICE_QUANTITY INSTALLED FUZZY USED" ;;
		device)  ELEMENTS="USER_ID MAC DEVTYPE LANG FIRSTSEEN LASTSEEN USED_TRAFFIC USED_TIME USED_TRAFFIC_TODAY USED_TIME_TODAY ISOLATION" ;;
		*)
			echo "Usage: _db user <table> <action>"
			echo "       _db user profile|login|device show [<id>|last|\"elementA elementB ... elementN\"]"
			echo "       _db user profile|login|device list [last <num>|reverse] | linecount | add autoid ... | del <id>|update <id> ..."
			echo "       _db user profile|login|device query ( profile_id <id> | hash2id <hash> | string2id <string> )"
			echo
			echo "       _db user login index_gen [last <num>]"
			return 1
		;;
	esac

	local DIR="/tmp/DB/USER/$TABLE"
	mkdir -p "$DIR"

	case "$ACTION" in
		query)
			case "$ID" in
				profile_id)
					ID="string2id"
					OPTION="A='$OPTION';"		# fixme!
				;;
			esac

			case "$ID" in
				hash2id)
					[ -e "$DIR/meta_index" ] || return 1
					local HASH="${OPTION}"
					[ ${#HASH} -eq 32 ] || return 1				# fixme! must be compatible with used hash-algo

					if [ "$OPTION2" = "last" ]; then
						sed -n "/$HASH/{=;q}" "$DIR/meta_index" | tail -n1
					else
						sed -n "/$HASH/{=;q}" "$DIR/meta_index"		# quit after first match
					fi
				;;
				string2id)
					[ -e "$DIR/rows" ] || return 1
					local STRING="$OPTION"

					if   [ "$OPTION2" = "last" ]; then
						sed -n "/$STRING/=" "$DIR/rows" | tail -n1
					elif [ "$OPTION2" = "all" ]; then
						sed -n "/$STRING/=" "$DIR/rows"
					else
						sed -n "/$STRING/{=;q}" "$DIR/rows"		# quit after first match
					fi
				;;
				string2id_list)
					[ -e "$DIR/rows" ] || return 1
					local STRING="$OPTION"
					sed -n "/$STRING/=" "$DIR/rows"
				;;
			esac
		;;
		index_gen)
			_db lock now "$ACTION"

			local INDEX_PRODUCTION="$DIR/meta_index"
			local INDEX="$INDEX_PRODUCTION.temp"
			cp "$INDEX_PRODUCTION" "$INDEX"

			local LOGIN_ID USERNAME PASSWORD FUZZY HASH HASH_INPUT LIST_HASH_INPUT
			local REST_USERNAME REST_PASSWORD LIST_LOGINS HOST LIST_HOSTS
			local USERNAME_CHAR1_LOWER USERNAME_CHAR1_UPPER PASSWORD_CHAR1_LOWER PASSWORD_CHAR1_UPPER
			local H1 H2 H3 H4 H5 H6 H7 H8

			is_macaddress()
			{
				case "$1" in
					[0-9a-f][0-9a-f][:-]*) return 0 ;;
							    *) return 1 ;;
				esac
			}

			is_5digits()
			{
				case "$1" in
					[0-9][0-9][0-9][0-9][0-9]) return 0 ;;
								*) return 1 ;;
				esac
			}

			create_index()
			{
				LIST_LOGINS="$( _db user login list ${ID:-all} $OPTION )"
				for LOGIN_ID in $LIST_LOGINS; do {

					USERNAME=
					eval $( _db user login show $LOGIN_ID "USERNAME PASSWORD FUZZY DEVICE_QUANTITY" )

					[ -z "$USERNAME" ] && {
						echo "#"
						continue
					}

					case "$DEVICE_QUANTITY" in
						0|-1|-2|-3)
							echo "#"
							continue
						;;
					esac

					if   is_macaddress "$USERNAME"; then

						LIST_HOSTS="$PASSWORD"
						if [ -z "$LIST_HOSTS" ]; then
							LIST_HASH_INPUT="$USERNAME"
						else
							if is_5digits $HOST; then		# this was an autogenerated password
								LIST_HASH_INPUT="$USERNAME"
							else
								for HOST in $LIST_HOSTS; do {
									LIST_HASH_INPUT="${LIST_HASH_INPUT}${USERNAME}${HOST} "
								} done
							fi
						fi

					elif [ -z "$FUZZY" ]; then
						LIST_HASH_INPUT="$USERNAME$PASSWORD"
					else
						REST_USERNAME="$( echo "$USERNAME" | cut -b2-99 )"
						REST_PASSWORD="$( echo "$PASSWORD" | cut -b2-99 )"

						_sanitizer include
						USERNAME_CHAR1_LOWER="$( _sanitizer do "$USERNAME" length:1 lowercase )"
						USERNAME_CHAR1_UPPER="$( _sanitizer do "$USERNAME" length:1 uppercase )"
						PASSWORD_CHAR1_LOWER="$( _sanitizer do "$PASSWORD" length:1 lowercase )"
						PASSWORD_CHAR1_UPPER="$( _sanitizer do "$PASSWORD" length:1 uppercase )"

						H1="${USERNAME_CHAR1_LOWER}${REST_USERNAME}${PASSWORD_CHAR1_LOWER}${REST_PASSWORD}"
						H2="${USERNAME_CHAR1_UPPER}${REST_USERNAME}${PASSWORD_CHAR1_LOWER}${REST_PASSWORD}"
						H3="${USERNAME_CHAR1_LOWER}${REST_USERNAME}${PASSWORD_CHAR1_UPPER}${REST_PASSWORD}"
						H4="${USERNAME_CHAR1_UPPER}${REST_USERNAME}${PASSWORD_CHAR1_UPPER}${REST_PASSWORD}"

						H5="${PASSWORD_CHAR1_LOWER}${REST_PASSWORD}${USERNAME_CHAR1_LOWER}${REST_USERNAME}"
						H6="${PASSWORD_CHAR1_UPPER}${REST_PASSWORD}${USERNAME_CHAR1_LOWER}${REST_USERNAME}"
						H7="${PASSWORD_CHAR1_LOWER}${REST_PASSWORD}${USERNAME_CHAR1_UPPER}${REST_USERNAME}"
						H8="${PASSWORD_CHAR1_UPPER}${REST_PASSWORD}${USERNAME_CHAR1_UPPER}${REST_USERNAME}"

						HASH="$(         _db hash "$H1" )"		# respects spaces in username or password
						HASH="${HASH} $( _db hash "$H2" )"
						HASH="${HASH} $( _db hash "$H3" )"
						HASH="${HASH} $( _db hash "$H4" )"
						HASH="${HASH} $( _db hash "$H5" )"
						HASH="${HASH} $( _db hash "$H6" )"
						HASH="${HASH} $( _db hash "$H7" )"
						HASH="${HASH} $( _db hash "$H8" )"

						echo "$HASH"
						LIST_HASH_INPUT=
					fi

					HASH=
					for HASH_INPUT in $LIST_HASH_INPUT; do {
						HASH="${HASH}$( _db hash "$HASH_INPUT" ) "
					} done

					[ -n "$LIST_HASH_INPUT" ] && echo "$HASH"

				} done
			}

			_stopwatch start $ACTION
			echo "index_gen" >"/tmp/CRON_OVERLOAD"

			case "$ID" in
				"")
					create_index >"$INDEX"
				;;
				lock)
					sed -i "${OPTION}s/^.*/# locked/" "$INDEX"
				;;
				*)
					create_index >>"$INDEX"		# append
				;;
			esac

			rm "/tmp/CRON_OVERLOAD"
			_stopwatch stop $ACTION quiet "$( _db user login list linecount )" "tickets"

			if [ $( _file size "$INDEX" ) -gt 0 ]; then		# fixme! why can this happen?
				if mv "$INDEX" "$INDEX_PRODUCTION"; then
					_db lock free "$ACTION"
					_log do $FUNC daemon info "$ACTION: wrote '$INDEX' -> '$INDEX_PRODUCTION'"
					_db backup
				else
					_log do $FUNC daemon alert "$ACTION: [ERR] during mv '$INDEX' -> '$INDEX_PRODUCTION'"
				fi
			else
				_log do $FUNC daemon alert "$ACTION: '$INDEX' 0 bytes - removing"
				rm "$INDEX"

				_db lock free "$ACTION"
			fi
		;;
		list)
			[ -e "$DIR/rows" ] || return 1

			case "$ID" in
				all)
					sed -n '/./=' "$DIR/rows"
				;;
				linecount)
					fgrep -c 'A=' "$DIR/rows"
				;;
				last)
					sed -n '/A=/=' "$DIR/rows" | tail -n ${OPTION:-1}
				;;
				first)
					sed -n '/A=/=' "$DIR/rows" | head -n ${OPTION:-1}
				;;
				reverse)
					sed -n '/A=/=' "$DIR/rows" | sed '1!G;h;$!d'
				;;
				range)
					local RANGE_START="$OPTION"
					local RANGE_END="$OPTION2"

					[ "$RANGE_END" -le "$RANGE_START" ] && return 1

					sed -n '/A=/=' "$DIR/rows" | sed -n "/^${RANGE_START}$/,/^${RANGE_END}$/p"
				;;
				*)
					sed -n '/A=/=' "$DIR/rows"
				;;
			esac
		;;
		show)						# fixme! idea: always write userwish/$OPTION in output, e.g. USERNAME=;PASSWORD=;
			[ -e "$DIR/rows" ] || return 1

			[ "$ID" = "last" ] && {
				ID="$( sed -n '$=' "$DIR/rows" )"
			}

			table_element_is_part_of_user_wish_or_wanted ()
			{
				case "$OPTION" in
					      "") return 0 ;;
					*"$OBJ"*) return 0 ;;
					       *) return 1 ;;
				esac
			}

			for OBJ in $ELEMENTS; do {

				case "$SHORT_VAR" in
					A) SHORT_VAR="B" ;;
					B) SHORT_VAR="C" ;;
					C) SHORT_VAR="D" ;;
					D) SHORT_VAR="E" ;;
					E) SHORT_VAR="F" ;;
					F) SHORT_VAR="G" ;;
					G) SHORT_VAR="H" ;;
					H) SHORT_VAR="I" ;;
					I) SHORT_VAR="J" ;;
					J) SHORT_VAR="K" ;;
					K) SHORT_VAR="L" ;;
					*)
						SHORT_VAR="A"
						
						table_element_is_part_of_user_wish_or_wanted && {
							OBJ="ID=${ID};${OBJ}"
							REWRITE_VARS="${REWRITE_VARS}s/${FILL}${SHORT_VAR}=/${FILL}${OBJ}=/;"
						}

						FILL=";"
						continue
					;;
				esac

				table_element_is_part_of_user_wish_or_wanted && {
					REWRITE_VARS="${REWRITE_VARS}s/${FILL}${SHORT_VAR}=/${FILL}${OBJ}=/;"
				}

				FILL=";"				
			} done

			sed -n "${ID}{${REWRITE_VARS}p;q}" "$DIR/rows"		# fixme! return ERROR on nonexisting line
		;;
		del)
			_db lock now "$ACTION"
			sed -i "${ID}s/^.*/#/" "$DIR/rows"
			_db lock free "$ACTION"
		;;
		add|update)				# fixme! if "add" is used, ID=<integer> is not in line?
			_db lock now "$ACTION"

			local USERNAME

			case "$ACTION" in
				add) 	N=3 ;;		# args are without ID (is autogenerated)
				update) N=4 ;;
			esac

			is_macaddress()
			{
				local hex="a-fA-F0-9"
				local fs=":-"

				case "$1" in
					[$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex]) return 0 ;;
					*) return 1 ;;
				esac
			}
			
			SHORT_VAR=
			for OBJ in $ELEMENTS; do {
				eval "VALUE=\"\${$N}\""

				case "${TABLE}_${OBJ}" in
					login_USERNAME)
						is_macaddress $VALUE && {
							VALUE="$( _sanitizer do "$VALUE" lowercase mac )"
							USERNAME="$VALUE"
						}
					;;
				esac

				case "${VALUE}${TABLE}_${OBJ}" in				# fixme! this a hack? (this ask's for an empty "$VALUE"!)
					login_USERNAME)
						VALUE="$( _random_username do )"
					;;
					nonelogin_USERNAME)
						VALUE=	# special: value 'none' forces an empty username-string (for sms/simple credentials)
					;;
					login_PASSWORD)
						[ -n "$USERNAME" ] || {
							case "$CONFIG_PROFILE" in
								shankar*)
									VALUE="$( _math random_integer 1 9999 fillup )"
								;;
								leonardo*)
									VALUE="$( _math random_integer 1 999999 fillup )"
								;;
								*)
									VALUE="$( _math random_integer 1 99999 fillup )"
								;;
							esac
						}
					;;
					login_INSTALLED)
						VALUE="$( _system date unixtime )"
					;;
				esac

				case "$SHORT_VAR" in
					A) SHORT_VAR="B" ;;
					B) SHORT_VAR="C" ;;
					C) SHORT_VAR="D" ;;
					D) SHORT_VAR="E" ;;
					E) SHORT_VAR="F" ;;
					F) SHORT_VAR="G" ;;
					G) SHORT_VAR="H" ;;
					H) SHORT_VAR="I" ;;
					I) SHORT_VAR="J" ;;
					J) SHORT_VAR="K" ;;
					K) SHORT_VAR="L" ;;
					*) SHORT_VAR="A" ;;
				esac
				
				LIST="${LIST}$SHORT_VAR='$VALUE';"
				N=$(( $N + 1 ))
			} done

			case "$ACTION" in
				add)
					echo "$LIST" >>"$DIR/rows"
				;;
				update)
					local TAB="	"		# sed-field-separator
					sed -i "${ID}s${TAB}^.*${TAB}ID=$ID;$LIST${TAB}" "$DIR/rows"
				;;
			esac

			case "$TABLE" in
				profile)
					_scheduler add "_db backup"	# fixme! must be faster
				;;
			esac

			_db lock free "$ACTION"
		;;
	esac
}

_db_ticketcheck()						# going through list of profiles (user defined or all)
{								#
	local FUNC="db_ticketcheck"				# going reverse through list of last new devices
	local PROFILE_ID_WISH="$1"	# id or "auto"		# which profile has the login, which have used this device?
	local DEVICE_ID_LIST_REVERSE="$2"			# if profile = wished, than check:
	local DEVICE_ID_LIST="$( _db user device list )"	#
								# go through list of all login's, after the used one
	local ALIEN_PROFILE_ID ALIEN_ID				# count, which have whished profile X and are unused
	local USER_ID_LAST ID ID2 USER_ID_STACK
	local AUTOGENERATE_BORDER=
	local UNUSED_TICKETS FOUND_DEVICE
	local i=0
	local lockfile="/tmp/${FUNC}_is_running"
	local file_todo="/tmp/DB/USER/profile/2check"

	if [ -n "$PROFILE_ID_WISH" ]; then
		case "$PROFILE_ID_WISH" in
			[0-9]*)
				grep -sq " $PROFILE_ID_WISH " "$file_todo" || {
					echo -n " $PROFILE_ID_WISH " >>"$file_todo"
				}
			;;
			auto)
				PROFILE_ID_WISH=
			;;
		esac

		if [ -e "$file_todo" ]; then
			read PROFILE_ID_WISH <"$file_todo"
		else
			return 0
		fi
	else
		PROFILE_ID_WISH="$( _db user profile list )"
	fi

	allow_run()
	{
		[ -e "$lockfile" ] && return 1

		[ -e "/tmp/db_ticketcheck_force" ] && {		# for debugging
			rm "/tmp/db_ticketcheck_force"
			touch "$lockfile"
			return 0
		}

		_system maintenance_window_active || return 1

		touch "$lockfile"
	}

	allow_run || return 0
	_log do $FUNC daemon alert "arg1: '$PROFILE_ID_WISH' arg2: '$DEVICE_ID_LIST_REVERSE'"
	echo "$FUNC" >/tmp/CRON_OVERLOAD

	case "$CONFIG_PROFILE" in
		hotello*)
			AUTOGENERATE_BORDER="128"
		;;
		preskil*|dhfleesensee*|elephant*)
			AUTOGENERATE_BORDER="96"	# 3 * 32
		;;
		*)
			AUTOGENERATE_BORDER="64"
		;;
	esac

	[ -z "$DEVICE_ID_LIST_REVERSE" ] && {
		DEVICE_ID_LIST_REVERSE="$( _db user device list reverse )"
	}

	profiles_are_matching_and_login_is_unused ()		# needs global ID_CHECK + ALIEN_PROFILE_ID + DEVICE_ID_LIST
	{
		eval $( _db user login show $ID_CHECK "PROFILE_ID" )

		if [ "$PROFILE_ID" = "$ALIEN_PROFILE_ID" ]; then
			_log do $FUNC daemon debug "mark2: iterating over DEVICE_ID_LIST"

			for ID2 in $DEVICE_ID_LIST; do {
				eval $( _db user device show $ID2 "USER_ID" )
				[ "$ID_CHECK" = "$USER_ID" ] && {
					return 1
				}
			} done
			return 0
		else
			return 1
		fi
	}

	for ALIEN_PROFILE_ID in $PROFILE_ID_WISH; do {

		sed -i "s/ $ALIEN_PROFILE_ID //" "$file_todo"		# remove ID from todo-file

		eval "$( _db user profile show $ALIEN_PROFILE_ID "AUTOGENERATE NAME" )"

		if [ "$AUTOGENERATE" = "1" ]; then
			_log do $FUNC daemon debug "checking for unused tickets with profile $ALIEN_PROFILE_ID ($NAME)"
		else
			_log do $FUNC daemon debug "ignoring profile $ALIEN_PROFILE_ID ($NAME) - autogenerate is off"
			continue
		fi

		_stopwatch start $FUNC

		FOUND_DEVICE=
		for ALIEN_ID in $DEVICE_ID_LIST_REVERSE; do {

			if [ $i -eq 10 ]; then
				i=0
				_log do $FUNC daemon debug "mark1: 10 iterations done"
			else
				i=$(( $i + 1 ))
			fi

			eval "$( _db user device show $ALIEN_ID "USER_ID"  )"
			eval "$( _db user login show $USER_ID "PROFILE_ID" )"

			[ "$PROFILE_ID" = "$ALIEN_PROFILE_ID" ] && {		# matches user/loop_wish?

				FOUND_DEVICE=1
				UNUSED_TICKETS=0
				LOGIN_LAST="$( _db user login list last )"
				DIFF="$(( $LOGIN_LAST - $USER_ID ))"

				for ID_CHECK in $( _db user login list last $DIFF ); do {
					profiles_are_matching_and_login_is_unused && {
						UNUSED_TICKETS=$(( $UNUSED_TICKETS + 1 ))
					}
				} done

				while [ $UNUSED_TICKETS -lt $AUTOGENERATE_BORDER ]; do {
					_log do $FUNC daemon alert "[ERR] only $UNUSED_TICKETS/$AUTOGENERATE_BORDER unused tickets/logins for profile $ALIEN_PROFILE_ID ($NAME) in database (after login $(( $LOGIN_LAST - $DIFF )))"
				
					_db autocreate_tickets_and_send_mail "$ALIEN_PROFILE_ID"
					UNUSED_TICKETS=$(( $UNUSED_TICKETS + 32 ))
				} done

				echo "$UNUSED_TICKETS" >"/tmp/DB/USER/profile/id${ALIEN_PROFILE_ID}_counterA"
				_log do $FUNC daemon info "[OK] $UNUSED_TICKETS (enough) unused tickets/logins for profile $ALIEN_PROFILE_ID ($NAME) in database (after login $(( $LOGIN_LAST - $DIFF )))"

				break
			}
		} done

		[ -z "$FOUND_DEVICE" ] && {
			_log do $FUNC daemon info "[ERR] did not found any device, which uses profile $ALIEN_PROFILE_ID ($NAME)"	
		}

		_stopwatch stop $FUNC quiet

	} done

	[ $( _file size "$file_todo" ) -eq 0 ] && {
		rm "$file_todo"
	}

	rm "/tmp/CRON_OVERLOAD"
	rm "$lockfile"
}

_db_autocreate_tickets_and_send_mail()
{
	local funcname="db_autocreate_tickets_and_send_mail"
	local PROFILE_ID="${1:-$( _db user profile list first )}"	# or list if login-ID's
	local USECASE="${2:-autogenerate_tickets}"			# <autogenerate_tickets|existing_tickets>
	local logprio="sms"

	USERNAME=		# otherwise we get empty passwords -> see db()

	local FUNC="db_autocreate_tickets_and_send_mail"
	local TICKET_QUANTITY=32
	local COUNTER NAME LOGIN LIST_ID

	case "$USECASE" in
		existing_tickets)
			logprio="alert"

			LIST_ID="$( _sanitizer do "$PROFILE_ID" newlines2spaces )"
			for LOGIN in $LIST_ID; do {					# count ID's + get PROFILE_NAME
				COUNTER=$(( ${COUNTER:-0} + 1 ))
				[ -z "$NAME" ] && {
					eval $( _db user login show $LOGIN "PROFILE_ID" )
					eval $( _db user profile show $PROFILE_ID "NAME" )
				}
			} done
		;;
		autogenerate_tickets)
			eval $( _db user profile show $PROFILE_ID "NAME" )

			ID="$( _db user login query profile_id "$PROFILE_ID" last )"
			eval $( _db user login show "$ID" "DEVICE_QUANTITY FUZZY" )

			case "$DEVICE_QUANTITY" in		# fixme! safe defaults per profile
				-*)
					DEVICE_QUANTITY=1
				;;
			esac

			_stopwatch start Generating_${TICKET_QUANTITY}_Tickets
			while [ ${COUNTER:=0} -ne $TICKET_QUANTITY ]; do {
				COUNTER="$(( $COUNTER + 1 ))"
				_db user login add "$PROFILE_ID" "" "" "" "$DEVICE_QUANTITY" "$UNIXTIME" "$FUZZY"
			} done
			_stopwatch stop Generating_${TICKET_QUANTITY}_Tickets quiet "${TICKET_QUANTITY}" "tickets"

			_db user login index_gen last $TICKET_QUANTITY
			_db backup

			LIST_ID="$( _db user login list last $TICKET_QUANTITY )"	
			COUNTER="$TICKET_QUANTITY"
		;;
	esac

	local PRE="/tmp/tickets_autocreated_$$"
	local FILE_MAIL="$PRE.mail.txt"

	local LOCATION_NAME="$( _weblogin metadata_locationname | sed 's#\\&acute;##' )"	# fixme! profile B01/K80
	local FROM_REAL="$( _translate do "$LANG" wifi_system ) $LOCATION_NAME $( uci get mail.@smtp[0].name )"
	local FROM_MAIL="$( uci get mail.@smtp[0].mail )"
	local RECIPIENT_REAL="$( _translate do "$LANG" administration ) $LOCATION_NAME"
	local RECIPIENT_MAIL="$( uci get system.@admin[0].mail )"

	_log do $funcname daemon $logprio \
		"tickettype: $TICKET_QUANTITY x $NAME" \
		"[OK] Neue Tickets wurden automatisch generiert: $TICKET_QUANTITY x $NAME ($( _log append_info ))"

	local FILE_OVERVIEW="/tmp/$( _pdf filename "overview"		"$TICKET_QUANTITY" "$NAME" )"
	local FILE_LABELS="/tmp/$(   _pdf filename "labels"		"$TICKET_QUANTITY" "$NAME" )"
	local FILE_LABELS2="/tmp/$(  _pdf filename "labels_overview"	"$TICKET_QUANTITY" "$NAME" )"
	local FILE_CSV="$PRE.csv"
	local FILE ID
	local UNIXTIME="$( _system date unixtime )"

	_pdf output a4digest		"$LIST_ID" >$FILE_OVERVIEW
	_pdf output a4marker		"$LIST_ID" >$FILE_LABELS
	_pdf output a4marker_digest	"$LIST_ID" >$FILE_LABELS2

	_weblogin ticket_mail_text "$NAME" >$FILE_MAIL
	echo "$( _translate do "$LANG" wifi_system ) ($( _translate do "$LANG" overall filename ): $COUNTER) $( _translate do "$LANG" in_an_overview )" >$FILE_OVERVIEW.desc
	echo "$( _translate do "$LANG" wifi_system ) ($( _translate do "$LANG" overall filename ): $COUNTER) $( _translate do "$LANG" for_standard_labels )" >$FILE_LABELS.desc
	echo "$( _translate do "$LANG" protocol )/$( _translate do "$LANG" overview filename ) $( _translate do "$LANG" for_standard_labels )" >$FILE_LABELS2.desc

	for RECIPIENT_MAIL in $( _db list_mail_recipients ); do {
		_mail send "$FROM_REAL" "$FROM_MAIL" "$RECIPIENT_REAL" "$RECIPIENT_MAIL" "$FILE_MAIL" "" "" "" "$FILE_OVERVIEW $FILE_LABELS $FILE_LABELS2"
	} done

	for FILE in $FILE_MAIL $FILE_OVERVIEW $FILE_OVERVIEW.desc $FILE_LABELS $FILE_LABELS.desc $FILE_LABELS2 $FILE_LABELS.desc $FILE_CSV; do {
		[ -e "$FILE" ] && rm "$FILE"
	} done
}

_db_statistics_send_mail()
{
	local funcname="db_statistics_send_mail"
	local mode="$1"		# daily, weekly
	local time="$2"		# yesterday, today...
	local i=0
	local temp="/tmp/$funcname.temp"
	local list_recipients

	local FROM_REAL="$( _translate do "$LANG" wifi_system ) $LOCATION_NAME $( uci get mail.@smtp[0].name )"
	local FROM_MAIL="$( uci get mail.@smtp[0].mail )"
	local RECIPIENT_REAL="$( _translate do "$LANG" administration ) $LOCATION_NAME"
	local RECIPIENT_MAIL="$( uci get system.@admin[0].mail )"
	local FILE_MAIL="/tmp/$funcname.$$"

	daily_out()
	{
		local i="$1"
		while [ $i -gt 0 ]; do {
			cron.db_generate_statistics daily "-$i" "short"
			i=$(( $i - 1 ))
			tail -n1 "$temp" | grep -q ^"Sun" && echo "---"
		} done
	}

	case "$mode" in
		weekly_report)
			list_recipients="$( _db list_mail_recipients admin ) $( _db list_mail_recipients admin kalua )"

			daily_out 7 >"$temp"
			/usr/sbin/cron.db_generate_statistics "weekly" "-7" "short2" "$temp" >"$FILE_MAIL"
			rm "$temp"
		;;
		monthly_report)
			list_recipients="$( _db list_mail_recipients admin ) $( _db list_mail_recipients admin kalua )"

			daily_out 31 >"$temp"
			/usr/sbin/cron.db_generate_statistics "monthly" "-31" "short2" "$temp" >"$FILE_MAIL"
			rm "$temp"
		;;
		*)
			list_recipients="$( _db list_mail_recipients admin )"

			/usr/sbin/cron.db_generate_statistics "$mode" "$time" >"$FILE_MAIL"
		;;
	esac

	for RECIPIENT_MAIL in $( _list uniq "$list_recipients" ); do {
		_mail send "$FROM_REAL" "$FROM_MAIL" "$RECIPIENT_REAL" "$RECIPIENT_MAIL" "$FILE_MAIL"
	} done

	rm "$FILE_MAIL"
}

_db_import()
{
	local funcname="db_import"
	local file="$1"			# .csv with: "lastname","firstname" / codepage 8859-15
	local profile_id="${2:-1}"
	local devices_per_login="$3"
	local fuzzy="1"
	local comment line firstname lastname

	while read line; do {

		lastname="$(  echo "$line" | cut -d',' -f1 )"
		firstname="$( echo "$line" | cut -d',' -f2 )"
		eval lastname=$lastname
		eval firstname=$firstname
		comment="$lastname, $firstname"

		username="$( echo $firstname | cut -b 1 ).$lastname"		# Manfred von Ardenne -> "m.von ardenne"
		username="$( _sanitizer do "$username" lowercase )"

		_log do $funcname daemon info "adding '$firstname $lastname' -> $username"
		_db user login add "$profile_id" "$comment" "$username" "" "$devices_per_login" "" "$fuzzy"

	} done <"$file"

	_db user login index_gen
}

_db_list_mail_recipients()
{
	local group="$1"	# e.g. admin | staff
	local config_profile="${2:-$CONFIG_PROFILE}"

	build_mail()
	{
		echo "$1@$2.$3"
	}

	case "$config_profile" in
		spbansin*)
			build_mail ecklebe he-immobilien de
			build_mail office seeparkbansin de
		;;
		fparkssee*)
			build_mail info ferienpark-scharmuetzelsee de
		;;
		schoeneck*)
			build_mail info.vogtland ifahotels com
		;;
		leonardo*)
			build_mail info hotel-leonardo de
		;;
		olympia*)
			case "$group" in
				admin)
					build_mail as cans de
				;;
				*)
					build_mail hotel.olympia t-online de
					build_mail as cans de
				;;
			esac
		;;
		vivaldi*)
			build_mail henschel hotel-vivaldi de
		;;
		satama*)
			build_mail info satama-saunapark de
		;;
		monami*)
			build_mail frenzel monami-weimar de
		;;
		ejbw*)
			build_mail peuker ejbweimar de
		;;
		hotello-K80*)
			case "$group" in
				admin)
					build_mail as cans de
					build_mail wlan-ticket cans de
				;;
				*)
					build_mail k80 hotello de
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
			esac
		;;
		adagio*)
			build_mail mail hotel-adagio de
		;;
		versiliaje*)
			build_mail salvatore.ferrara web de
			build_mail wigo.steinberg gmx de
		;;
		versilia*)
			build_mail weimar ristorante-versilia de
		;;
		marinapark*)
			build_mail heikelinke web de
		;;
		paltstadt*)
			build_mail info weimar-pension-altstadt de
			build_mail elektrosteinmetz web de
		;;
		galerie*)
			build_mail info leipziger-hof de
		;;
		aschbach*)
			case "$group" in
				admin)
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
				*)
					build_mail rezeption berghotel-aschbach de
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
			esac
		;;
		hotello-B01*)
			case "$group" in
				admin)
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
				*)
					build_mail b01 hotello de
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
			esac
		;;
		hotello-H09*)
			case "$group" in
				admin)
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
				*)
					build_mail h09 hotello de
					build_mail wlan-ticket cans de
					build_mail as cans de
				;;
			esac
		;;
		itzehoe*)
			build_mail juergen.schack stadtwerke-steinburg de
			build_mail huettendorf stadtwerke-itzehoe de
			build_mail l.reschke ehsdruck de
		;;
		apphalle*)
			build_mail info appartementhausamdom de
		;;
		lisztwe*)
			build_mail mail hotel-adagio de
			build_mail mail hotel-liszt de
		;;
		elephant*)
			build_mail elephant.weimar luxurycollection com
		;;
		berlinle*)
			build_mail hotel-berlin-leipzig t-online de
		;;
		dhfleesensee*)
			build_mail Thomas.Hoerning dorfhotel-fleesensee de
			build_mail reservierung dorfhotel-fleesensee de
		;;
		zumnorde*)
			build_mail info hotel-zumnorde de
		;;
		tkolleg*)
			build_mail mail detlefwagner de
		;;
		shankar*)
			build_mail peerthy gmail com
			build_mail info bittorf-wireless de
		;;
		preskil*)
			build_mail peerthy gmail com
			build_mail nswami lepreskil mu
			build_mail info bittorf-wireless de
		;;
		limona*)
			build_mail reservierung ferienwohnung-limona de
			build_mail info bittorf-wireless de
		;;
		boltenhagenih*|boltenhagendh*)
			case "$group" in
				admin)
					build_mail michael.leirer tui com
					build_mail info bittorf-wireless de
				;;
				*)
					build_mail julia.niehus iberotelboltenhagen de
					build_mail gabriele.jelcho dorfhotelboltenhagen de
				;;
			esac
		;;
		*)
			build_mail info bittorf-wireless de
		;;
	esac
}

_db_report()
{
	local object="$1"	# string: device|login

	case "$object" in
		device)
			case "$2" in
				*":"*)
					local mac="$2"

					local device_id="$( _db user device query string2id $mac last )"
				;;
				*)
					local device_id="$2"
				;;
			esac

			FIRSTSEEN=
			eval $( _db user device show "${device_id:-999999}" )

			[ -z "$FIRSTSEEN" ] && {
				echo "no database entries for mac: ${mac:-unset_mac}/device_id: ${device_id:-unkown_device_id} yet"
				return
			}

			if [ "$DEVTYPE" = "0" ]; then
				DEVTYPE="wireless"
			else
				DEVTYPE="lan"
			fi

			eval $( _db user login show "$USER_ID" "COMMENT USERNAME PASSWORD PROFILE_ID DEVICE_QUANTITY" )

			if [ "$USERNAME" = "$mac" ]; then
				local authtype="mac-address"
				[ -n "$PASSWORD" ] && {
					authtype="$authtype, restricted to $PASSWORD"
				}
			else
				local authtype="username/password = $USERNAME/$PASSWORD"
			fi

			case "$DEVICE_QUANTITY" in
				"-"*)
					local login_validity="locked/invalid (code: $DEVICE_QUANTITY)"
				;;
				*)
					local login_validity="OK, ${DEVICE_QUANTITY:-undefined} amount"
				;;
			esac

			echo "mac: $MAC ($DEVTYPE) deviceID: $device_id userID: $USER_ID"
			echo "vendor: $( _net mac2vendor "$MAC" short )"
			echo "authentication: $authtype (${COMMENT:-no comment set})"
			echo "validity: $login_validity"

			eval $( _db user profile show "$PROFILE_ID" "NAME COMMENT MAX_TIME MAX_TRAFFIC TIME_MODEL" )
			echo "profile: $NAME (${COMMENT:-no comment set}) profileID: $PROFILE_ID"

			if [ -n "$MAX_TIME" ]; then
				MAX_TIME="limit: $( _stopwatch seconds2humanreadable "$(( $MAX_TIME * 60 ))" )"
			else
				MAX_TIME="unlimited"
			fi

			if [ -n "$MAX_TRAFFIC" ]; then
				MAX_TRAFFIC="limit: $(( MAX_TRAFFIC / 1024 )) megabytes"	# kilobyte -> megabyte
			else
				MAX_TRAFFIC="unlimited"
			fi

			echo "first login: $( _system date unixtime2date "$FIRSTSEEN" )"
			echo "last action: $( _system date unixtime2date "$LASTSEEN" ) (ago ~ $( _stopwatch seconds2humanreadable "$(( $( _system date unixtime ) - $LASTSEEN ))" ))"
			echo "passed time: $( _stopwatch seconds2humanreadable "$(( $LASTSEEN - $FIRSTSEEN ))" ) $( test "$TIME_MODEL" = "1" && echo "($MAX_TIME)" )"
			echo "used time: $( _stopwatch seconds2humanreadable "$USED_TIME" ) $( test "$TIME_MODEL" = "1" || echo "($MAX_TIME)" )"

			echo "traffic overall: $(( ($USED_TRAFFIC + ${USED_TRAFFIC_TODAY:=0}) / 1048576 )).$( echo $(( ($USED_TRAFFIC + $USED_TRAFFIC_TODAY) % 1048576 )) | cut -b1 ) megabytes ($MAX_TRAFFIC)"
			echo "traffic download: $( _sanitizer do "$USED_TRAFFIC" number_humanreadable ) bytes"
			echo "traffic upload: $( _sanitizer do "$USED_TRAFFIC_TODAY" number_humanreadable ) bytes"

			[ "$USED_TRAFFIC_TODAY" = "0" ] && USED_TRAFFIC_TODAY=1
			local ratio="$(( $USED_TRAFFIC / $USED_TRAFFIC_TODAY )).$( echo $(( $USED_TRAFFIC % $USED_TRAFFIC_TODAY )) | cut -b1 )"
			echo "traffic ratio down/up: $ratio:1"
		;;
		login)
			if [ ${#2} -eq 32 ]; then
				local hash="$2"
			else
				local username="$2"
				local password="$3"
				local hash="$( _db hash "${username}${password}" )"
			fi

			local user_id="$( _db user login query hash2id "$hash" )"

			[ -z "$user_id" ] && {
				echo "invalid hash/login - checking for username/password"

				user_id="$( _db user login query string2id "C='$username';D='$password'" )"
				[ -z "$user_id" ] && {
					echo "login not found"
					return 1
				}
			}

			# fixme!
			# build abstraction -> also this must return a list of id's
			local device_id="$( _db user device query string2id "A='$user_id';B='" )"

			if [ -z "$device_id" ]; then
				echo "login was never used"
			else
				_db report device "$device_id"
			fi
		;;
	esac
}
