_vpn_hideandseek_master_get()
{
	echo $ip
}

_vpn_hideandseek_user_list()
{
	local table_name='hideandseek'

	ls -1 "/tmp/$table_name-"* | cut -d'-' -f2
}

_vpn_hideandseek_user_add()
{
	local funcname='vpn_hideandseek_user_add'
	local ip="$1"
	local table_name='hideandseek'
	local table_id=50
	local tunnel_dev='tap0'
	local user_id myhna
	local markerfile="/tmp/$table_name-$ip"

	# already applied?
	[ -e "$markerfile" ] && return 0

	if _net local_inet_offer >/dev/null; then
		grep -q ^"$table_id $table_name" '/etc/iproute2/rt_tables' || {
			_log do $funcname daemon info "initial setup"
			echo "$table_id $table_name" >>'/etc/iproute2/rt_tables'
			ip route add default via "$( _ipsystem getvar WIFIVPNSERVERADR )" dev "$tunnel_dev" table "$table_name"

			#     0 = table local
			# 32766 = table main
			# 32767 = table default
			echo '30000' >/tmp/$funcname
# needed?
#			myhna="$( _netfilter_myhna )"
#			ip rule add from "$myhna" prio 30000 table main
		}

		read user_id <"/tmp/$funcname"
		echo "$user_id" >"$markerfile"
		_watch counter "/tmp/$funcname" increment 2

		ip rule add from "$ip/32" prio "$user_id" table "$table_name"
		ip rule add to   "$ip/32" prio "$(( user_id + 1 ))" lookup main
		ip route flush cache

		_log do $funcname daemon info "activated for $ip"
	else
		:
		# delegate
	fi
}

_vpn_hideandseek_user_disable()
{
	:
	# todo: call during bad/lost tunnel and automatically reenable if tunnel up again
}

_vpn_hideandseek_user_del()
{
	local funcname='vpn_hideandseek_user_del'
	local ip="$1"
	local user_id
	local table_name='hideandseek'
	local markerfile="/tmp/$table_name-$ip"

	if [ -e "$markerfile" ]; then
		read user_id <"$markerfile"
	else
		return 0
	fi

	ip rule del from "$ip/32" prio "$user_id" table "$table_name"
	ip rule del to   "$ip/32" prio "$(( user_id + 1 ))" lookup main
	rm "$markerfile"

	_log do $funcname daemon info "deleted $ip"
}
