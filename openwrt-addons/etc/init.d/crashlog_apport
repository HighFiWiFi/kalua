#!/bin/sh /etc/rc.common

START=99

uniq_machine_id()
{
	dropbearkey -y -f "/etc/dropbear/dropbear_dss_host_key" |
	 fgrep "Fingerprint:" |
	  cut -d' ' -f3
}

kernel_version()
{
	uname -a
}

box_usecase()
{
	local usecase="$( uci get system.@profile[0].name )"

	if [ -n "$usecase" ]; then
		echo "$usecase"
	else
		echo "unknown usecase"
	fi
}

box_hardware()
{
	if [ -e "/etc/HARDWARE" ]; then
		cat "/etc/HARDWARE"
	else
		echo "unknown hardware"
	fi
}

openwrt_revision()
{
	if [ -e "/etc/openwrt_version" ]; then
		cat /etc/openwrt_version
	else
		echo "UNKNOWN REVISION"
	fi
}

build_http_postdata()
{
	local file="$1"
	local target_ip="$2"
	local size="$( wc -c <"$file" )"
	local id="$( uniq_machine_id )"
	local version="$( openwrt_revision )"
	local kernel="$( kernel_version )"
	local path="crashlog/index.php"
	local usecase="$( box_usecase )"
	local hardware="$( box_hardware )"

	size=$(( ${#version} + ${#kernel} + ${#id} + ${#usecase} + ${#hardware} + 5 + $size ))

	logger "build_http_postdata: preparing send to 'http://$target_ip/$path' ($size bytes)"

	# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
	# http://stackoverflow.com/questions/3135307/send-post-request-with-netcat
	echo "POST /$path HTTP/1.1"
	echo "Host: $target_ip"
	echo "Content-Type: application/x-www-form-urlencoded"
	echo "Content-Length: $size"
	echo "Connection: close"
	echo

	echo "$version"
	echo "$kernel"
	echo "$id"
	echo "$usecase"
	echo "$hardware"

	cat "$file"
}

guess_crash_reason()
{
	local file="$1"
	local reason

	for reason in \
		"Instruction bus error" \
		"SysRq : Trigger a crash" \
		"invoked oom-killer:" \
		"Unable to handle kernel paging request at virtual address 00000000" \
		"Unhandled kernel unaligned access" \
		"Unable to handle kernel paging request at virtual address" \
		"Reserved instruction in kernel code" \
		"do_cpu invoked from kernel context" \
		"unaligned instruction access" \
		"SQUASHFS error:" \
		"Kernel bug detected" \
		"device closed unexpectedly"
		do {

		fgrep -sq "$reason" "$file" && {
			echo "$reason"
			return 0
		}
	} done

	echo 'unknown_reason'
	return 1
}

start()
{
	local option="$1"
	local funcname="crashlog_apport"		# enforce a crash with 'echo c >/proc/sysrq-trigger' (SysRq: Trigger a crash) or
	local crashlog="/sys/kernel/debug/crashlog"	# enforce a crash with 'tail -f /dev/zero' (out-of-memory = oom)
	local pause=1					# (crashlog.o works since r32788)
	local answer="false"
	local maxtry=3
	local destination reason

	. /tmp/loader

	# upload later - not during bootup, each script is terminated after 15 sec
	[ -z "$option" ] && {
		reason="$( guess_crash_reason "$file" )" && {
			echo "$( date ) $funcname() crash detected: reason: $( guess_crash_reason "$file" )" >>'/www/everlasting_syslog.txt'
			echo >>$SCHEDULER "/etc/init.d/$funcname start upload_crash"
		}

		return 0
	}

	for file in $crashlog /www/crashlog.* ; do {
		[ -e "$file" ] || continue
		grep -q 'SysRq : Trigger a crash' "$file" && continue

		while [ $maxtry -gt 0 ]; do {
			# default SERVERIP is 84.38.67.43
			logger -s "$funcname: found log in $file, reporting to server $MONITORING_SERVERIP"
			answer="$( build_http_postdata "$file" "$MONITORING_SERVERIP" | nc "$MONITORING_SERVERIP" 80 )"

			case "$answer" in
				*'OK')
					logger -s "$funcname: send of '$file' OK"
					[ "$file" = "$crashlog" ] || rm "$file"		# only delete on-disc
					maxtry=10
					break
				;;
				*)
					maxtry=$(( $maxtry - 1 ))
					logger -s "$funcname: error during send (answer: '$answer'), trying again in $pause sec"
					sleep $pause
				;;
			esac
		} done

		[ $maxtry -eq 0 ] && {
			destination="/www/crashlog.$( _file hash "$file" )"
			[ -e "$destination" ] || {
				cat "$file" >"$destination"
				echo "$( date ) $funcname() upload crash failed, wrote to: '$destination'" >>'/www/everlasting_syslog.txt'
			}

			echo >>$SCHEDULER "/etc/init.d/$funcname start upload_crash"
		}
	} done
}
