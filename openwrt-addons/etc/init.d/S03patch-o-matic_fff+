#!/bin/sh
. /tmp/loader

fkt_build_settings_menu ()				# SENS: switching between "simple", "expert" and "full" settings-menu
{							# ARG1: string, "simple", "expert", "full" or "" (empty)
	local DAEMON="fkt_build_settings_menu"
	local MODE="$1"	
	local DEST="/www/cgi-bin"
	local ID="15"
	local ID_EXPERT="16"
	local ID_USER="17"
	local FILE="config_fff+"
	local OPT_EXPERT="gui=expert"
	local OPT_USER="gui=user"
	local TITLE="Schnelleinstellung"
	local TITLE_EXPERT="Experteneinstellung"
	local TITLE_USER="Benutzerverwaltung"
	local MENU="$( uci get system.@webadmin[0].menu )"

	test -n "$READONLY" && return
	test -n "$FAILSAFE" && return
	
	_log do "$DAEMON" daemon debug "nvram is '$MENU', wish is '$MODE'"
	test ! -z "$MODE" && MENU=$MODE
	_log do "$DAEMON" daemon debug "Trying to establish mode '$MENU'"

	if [ -n "$FAILSAFE" ] || _system flash_mounted_readonly ; then
		_log do "$DAEMON" daemon debug "No action in failsafe/readonly mode possible!"
		return
	fi

	cd $DEST

	if [ ! -e "$ID-$FILE" ]; then
		_log do "$DAEMON" daemon debug "Inserting settings-menu entry"
		echo >$ID-$FILE "<TR ID=\"idx-$ID\"><TD><DIV CLASS=\"plugin\"><A CLASS=\"plugin\" HREF=\"$FILE\">$TITLE</A></DIV></TD></TR>"
	else
		_log do "$DAEMON" daemon debug "Settings-menu entry already exists"
	fi

	if [ "$MENU" = "simple" ] || [ -z "$MENU" ]; then
		_log do "$DAEMON" daemon debug "Checking if simple menu is up to date"

		test -e "$ID_EXPERT-$FILE" && mv "$ID_EXPERT-$FILE" "ghosted_$ID_EXPERT-$FILE"
		test -e "$ID_USER-$FILE"   && mv "$ID_USER-$FILE"   "ghosted_$ID_USER-$FILE"
	
		local LIST="$(ls -1 [^a-z]*)"
		for OBJ in $LIST; do
			if [ "$OBJ" != "$ID-$FILE" ]; then
				_log do "$DAEMON" daemon debug "Moving $DEST/$OBJ to $DEST/ghosted_$OBJ"
				mv "$OBJ" "ghosted_$OBJ"
			fi
		done
	fi
	
	if [ "$MENU" = "expert" ]; then
		_log do "$DAEMON" daemon debug "Checking if expert menu is up to date"

		local LIST="$(ls -1 [^a-z]*)"
		for OBJ in $LIST; do
			if [ "$OBJ" != "$ID-$FILE" ]; then
				_log do "$DAEMON" daemon debug "Moving $DEST/$OBJ to $DEST/ghosted_$OBJ"
				mv "$OBJ" "ghosted_$OBJ"
			fi
		done
	fi
	
	if [ "$MENU" = "expert" ] || [ "$MENU" = "full" ]; then
		if [ ! -e "$ID_EXPERT-$FILE" ]; then
			_log do "$DAEMON" daemon debug "Inserting expert-settings-menu entry"
			echo >$ID_EXPERT-$FILE "<TR ID=\"idx-$ID\"><TD><DIV CLASS=\"plugin\"><A CLASS=\"plugin\" HREF=\"$FILE?$OPT_EXPERT\">$TITLE_EXPERT</A></DIV></TD></TR>"
		else
			_log do "$DAEMON" daemon debug "Expert-settings-menu entry already exists"
		fi	
		
		if [ ! -e "$ID_USER-$FILE" ]; then
			_log do "$DAEMON" daemon debug "Inserting user-settings-menu entry"
			echo >$ID_USER-$FILE "<TR ID=\"idx-$ID\"><TD><DIV CLASS=\"plugin\"><A CLASS=\"plugin\" HREF=\"$FILE?$OPT_USER\">$TITLE_USER</A></DIV></TD></TR>"
		else
			_log do "$DAEMON" daemon debug "User-settings-menu entry already exists"
		fi
	fi

	if [ "$MENU" = "full" ]; then
		_log do "$DAEMON" daemon debug "Checking if full menu is up to date"
		
		local LIST="$(ls -1 ghosted_* 2>/dev/null)"
		for OBJ in $LIST; do
			local OBJ_NEW="$(echo $OBJ | sed "s/ghosted_//g")"
			_log do "$DAEMON" daemon debug "Moving $DEST/$OBJ to $DEST/$OBJ_NEW"
			mv "$OBJ" "$OBJ_NEW"
		done
	fi
	
	[ -e "$ID_EXPERT-$FILE" ] && rm "$ID_EXPERT-$FILE"	# fixme!
}

fkt_patch ()
{
	local  FNAME="patch"
	local  PATCH="$1"					# ARG1: string (keyword, what todo)
	local   MODE="$2"					# ARG2: string (optional, keyword "restore_from_rom")
	local   TEMP="/tmp/$FNAME"
	local BACKUP="${TEMP}_backup"
	local   SIZE=0
	local   FILE=0

	_uci is_oldstyle || {
		_log do $FNAME daemon info "found newstyle-device, ignoring call for patching '$PATCH' ($MODE)"
		return
	}

	[ "$MODE" != "restore_from_rom" ] && {
		_log do $FNAME daemon info "patching: '$PATCH'"
	}
	
	case $PATCH in
		leds_off)
			local LED_STYLE
		
			FILE="/etc/init.d/S99done"	
			cat >$TEMP $FILE

			case "$ROUTER_NO" in
				0)
					LED_STYLE="0x01"
				;;
			esac
			
			[ -n "$LED_STYLE" ] && echo >>$TEMP "echo $LED_STYLE >/proc/sys/diag"
		;;
		rrd_txpwr_collect)
			FILE="/etc/rrdcollect.conf"
			sed -e 's/rate noise rssi/rate noise rssi phy_txpower nlq/' \
			    -e 's/rate is %d Mbps/rate: %d/' \
			    -e 's/noise is -%d/noise: -%d/' \
			    -e 's/"rssi is -%d/"phy_txpower: %d" WLAN.rrd:txpw\n"nlq: %d" WLAN.rrd:nlq\n"rssi: -%d/' "$FILE" >"$TEMP"
		;;
		rrd_txpwr_conf)
			FILE="/etc/rrd.conf"
			sed -e 's/ Data Rate / Data Rate, TX-Power and OLSR-packetloss /' \
			    -e 's/Second/sec, mW, NLQ/' \
			    -e 's/RATE SNRA/RATE SNRA TXPW NLQ/' \
			    -e 's/^WLAN_RATE/WLAN_TXPW="txpw|TXpower|GAUGE|U|$WNOI|LINE2|%3.0lf"\nWLAN_NLQ="nlq|NLQ      |GAUGE|U|$TOLI|LINE2|%3.0lf"\nWLAN_RATE/' "$FILE" >"$TEMP"
		;;
		rrd_txpwr_exec)
			FILE="/usr/bin/rrd-wl"
			cat >"$TEMP" <<EOF
#!/bin/sh
. /tmp/loader; for ARG in \$*; do read 2>/dev/null VALUE </tmp/WIFI_VALUE_DEV_\${WIFIDEV}_\${ARG}; echo "\$ARG: \${VALUE:-0}"; done
EOF
		;;
		owfs_activate_server_option_for_usb)
			FILE="/etc/default/owserver"
			sed 's/#OPTIONS="-u -p /OPTIONS="-u -p /' "$FILE" >"$TEMP"
		;;
		owfs_activate_server)
			FILE="/etc/default/owserver"
			sed 's/#ENABLESTARTUP/ENABLESTARTUP/' "$FILE" >"$TEMP"
		;;
		olsrd_timezone_and_restart_counter)
			FILE="/etc/init.d/S53olsrd"
			sed "s#^[^a-zA-Z0-9]*start)#        start)  export TZ='$TZ'; . /tmp/loader; _olsr uptime mark_restart#" "$FILE" >"$TEMP"
		;;
		olsrd_not_on_wifi)
			FILE="/etc/init.d/S53olsrd"
			grep -q "# OLSRDEVLIST" "$FILE" || sed 's/OLSRDEVLIST=\$WIFIDEV/# OLSRDEVLIST=\$WIFIDEV/' "$FILE" >"$TEMP"
		;;
		dnsserver_timezone)
			FILE="/etc/init.d/S50dnsmasq"
			sed "s#^[^a-zA-Z0-9]*start)#        start)  export TZ='$TZ';#" "$FILE" >"$TEMP"
		;;
		dnsserver_fast_lease)
			FILE="/etc/init.d/S50dnsmasq"
			sed 's/filterwin2k/filterwin2k\ndhcp-authoritative/' "$FILE" >"$TEMP"
		;;
		http_public_menu_entry)
			FILE="/www/40-cgi-bin-tool_fff+"
			touch "$FILE"	# create it! (otherwise the script thinks something is wrong...)
			echo  >"$TEMP" "<TR ID=\"idx-40\"><TD><DIV CLASS=\"plugin\">"
			echo >>"$TEMP" "<A CLASS=\"plugin\" HREF=\"cgi-bin-tool_fff+\">Werkzeug</A></DIV></TD></TR>"
		;;
		syslog_with_rebootfix_syslog)
			FILE="/var/log/messages"
			cat 2>/dev/null "/www/SYSLOG_SAFED" "$FILE" >"$TEMP"
		;;
		statuspage_for_new_syslog)
			FILE="/www/cgi-bin-status.html"
			sed 's/logread /logread.sh /g' "$FILE" >"$TEMP"
		;;
		force_olsrd_startup_without_wifi)
			# then we have one hour to reload madwifi-modules, see S99done
			FILE="/etc/init.d/S53olsrd"
			sed "s/^test -z /# WE WANT OLSR-STARTUP EVEN WITHOUT WIRELESS | was: test -z /" "$FILE" >"$TEMP"
		;;
		syslogd_start_for_more_space)
			FILE="/etc/init.d/S10boot"
		
			REPLACE="{ mkdir -p /var/log; mv /tmp/messages /var/log/messages; syslogd -O /var/log/messages -s 333; }"
		
			sed "s#syslogd -C 16#$REPLACE#" "$FILE" >"$TEMP"			# 333 means 666 (logrotate)
		;;
		syslogd_set_hostname)
			FILE="/etc/init.d/S10boot"
			sed "s#^TOTMEM=#export HOSTNAME='|'; echo '|' >/proc/sys/kernel/hostname; TOTMEM=#" "$FILE" >"$TEMP"
		;;
		syslog_start_timezone)
			FILE="/etc/init.d/S10boot"
		
			sed "s#^\(.*\)\(syslogd -O \)\(.*\)#\1export TZ='$TZ'; syslogd -O \3#" "$FILE" >"$TEMP"
		;;
		hide_all_repos)
			[ -z "$( uci get opkg.@opkg[0].source )" ] && return		# avoid empty repo
		
			FILE="/etc/init.d/S10boot"

			sed 's/^src /# src /' "$FILE" >"$TEMP"
		;;	
		admin_start_page_for_own_values)
			FILE="/www/cgi-bin/index.html"
			sed 's/^einzublenden.<\/P>/einzublenden.<\/P><h1>Folgende Tabelle gilt nur f\&uuml;r Berlin, jedoch nicht in Weimar:<\/h1>/' "$FILE" >"$TEMP"
		;;
		httpd_start_for_own_404page)
			FILE="/etc/init.d/S50httpd"
			sed -e 's/I:cgi-bin-index.html/I:\/no-index/' -e 's/#E:\/cgi-bin-404.html/E:\/cgi-bin-welcome/' "$FILE" >"$TEMP"
		;;
		proxy_start_for_changing_port)
			FILE="/etc/init.d/S80micro-proxy"
			sed 's/3129/110/g' "$FILE" >"$TEMP"
			chmod +x "$TEMP"
		;;
		cron_minutely_for_verboser_trace_errors)
			FILE="/usr/sbin/cron.minutely"
			sed -e 's/"deactivated HNA4 for $defgw"/"deactivated HNA4 for $defgw (trace-error to $ip)"\;\. \/tmp\/loader;_log do hna_off daemon alert "trace_failure on $defgw to $ip"/' "$FILE" >"$TEMP"
		;;
		cron_minutely_for_verboser_hna_on)
			FILE="/usr/sbin/cron.minutely"
			sed -e 's/"activated HNA4 for $defgw"$/"activated HNA4 for $defgw"\;\. \/tmp\/loader;_log do hna_on daemon alert "trace_ok on $defgw"/' "$FILE" >"$TEMP"
		;;
		cron_minutely_for_configureable_tracetest)
			FILE="/usr/sbin/cron.minutely"
			sed '/traceroute/s/eval/test "$( . \/tmp\/loader; uci get network.@gatewaycheck[0].mode )" = "ping" \&\& ok=2;test $ok = 0 \&\& eval/' $FILE >"$TEMP"
		;;
		cron_minutely_for_welcome_helper)
			FILE="/usr/sbin/cron.minutely"
			cat >"$TEMP" <<EOF
#!/bin/sh
read WIFIADR </tmp/WIFIADR
PIDCOUNT="\$( pidof httpd | sed 's/[^ ]//g' )"
echo -n "\$WIFIADR \${PIDCOUNT:-#}" >/tmp/WELCOME_HELPER
EOF
			cat "$FILE" >>"$TEMP"
		;;
		remove_oldstyle_cron)
			FILE="/etc/init.d/S51crond"
			[ -e "/etc/init.d/S51crond_fff+" ] && echo "" >$TEMP
		;;
		login_banner)
			FILE="/etc/banner"
			cp "$FILE" "$TEMP"
			fkt_gen_infos_for_login_banner >>"$TEMP"
		;;
		fancy_prompt)
			FILE="/etc/profile"
			cat $FILE >"$TEMP"
			echo 'PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\] "' >>"$TEMP"
			echo '[ -e /tmp/loader ] && . /tmp/loader' >>"$TEMP"
			echo "alias regen='/etc/kalua_init ;. /tmp/loader'" >>"$TEMP"
			echo 'type _system >/dev/null && MEM="$( _system ram_free )" && test $MEM -lt 2000000 && echo "# ATTENTION: only $MEM bytes of RAM free" && unset MEM' >>"$TEMP"
		;;
		fancy_myssh)
			FILE="/etc/profile"
			cat $FILE >"$TEMP"
			echo "alias myssh=\"echo \\\"+exec: ssh -i /etc/dropbear/dropbear_dss_host_key\\\"; ssh -i /etc/dropbear/dropbear_dss_host_key\"" >>"$TEMP"
		;;
		intro_picture)
			FILE="/www/images/intro.jpg"
		;;
		html_preprocessor_with_pagepeel_and_nodenumber_in_title)
		
			uci get system.@profile[0].name | grep -q ^weimarnetz || return 0
		
			FILE="/www/cgi-bin-pre.sh"
			sed '/<\/HEAD>/q' $FILE | grep -v "<\/HEAD>"		 >$TEMP		# print all till (but not including) the "</HEAD>"-tag
												# for nodenumber in title
	
			sed -i 's/wan_hostname)/wan_hostname)\;echo -en "No."\;. \/tmp\/loader; uci get system.@profile[0].nodenumber\;echo -en " - "/g' $TEMP
	
			func_print_pagepeel					>>$TEMP		# appending "pagepeel"
			
			sed -n '/<\/HEAD>/,$p' $FILE | grep -v "<\/HEAD>" 	>>$TEMP		# print all after (but not including) the "</HEAD>"-tag
		;;
		*)
			return
		;;
	esac

	if [ "$MODE" = "restore_from_rom" ]; then
		local ROMFILE="/rom$FILE"
	
		if [ -r "$ROMFILE" ] && [ "$FILE" != "/var/log/messages" ]; then						# dunno why, but syslog is mirrored in rom?
			_log do $FNAME daemon info "restoring '$FILE' from '$ROMFILE' (ROM)"
			rm -f "$FILE"
			cp "$ROMFILE" "$FILE"
			_log do $FNAME daemon info "restored: $( _file size "$FILE" ) bytes"
		else
			_log do $FNAME daemon info "restoring '$FILE' impossible - not in ROM"
			# deleting file in jffs2? would be cleaner...
		fi
		
		rm -f "$TEMP"
		return
	fi

	[ ! -e "$FILE" ] && {
		_log do $FNAME daemon info "file '$FILE' does not exist - abort (mode:'$PATCH')"
		rm -f "$TEMP"
		return
	}
	
	SIZE="$( _file size "$FILE" )"
	_log do $FNAME daemon debug "working on '$FILE' - size: $SIZE bytes"
	cp "$FILE" "$BACKUP"

	SIZE="$( _file size "$TEMP" )"
	SIZE="${SIZE:=0}"			# fixme!

	_log do $FNAME daemon debug "patched - new size: $SIZE bytes"

	if [ $SIZE -ne 0 ]; then
		rm -f "$FILE"
		
		_log do $FNAME daemon notice "working on '$FILE' - writing to media"
		
		cp "$TEMP" "$FILE"
		chmod +x "$FILE"
		
		SIZE="$( _file size "$FILE" )"
		SIZE="${SIZE:=0}"
	
		if [ $SIZE -ne 0 ] && [ $( _file size "$TEMP" ) -eq $SIZE ]; then
			_log do $FNAME daemon notice "working on '$FILE' ready - size: $SIZE bytes"
		else
			_log do $FNAME daemon crit "errors during write on media - size: $SIZE bytes"
			
			rm -f "$FILE"
			cp    "$BACKUP" "$FILE"
			
			_log do $FNAME daemon crit "errors during write on media, restored backup - now $( _file size '$FILE' ) bytes"
		fi
	else
		_log do $FNAME daemon crit "errors during patching - leaving '$FILE' untouched"
	fi

	rm "$BACKUP" "$TEMP"
}

fkt_generate_logread_replacement () {
	local FNAME="generate_logread_replacement"
	local  FILE="/usr/bin/logread.sh"

	_log do $FNAME daemon info "creating $FILE"

	cat >$FILE <<EOF
#!/bin/sh

# this file was generating trough $0 (fkt_generate_logread_replacement)

  if [ -e "/var/log/messages" ] && [ "\$1" = "-f" ]; then
	echo "+ exec \"tail -n 50 -f /var/log/messages\"  (showing last 50 lines and further):"
	echo
	tail -n 50 -f /var/log/messages

elif [ -e "/var/log/messages" ] && [ "\$1" = "-a" ]; then
	echo "exec \"cat /var/log/messages.0 /var/log/messages\" (showing whole syslog):"
	echo
	cat /var/log/messages.0 /var/log/messages 2>/dev/null

elif [ -e "/var/log/messages" ]; then
	echo "exec \"tail -n 300 /var/log/messages\" (showing last 300 syslog lines) - look <a href=\"cgi-bin-tool_fff+?GREP=%3A&OPT=syslog&GUI=1&SUPRESS1=DHCP&SUPRESS2=rrdcollect&HIGHLIGHT=fff\">here for whole syslog</a> or use \"logread.sh -a\"..."
	echo
	tail -n 300 /var/log/messages
else
	echo "no syslog available yet! try 'logread'"
fi
EOF

	chmod +x "$FILE"	
	ln -s "$FILE" /usr/bin/lr
}

func_print_pagepeel()
{
	return 0
}

fkt_gen_infos_for_login_banner ()
{
	return 0
}

fkt_patch_intro_picture ()
{
	local FUNC="patch_intro_picture"
	local WIKI_MAIN_URL="http://wireless.subsignal.org"
	
	local PICTURE_NAME="Node$( uci get system.@profile[0].nodenumber ).jpg"		# searching for a picture in wiki name Node324.jpg (for node 324)
	local PICTURE_URL="${WIKI_MAIN_URL}/index.php?title=Bild:$PICTURE_NAME"		# path for wiki-picture-page (with description etc.)
	local PICTURE_FILE="/www/images/intro.jpg"
	local PICTURE_LINK
	
	PICTURE_LINK="$( _wget do "$PICTURE_URL" 30 |
		grep "$PICTURE_NAME" |
		 sed -n "s/.*href=\"\(.*$PICTURE_NAME\)\".*/\1/p" |
		  head -n2 |
		   tail -n1 |
		    cut -d'"' -f1
	)"

	echo $PICTURE_LINK | grep -q "^http://" || {		# no picture for this node uploaded on wiki yet
		PICTURE_URL="${WIKI_MAIN_URL}${PICTURE_LINK}"	# node-specific-picture
	
		_log do $FUNC daemon info "from '$PICTURE_URL'"
	                                                                                
		_wget do "$PICTURE_URL" 60 >"$PICTURE_FILE"
	}
}

_call_start ()							# after reach reboot
{		# fkt_patch syslog_with_rebootfix_syslog	# fixme! /var/log/messages is first started at S10boot, use /www/everlasting_syslog.txt
		fkt_build_settings_menu				# only needed for generating menu-entrys

		_watch counter /www/REBOOT_COUNTER increment

       		grep -sq "kern.warn kernel: " /www/everlasting_syslog.txt && {
       			_log do detect_old_oops daemon alert "kernel-oops detected"
		}

		[ ! -e "/www/FRESHFLASHED" ] && {		# we must take care of the
			rm -f "$LOCKFILE"			# lockfile, each time we exit
			_call_virgin				# or recall this script, otherwise
		}						# it won't work out ;-)

		# [ "$( _wifi mode )" != "adhoc" ] && {			# fixme! and the way back to normal wifi-olsr?
		#							# fixme! an olsr-feature was found, needs some research
		#	case "$( uci get system.@profile[0].name )" in	# does not work: iptables -I OUTPUT -p udp --dport 698 -j DROP
		#		versilia_ap)				#     -> syslog: kern.err olsrd[32119]: OLSR: sendto IPv4 Operation not permitted
		#			exit
		#		;;
		#		versilia_client)
		#			exit
		#		;;
		#		*)
		#			fkt_patch olsrd_not_on_wifi
		#		;;
		#	esac
		# }
}

_call_patch ()
{
	local PATCHLIST="$@"
	local PATCH
	
	for PATCH in $PATCHLIST; do {
		fkt_patch "$PATCH"
	} done
}

_call_repatch ()
{
	local OPTION="$1"

	case "$OPTION" in
		all)
			_call_restore_from_rom
			_call_virgin
			rm /www/FRESHFLASHED		# no start for software-install
			_call_post_software_install
			fkt_build_settings_menu		# is a hack for '$0 start'
			touch /www/FRESHFLASHED		# fixme! otherwise the profile_enforcer runs
		;;
		*)
			_call_restore_from_rom "$OPTION"
			_call_patch "$OPTION"
		;;
	esac
}

_call_virgin ()							# after virgin boot (directly after flashing)
{
		PATCHLIST="syslogd_start_for_more_space \
			   remove_oldstyle_cron \
			   hide_all_repos \
			   syslogd_set_hostname \
			   force_olsrd_startup_without_wifi \
			   statuspage_for_new_syslog \
			   cron_minutely_for_verboser_trace_errors \
			   cron_minutely_for_verboser_hna_on \
			   cron_minutely_for_configureable_tracetest \
			   http_public_menu_entry \
			   fancy_prompt \
			   fancy_myssh \
			   leds_off"
		
		for PATCH in $PATCHLIST; do {
			fkt_patch $PATCH
		} done
		
		fkt_generate_logread_replacement
		
		touch "/www/FRESHFLASHED"
}

_call_post_software_install ()					# is invoked directly after ready software_install
{
		PATCHLIST="olsrd_timezone_and_restart_counter \
			   dnsserver_timezone \
			   dnsserver_fast_lease \
			   syslog_start_timezone \
			   httpd_start_for_own_404page \
			   admin_start_page_for_own_values \
			   proxy_start_for_changing_port \
			   login_banner \
			   owfs_activate_server_option_for_usb \
			   owfs_activate_server \
			   rrd_txpwr_collect \
			   rrd_txpwr_conf \
			   rrd_txpwr_exec \
			   cron_minutely_for_welcome_helper \
			   html_preprocessor_with_pagepeel_and_nodenumber_in_title"
	
		for PATCH in $PATCHLIST; do {
			fkt_patch $PATCH
		} done
		
		uci get system.@profile[0].name | grep -q ^weimarnetz && {
			fkt_patch_intro_picture
		}
}

_call_restore_from_rom ()
{
	local PATCHLIST="$1"

	[ -z "$PATCHLIST" ] && {
		PATCHLIST="owfs_activate_server \
			   olsrd_timezone_and_restart_counter \
			   dnsserver_timezone \
			   syslog_with_rebootfix_syslog \
			   force_olsrd_startup_without_wifi \
			   statuspage_for_new_syslog \
			   syslogd_start_for_more_space \
			   admin_start_page_for_own_values \
			   httpd_start_for_own_404page \
			   proxy_start_for_changing_port \
			   cron_minutely_for_verboser_trace_errors \
			   login_banner \
			   intro_picture \
			   html_preprocessor_with_pagepeel_and_nodenumber_in_title \
			   http_public_menu_entry \
			   fancy_prompt"
	}

	for PATCH in $PATCHLIST; do {
		fkt_patch $PATCH restore_from_rom
	} done
	
	rm -f "/www/FRESHFLASHED"
}

_call_usage ()
{
		echo "Usage: $0 ( start | virgin | post_software_install | restore_from_rom | patch <PATCHNAME> | repatch <PATCHNAME|all )"
}


if [ -n "$1" ]; then
	if [ -n "$FAILSAFE" ] || [ -n "$READONLY" ]; then exit; fi
fi

LOCKFILE="/tmp/lockfile_patch-o-matic"

if [ -e "$LOCKFILE" ]; then
	_log do check_lockfile daemon crit "lockfile '$LOCKFILE' exists - abort"
	exit
else
	touch "$LOCKFILE"
fi

MAC_CHANGE="/www/mac_changed.txt"


case "$1" in
	start|virgin|post_software_install|restore_from_rom|patch|repatch)
		ARG1="$1"; shift; _call_$ARG1 "$@"
	;;
	*)
		_call_usage
	;;
esac


rm -f "$LOCKFILE"

