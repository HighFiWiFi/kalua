#!/bin/sh

get_homedir_from_passwd()
{
	grep -e ^"${USER:-root}:" "/etc/passwd" | cut -d ":" -f 6
}

[ -e "/etc/variables_fff+" ] && . "/etc/variables_fff+"

which uci >/dev/null || {
	# e.g. vpn-server / non-OpenWrt - TODO: translate calls, e.g. hostname
	uci() { :; }
	echo 'uci() { :; }	# no native uci'

	case "$( readlink /bin/sh )" in
		'dash')
			# TODO: a lot of scripts fail in dash
			logger -s '[ERR] please symlink /bin/sh to /bin/busybox or /bin/bash'
		;;
	esac

	MYPATH="$( grep 'PATH=' "/etc/profile" | head -n1 )"
	case "$MYPATH" in
		'export PATH='*)
			echo "$MYPATH"
		;;
		*'PATH='*)
			echo "export $MYPATH"
		;;
	esac
}

# http://wiki.openwrt.org/doc/uci/system#time.zones
TIMEZONE_BERLIN="CET-1CEST,M3.5.0,M10.5.0/3"
TIMEZONE="$( uci -q get system.@system[0].timezone )"
TIMEZONE="${TIMEZONE:-$TIMEZONE_BERLIN}"

HOSTNAME="$( uci -q get system.@system[0].hostname )"
HOSTNAME="${HOSTNAME:-$( cat '/etc/hostname' )}"
HOSTNAME="${HOSTNAME:-$( hostname 2>/dev/null || echo 'anonymous' )}"

read HARDWARE 2>/dev/null <'/etc/HARDWARE' || {
	# model name  : Intel(R) Xeon(R) CPU E5-2620 0 @ 2.00GHz
	set -- $( grep ^'model name' '/proc/cpuinfo' | head -n1 )
	shift 3
	HARDWARE="$@"
}
	cat <<EOF

# user-vars from $0.user
export TZ='$TIMEZONE'
[ -z "\$NODENUMBER" ] && NODENUMBER="$( uci get system.@profile[0].nodenumber )"
[ -z "\$CONFIG_PROFILE" ] && CONFIG_PROFILE='$( uci get system.@profile[0].name )'
HARDWARE='$HARDWARE'
HOSTNAME='$HOSTNAME'
MONITORING_SERVERIP='$( uci -q get system.@monitoring[0].serverip || echo "84.38.67.43" )'
export HOME='$( get_homedir_from_passwd )'
FFF_PLUS_VERSION=$FFF_PLUS_VERSION;FFF_VERSION=$FFF_VERSION
_uci() { return 1; }
bool_true()
{
	case "\$( uci -q get \$1 )" in
		1|on|true|enabled|yes)
			return 0
		;;
		*)
			return 1
		;;
	esac
}
EOF

# we need a monotonic counter for both: SCHEDULER / SCHEDULER_IMPORTANT
# case 5 is most likely: 10000...99999 sec = 2h46min...1d3h uptime
# max is 11 days = 999.999 sec

# PID = UP, but we dont want to overwrite the existing UP-var
	cat <<EOF

read PID REST </proc/uptime
PID=\${PID%.*}
case "\${#PID}" in
5) REST="0\$PID" ;;
4) REST="00\$PID" ;;
3) REST="000\$PID" ;;
2) REST="0000\$PID" ;;
1) REST="00000\$PID" ;;
esac
SCHEDULER="/tmp/SCHEDULER/job_\$REST"
SCHEDULER_QUEUE='/tmp/SCHEDULER/*'

PID="\$\$"
case "\${#PID}" in
5) REST="0\$PID" ;;
4) REST="00\$PID" ;;
3) REST="000\$PID" ;;
2) REST="0000\$PID" ;;
1) REST="00000\$PID" ;;
esac
SCHEDULER_IMPORTANT="/tmp/SCHEDULER/important_\$REST"
SCHEDULER_IMPORTANT_QUEUE='/tmp/SCHEDULER/important_*'

EOF

mkdir -p '/tmp/SCHEDULER'

read NOP MEMTOTAL NOP <"/proc/meminfo"
[ $MEMTOTAL -gt 16384 ] || {
	echo "LOWMEM=true"
#	echo 'while read LOAD </proc/loadavg; do case $PRELOAD$LOAD in 0.*) break ;; *) echo "kalua-loader: $0: $$: LOAD: $LOAD - wait 60 sec" >/dev/console; /bin/sleep 60 ;; esac; done'
	# PRELOAD is a (normally unset) var, which can be filled to fool this check, e.g. PRELOAD=0.
}

if iptables --help | fgrep -q -- '--wait'; then
	echo "IPT='iptables --wait'"
else
	echo "IPT='iptables'"
fi

if [ -e "$LOADER_FINAL" ]; then
	FILE_NETPARAM="/tmp/NETPARAM"
else
	FILE_NETPARAM="/www/NETPARAM"
fi

if [ -e "$FILE_NETPARAM" ]; then		# fixme! better concept needed
	while read LINE; do {
		case "$LINE" in
			*"="*)
				echo -n "${LINE};"
			;;
		esac
	} done <"$FILE_NETPARAM"
	echo "BATADR='$( uci -q get network.mybridge.ipaddr )'"

	. "$FILE_NETPARAM"

	echo -n "$WIFIDEV" >"/tmp/WIFIDEV"	# is a hack for fast seeking our dev/ip
	echo -n "$WIFIADR" >"/tmp/WIFIADR"
else
        logger -s "$0 could'nt work with '$FILE_NETPARAM'"
fi
